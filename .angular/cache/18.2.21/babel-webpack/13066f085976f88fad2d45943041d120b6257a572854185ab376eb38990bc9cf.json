{"ast":null,"code":"import { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CovidApiService {\n  http;\n  base = 'https://disease.sh/v3/covid-19';\n  constructor(http) {\n    this.http = http;\n  }\n  // Totales globales\n  getGlobal() {\n    return this.http.get(`${this.base}/all`);\n  }\n  // Resumen por país (ej. Ecuador)\n  getCountry(country) {\n    return this.http.get(`${this.base}/countries/${encodeURIComponent(country)}?strict=true`);\n  }\n  // Resumen de muchos países\n  getCountries() {\n    return this.http.get(`${this.base}/countries`);\n  }\n  // Serie histórica de un país (cases, deaths, recovered)\n  // lastdays: número o 'all' (p.ej. 180)\n  getHistorical(country, lastdays = 180) {\n    return this.http.get(`${this.base}/historical/${encodeURIComponent(country)}?lastdays=${lastdays}`).pipe(map(res => {\n      const t = res?.timeline ?? {};\n      const toSeries = (obj = {}) => {\n        const entries = Object.entries(obj).sort((a, b) => new Date(a[0]).getTime() - new Date(b[0]).getTime());\n        return {\n          dates: entries.map(([d]) => d),\n          values: entries.map(([, v]) => v)\n        };\n      };\n      const sCases = toSeries(t.cases);\n      const sDeaths = toSeries(t.deaths);\n      const sRecov = toSeries(t.recovered);\n      // usar las fechas de casos como referencia\n      return {\n        dates: sCases.dates,\n        cases: sCases.values,\n        deaths: sDeaths.values,\n        recovered: sRecov.values\n      };\n    }));\n  }\n  static ɵfac = function CovidApiService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CovidApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CovidApiService,\n    factory: CovidApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}