{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, forwardRef, EventEmitter, inject, Injector, booleanAttribute, numberAttribute, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { SharedModule } from 'primeng/api';\nimport { AutoFocus } from 'primeng/autofocus';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { BaseStyle } from 'primeng/base';\nconst theme = ({\n  dt\n}) => `\n.p-radiobutton {\n    position: relative;\n    display: inline-flex;\n    user-select: none;\n    vertical-align: bottom;\n    width: ${dt('radiobutton.width')};\n    height: ${dt('radiobutton.height')};\n}\n\n.p-radiobutton-input {\n    cursor: pointer;\n    appearance: none;\n    position: absolute;\n    top: 0;\n    inset-inline-start: 0;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    opacity: 0;\n    z-index: 1;\n    outline: 0 none;\n    border: 1px solid transparent;\n    border-radius: 50%;\n}\n\n.p-radiobutton-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    border: 1px solid ${dt('radiobutton.border.color')};\n    background: ${dt('radiobutton.background')};\n    width: ${dt('radiobutton.width')};\n    height: ${dt('radiobutton.height')};\n    transition: background ${dt('radiobutton.transition.duration')}, color ${dt('radiobutton.transition.duration')}, border-color ${dt('radiobutton.transition.duration')}, box-shadow ${dt('radiobutton.transition.duration')}, outline-color ${dt('radiobutton.transition.duration')};\n    outline-color: transparent;\n    box-shadow: ${dt('radiobutton.shadow')};\n}\n\n.p-radiobutton-icon {\n    transition-duration: ${dt('radiobutton.transition.duration')};\n    background: transparent;\n    font-size: ${dt('radiobutton.icon.size')};\n    width: ${dt('radiobutton.icon.size')};\n    height: ${dt('radiobutton.icon.size')};\n    border-radius: 50%;\n    backface-visibility: hidden;\n    transform: translateZ(0) scale(0.1);\n}\n\n.p-radiobutton:not(.p-disabled):has(.p-radiobutton-input:hover) .p-radiobutton-box {\n    border-color: ${dt('radiobutton.hover.border.color')};\n}\n\n.p-radiobutton-checked .p-radiobutton-box {\n    border-color: ${dt('radiobutton.checked.border.color')};\n    background: ${dt('radiobutton.checked.background')};\n}\n\n.p-radiobutton-checked .p-radiobutton-box .p-radiobutton-icon {\n    background: ${dt('radiobutton.icon.checked.color')};\n    transform: translateZ(0) scale(1, 1);\n    visibility: visible;\n}\n\n.p-radiobutton-checked:not(.p-disabled):has(.p-radiobutton-input:hover) .p-radiobutton-box {\n    border-color: ${dt('radiobutton.checked.hover.border.color')};\n    background: ${dt('radiobutton.checked.hover.background')};\n}\n\n.p-radiobutton:not(.p-disabled):has(.p-radiobutton-input:hover).p-radiobutton-checked .p-radiobutton-box .p-radiobutton-icon {\n    background: ${dt('radiobutton.icon.checked.hover.color')};\n}\n\n.p-radiobutton:not(.p-disabled):has(.p-radiobutton-input:focus-visible) .p-radiobutton-box {\n    border-color: ${dt('radiobutton.focus.border.color')};\n    box-shadow: ${dt('radiobutton.focus.ring.shadow')};\n    outline: ${dt('radiobutton.focus.ring.width')} ${dt('radiobutton.focus.ring.style')} ${dt('radiobutton.focus.ring.color')};\n    outline-offset: ${dt('radiobutton.focus.ring.offset')};\n}\n\n.p-radiobutton-checked:not(.p-disabled):has(.p-radiobutton-input:focus-visible) .p-radiobutton-box {\n    border-color: ${dt('radiobutton.checked.focus.border.color')};\n}\n\n.p-radiobutton.ng-invalid.ng-dirty > .p-radiobutton-box {\n    border-color: ${dt('radiobutton.invalid.border.color')};\n}\n\n.p-radiobutton.p-variant-filled .p-radiobutton-box {\n    background: ${dt('radiobutton.filled.background')};\n}\n\n.p-radiobutton.p-variant-filled.p-radiobutton-checked .p-radiobutton-box {\n    background: ${dt('radiobutton.checked.background')};\n}\n\n.p-radiobutton.p-variant-filled:not(.p-disabled):has(.p-radiobutton-input:hover).p-radiobutton-checked .p-radiobutton-box {\n    background: ${dt('radiobutton.checked.hover.background')};\n}\n\n.p-radiobutton.p-disabled {\n    opacity: 1;\n}\n\n.p-radiobutton.p-disabled .p-radiobutton-box {\n    background: ${dt('radiobutton.disabled.background')};\n    border-color: ${dt('radiobutton.checked.disabled.border.color')};\n}\n\n.p-radiobutton-checked.p-disabled .p-radiobutton-box .p-radiobutton-icon {\n    background: ${dt('radiobutton.icon.disabled.color')};\n}\n\n.p-radiobutton-sm,\n.p-radiobutton-sm .p-radiobutton-box {\n    width: ${dt('radiobutton.sm.width')};\n    height: ${dt('radiobutton.sm.height')};\n}\n\n.p-radiobutton-sm .p-radiobutton-icon {\n    font-size: ${dt('radiobutton.icon.sm.size')};\n    width: ${dt('radiobutton.icon.sm.size')};\n    height: ${dt('radiobutton.icon.sm.size')};\n}\n\n.p-radiobutton-lg,\n.p-radiobutton-lg .p-radiobutton-box {\n    width: ${dt('radiobutton.lg.width')};\n    height: ${dt('radiobutton.lg.height')};\n}\n\n.p-radiobutton-lg .p-radiobutton-icon {\n    font-size: ${dt('radiobutton.icon.lg.size')};\n    width: ${dt('radiobutton.icon.lg.size')};\n    height: ${dt('radiobutton.icon.lg.size')};\n}\n`;\nconst classes = {\n  root: ({\n    instance,\n    props\n  }) => ['p-radiobutton p-component', {\n    'p-radiobutton-checked': instance.checked,\n    'p-disabled': props.disabled,\n    'p-invalid': props.invalid,\n    'p-variant-filled': props.variant ? props.variant === 'filled' : instance.config.inputStyle === 'filled' || instance.config.inputVariant === 'filled'\n  }],\n  box: 'p-radiobutton-box',\n  input: 'p-radiobutton-input',\n  icon: 'p-radiobutton-icon'\n};\nclass RadioButtonStyle extends BaseStyle {\n  name = 'radiobutton';\n  theme = theme;\n  classes = classes;\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵRadioButtonStyle_BaseFactory;\n    return function RadioButtonStyle_Factory(__ngFactoryType__) {\n      return (ɵRadioButtonStyle_BaseFactory || (ɵRadioButtonStyle_BaseFactory = i0.ɵɵgetInheritedFactory(RadioButtonStyle)))(__ngFactoryType__ || RadioButtonStyle);\n    };\n  })();\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RadioButtonStyle,\n    factory: RadioButtonStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RadioButtonStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * RadioButton is an extension to standard radio button element with theming.\n *\n * [Live Demo](https://www.primeng.org/radiobutton/)\n *\n * @module radiobuttonstyle\n *\n */\nvar RadioButtonClasses;\n(function (RadioButtonClasses) {\n  /**\n   * Class name of the root element\n   */\n  RadioButtonClasses[\"root\"] = \"p-radiobutton\";\n  /**\n   * Class name of the box element\n   */\n  RadioButtonClasses[\"box\"] = \"p-radiobutton-box\";\n  /**\n   * Class name of the input element\n   */\n  RadioButtonClasses[\"input\"] = \"p-radiobutton-input\";\n  /**\n   * Class name of the icon element\n   */\n  RadioButtonClasses[\"icon\"] = \"p-radiobutton-icon\";\n})(RadioButtonClasses || (RadioButtonClasses = {}));\nconst _c0 = [\"input\"];\nconst _c1 = (a0, a1, a2, a3, a4) => ({\n  \"p-radiobutton p-component\": true,\n  \"p-radiobutton-checked\": a0,\n  \"p-disabled\": a1,\n  \"p-variant-filled\": a2,\n  \"p-radiobutton-sm p-inputfield-sm\": a3,\n  \"p-radiobutton-lg p-inputfield-lg\": a4\n});\nconst RADIO_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => RadioButton),\n  multi: true\n};\nclass RadioControlRegistry {\n  accessors = [];\n  add(control, accessor) {\n    this.accessors.push([control, accessor]);\n  }\n  remove(accessor) {\n    this.accessors = this.accessors.filter(c => {\n      return c[1] !== accessor;\n    });\n  }\n  select(accessor) {\n    this.accessors.forEach(c => {\n      if (this.isSameGroup(c, accessor) && c[1] !== accessor) {\n        c[1].writeValue(accessor.value);\n      }\n    });\n  }\n  isSameGroup(controlPair, accessor) {\n    if (!controlPair[0].control) {\n      return false;\n    }\n    return controlPair[0].control.root === accessor.control.control.root && controlPair[1].name === accessor.name;\n  }\n  static ɵfac = function RadioControlRegistry_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RadioControlRegistry)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RadioControlRegistry,\n    factory: RadioControlRegistry.ɵfac,\n    providedIn: 'root'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RadioControlRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n/**\n * RadioButton is an extension to standard radio button element with theming.\n * @group Components\n */\nclass RadioButton extends BaseComponent {\n  /**\n   * Value of the radiobutton.\n   * @group Props\n   */\n  value;\n  /**\n   * The name of the form control.\n   * @group Props\n   */\n  formControlName;\n  /**\n   * Name of the radiobutton group.\n   * @group Props\n   */\n  name;\n  /**\n   * When present, it specifies that the element should be disabled.\n   * @group Props\n   */\n  disabled;\n  /**\n   * Specifies the input variant of the component.\n   * @group Props\n   */\n  variant = 'outlined';\n  /**\n   * Defines the size of the component.\n   * @group Props\n   */\n  size;\n  /**\n   * Index of the element in tabbing order.\n   * @group Props\n   */\n  tabindex;\n  /**\n   * Identifier of the focus input to match a label defined for the component.\n   * @group Props\n   */\n  inputId;\n  /**\n   * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n   * @group Props\n   */\n  ariaLabelledBy;\n  /**\n   * Used to define a string that labels the input element.\n   * @group Props\n   */\n  ariaLabel;\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * When present, it specifies that the component should automatically get focus on load.\n   * @group Props\n   */\n  autofocus;\n  /**\n   * Allows to select a boolean value.\n   * @group Props\n   */\n  binary;\n  /**\n   * Callback to invoke on radio button click.\n   * @param {RadioButtonClickEvent} event - Custom click event.\n   * @group Emits\n   */\n  onClick = new EventEmitter();\n  /**\n   * Callback to invoke when the receives focus.\n   * @param {Event} event - Browser event.\n   * @group Emits\n   */\n  onFocus = new EventEmitter();\n  /**\n   * Callback to invoke when the loses focus.\n   * @param {Event} event - Browser event.\n   * @group Emits\n   */\n  onBlur = new EventEmitter();\n  inputViewChild;\n  onModelChange = () => {};\n  onModelTouched = () => {};\n  checked;\n  focused;\n  control;\n  _componentStyle = inject(RadioButtonStyle);\n  injector = inject(Injector);\n  registry = inject(RadioControlRegistry);\n  ngOnInit() {\n    super.ngOnInit();\n    this.control = this.injector.get(NgControl);\n    this.checkName();\n    this.registry.add(this.control, this);\n  }\n  onChange(event) {\n    if (!this.disabled) {\n      this.select(event);\n    }\n  }\n  select(event) {\n    if (!this.disabled) {\n      this.checked = true;\n      this.onModelChange(this.value);\n      this.registry.select(this);\n      this.onClick.emit({\n        originalEvent: event,\n        value: this.value\n      });\n    }\n  }\n  writeValue(value) {\n    if (!this.binary) {\n      this.checked = value == this.value;\n    } else {\n      this.checked = !!value;\n    }\n    if (this.inputViewChild && this.inputViewChild.nativeElement) {\n      this.inputViewChild.nativeElement.checked = this.checked;\n    }\n    this.cd.markForCheck();\n  }\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n  setDisabledState(val) {\n    this.disabled = val;\n    this.cd.markForCheck();\n  }\n  onInputFocus(event) {\n    this.focused = true;\n    this.onFocus.emit(event);\n  }\n  onInputBlur(event) {\n    this.focused = false;\n    this.onModelTouched();\n    this.onBlur.emit(event);\n  }\n  /**\n   * Applies focus to input field.\n   * @group Method\n   */\n  focus() {\n    this.inputViewChild.nativeElement.focus();\n  }\n  ngOnDestroy() {\n    this.registry.remove(this);\n    super.ngOnDestroy();\n  }\n  checkName() {\n    if (this.name && this.formControlName && this.name !== this.formControlName) {\n      this.throwNameError();\n    }\n    if (!this.name && this.formControlName) {\n      this.name = this.formControlName;\n    }\n  }\n  throwNameError() {\n    throw new Error(`\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName=\"food\" name=\"food\"></p-radioButton>\n        `);\n  }\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵRadioButton_BaseFactory;\n    return function RadioButton_Factory(__ngFactoryType__) {\n      return (ɵRadioButton_BaseFactory || (ɵRadioButton_BaseFactory = i0.ɵɵgetInheritedFactory(RadioButton)))(__ngFactoryType__ || RadioButton);\n    };\n  })();\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RadioButton,\n    selectors: [[\"p-radioButton\"], [\"p-radiobutton\"], [\"p-radio-button\"]],\n    viewQuery: function RadioButton_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      formControlName: \"formControlName\",\n      name: \"name\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      variant: \"variant\",\n      size: \"size\",\n      tabindex: [2, \"tabindex\", \"tabindex\", numberAttribute],\n      inputId: \"inputId\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      ariaLabel: \"ariaLabel\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      autofocus: [2, \"autofocus\", \"autofocus\", booleanAttribute],\n      binary: [2, \"binary\", \"binary\", booleanAttribute]\n    },\n    outputs: {\n      onClick: \"onClick\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR, RadioButtonStyle]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 5,\n    vars: 24,\n    consts: [[\"input\", \"\"], [3, \"ngStyle\", \"ngClass\"], [\"type\", \"radio\", 1, \"p-radiobutton-input\", 3, \"focus\", \"blur\", \"change\", \"checked\", \"disabled\", \"value\", \"pAutoFocus\"], [1, \"p-radiobutton-box\"], [1, \"p-radiobutton-icon\"]],\n    template: function RadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"div\", 1)(1, \"input\", 2, 0);\n        i0.ɵɵlistener(\"focus\", function RadioButton_Template_input_focus_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onInputFocus($event));\n        })(\"blur\", function RadioButton_Template_input_blur_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onInputBlur($event));\n        })(\"change\", function RadioButton_Template_input_change_1_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onChange($event));\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelement(4, \"div\", 4);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction5(18, _c1, ctx.checked, ctx.disabled, ctx.variant === \"filled\" || ctx.config.inputStyle() === \"filled\" || ctx.config.inputVariant() === \"filled\", ctx.size === \"small\", ctx.size === \"large\"));\n        i0.ɵɵattribute(\"data-pc-name\", \"radiobutton\")(\"data-pc-section\", \"root\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"value\", ctx.value)(\"pAutoFocus\", ctx.autofocus);\n        i0.ɵɵattribute(\"id\", ctx.inputId)(\"name\", ctx.name)(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-label\", ctx.ariaLabel)(\"tabindex\", ctx.tabindex)(\"aria-checked\", ctx.checked);\n        i0.ɵɵadvance(2);\n        i0.ɵɵattribute(\"data-pc-section\", \"input\");\n        i0.ɵɵadvance();\n        i0.ɵɵattribute(\"data-pc-section\", \"icon\");\n      }\n    },\n    dependencies: [CommonModule, i1.NgClass, i1.NgStyle, AutoFocus, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'p-radioButton, p-radiobutton, p-radio-button',\n      standalone: true,\n      imports: [CommonModule, AutoFocus, SharedModule],\n      template: `\n        <div\n            [ngStyle]=\"style\"\n            [ngClass]=\"{\n                'p-radiobutton p-component': true,\n                'p-radiobutton-checked': checked,\n                'p-disabled': disabled,\n                'p-variant-filled': variant === 'filled' || config.inputStyle() === 'filled' || config.inputVariant() === 'filled',\n                'p-radiobutton-sm p-inputfield-sm': size === 'small',\n                'p-radiobutton-lg p-inputfield-lg': size === 'large'\n            }\"\n            [class]=\"styleClass\"\n            [attr.data-pc-name]=\"'radiobutton'\"\n            [attr.data-pc-section]=\"'root'\"\n        >\n            <input\n                #input\n                [attr.id]=\"inputId\"\n                type=\"radio\"\n                class=\"p-radiobutton-input\"\n                [attr.name]=\"name\"\n                [checked]=\"checked\"\n                [disabled]=\"disabled\"\n                [value]=\"value\"\n                [attr.aria-labelledby]=\"ariaLabelledBy\"\n                [attr.aria-label]=\"ariaLabel\"\n                [attr.tabindex]=\"tabindex\"\n                [attr.aria-checked]=\"checked\"\n                (focus)=\"onInputFocus($event)\"\n                (blur)=\"onInputBlur($event)\"\n                (change)=\"onChange($event)\"\n                [pAutoFocus]=\"autofocus\"\n            />\n            <div class=\"p-radiobutton-box\" [attr.data-pc-section]=\"'input'\">\n                <div class=\"p-radiobutton-icon\" [attr.data-pc-section]=\"'icon'\"></div>\n            </div>\n        </div>\n    `,\n      providers: [RADIO_VALUE_ACCESSOR, RadioButtonStyle],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    value: [{\n      type: Input\n    }],\n    formControlName: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    variant: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    inputId: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    autofocus: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    binary: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    inputViewChild: [{\n      type: ViewChild,\n      args: ['input']\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(RadioButton, {\n    className: \"RadioButton\"\n  });\n})();\nclass RadioButtonModule {\n  static ɵfac = function RadioButtonModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RadioButtonModule)();\n  };\n  static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: RadioButtonModule\n  });\n  static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [RadioButton, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RadioButtonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RadioButton, SharedModule],\n      exports: [RadioButton, SharedModule]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(RadioButtonModule, {\n    imports: [RadioButton, SharedModule],\n    exports: [RadioButton, SharedModule]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RADIO_VALUE_ACCESSOR, RadioButton, RadioButtonClasses, RadioButtonModule, RadioButtonStyle, RadioControlRegistry };\n//# sourceMappingURL=primeng-radiobutton.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}