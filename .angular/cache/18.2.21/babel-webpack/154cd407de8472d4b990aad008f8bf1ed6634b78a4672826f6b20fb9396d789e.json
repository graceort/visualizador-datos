{"ast":null,"code":"import { trigger, transition, style, animate } from '@angular/animations';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, inject, NgZone, booleanAttribute, numberAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, ContentChildren, ContentChild, Directive, HostListener, PLATFORM_ID, Inject, Optional, forwardRef, ElementRef, NgModule } from '@angular/core';\nimport * as i5 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i3 from 'primeng/api';\nimport { OverlayService, FilterService, FilterOperator, FilterMatchMode, PrimeTemplate, TranslationKeys, SharedModule } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport * as i9 from 'primeng/button';\nimport { Button, ButtonModule } from 'primeng/button';\nimport * as i11 from 'primeng/datepicker';\nimport { DatePickerModule } from 'primeng/datepicker';\nimport * as i7 from 'primeng/checkbox';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { ArrowDownIcon } from 'primeng/icons/arrowdown';\nimport { ArrowUpIcon } from 'primeng/icons/arrowup';\nimport { CheckIcon } from 'primeng/icons/check';\nimport { FilterIcon } from 'primeng/icons/filter';\nimport { FilterSlashIcon } from 'primeng/icons/filterslash';\nimport { PlusIcon } from 'primeng/icons/plus';\nimport { SortAltIcon } from 'primeng/icons/sortalt';\nimport { SortAmountDownIcon } from 'primeng/icons/sortamountdown';\nimport { SortAmountUpAltIcon } from 'primeng/icons/sortamountupalt';\nimport { SpinnerIcon } from 'primeng/icons/spinner';\nimport { TrashIcon } from 'primeng/icons/trash';\nimport * as i12 from 'primeng/inputnumber';\nimport { InputNumberModule } from 'primeng/inputnumber';\nimport * as i10 from 'primeng/inputtext';\nimport { InputTextModule } from 'primeng/inputtext';\nimport * as i2 from 'primeng/paginator';\nimport { PaginatorModule } from 'primeng/paginator';\nimport * as i6 from 'primeng/radiobutton';\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport * as i4 from 'primeng/scroller';\nimport { ScrollerModule } from 'primeng/scroller';\nimport * as i8 from 'primeng/select';\nimport { SelectModule } from 'primeng/select';\nimport { SelectButtonModule } from 'primeng/selectbutton';\nimport { UniqueComponentId, ObjectUtils, ZIndexUtils } from 'primeng/utils';\nimport { Subject } from 'rxjs';\nimport { BaseStyle } from 'primeng/base';\nconst theme = ({\n  dt\n}) => `\n.p-datatable {\n    position: relative;\n}\n\n.p-datatable-table {\n    border-spacing: 0;\n    border-collapse: separate;\n    width: 100%;\n}\n\n.p-datatable-scrollable > .p-datatable-table-container {\n    position: relative;\n}\n/* For PrimeNG */\n.p-datatable-scrollable-table > .p-datatable-thead {\n    top: 0;\n    z-index: 2;\n}\n/* For PrimeNG */\n.p-datatable-scrollable-table > .p-datatable-frozen-tbody {\n    position: sticky;\n    z-index: 2;\n}\n/* For PrimeNG */\n.p-datatable-scrollable-table > .p-datatable-frozen-tbody:last-child {\n    z-index: 1;\n}\n\n.p-datatable-scrollable-table > .p-datatable-tfoot {\n    bottom: 0;\n    z-index: 1;\n}\n\n.p-datatable-scrollable .p-datatable-frozen-column {\n    position: sticky;\n    background: ${dt('datatable.header.cell.background')};\n}\n\n.p-datatable-scrollable th.p-datatable-frozen-column {\n    z-index: 1;\n}\n\n.p-datatable-scrollable > .p-datatable-table-container > .p-datatable-table > .p-datatable-thead,\n.p-datatable-scrollable > .p-datatable-table-container > .p-virtualscroller > .p-datatable-table > .p-datatable-thead {\n    background: ${dt('datatable.header.cell.background')};\n}\n\n.p-datatable-scrollable > .p-datatable-table-container > .p-datatable-table > .p-datatable-tfoot,\n.p-datatable-scrollable > .p-datatable-table-container > .p-virtualscroller > .p-datatable-table > .p-datatable-tfoot {\n    background: ${dt('datatable.footer.cell.background')};\n}\n\n.p-datatable-flex-scrollable {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n}\n\n.p-datatable-flex-scrollable > .p-datatable-table-container {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    height: 100%;\n}\n\n.p-datatable-scrollable-table > .p-datatable-tbody > .p-datatable-row-group-header {\n    position: sticky;\n    z-index: 1;\n}\n\n.p-datatable-resizable-table > .p-datatable-thead > tr > th,\n.p-datatable-resizable-table > .p-datatable-tfoot > tr > td,\n.p-datatable-resizable-table > .p-datatable-tbody > tr > td {\n    overflow: hidden;\n    white-space: nowrap;\n}\n\n.p-datatable-resizable-table > .p-datatable-thead > tr > th.p-datatable-resizable-column:not(.p-datatable-frozen-column) {\n    background-clip: padding-box;\n    position: relative;\n}\n\n.p-datatable-resizable-table-fit > .p-datatable-thead > tr > th.p-datatable-resizable-column:last-child .p-datatable-column-resizer {\n    display: none;\n}\n\n.p-datatable-column-resizer {\n    display: block;\n    position: absolute;\n    top: 0;\n    inset-inline-end: 0;\n    margin: 0;\n    width: ${dt('datatable.column.resizer.width')};\n    height: 100%;\n    padding: 0px;\n    cursor: col-resize;\n    border: 1px solid transparent;\n}\n\n/*\n.p-datatable-column-header-content {\n    display: flex;\n    align-items: center;\n    gap: ${dt('datatable.header.cell.gap')};\n}\n.p-datatable-thead > tr > th {\n    display: flex;\n    align-items: center;\n    gap: ${dt('datatable.header.cell.gap')};\n}\n*/\n\n.p-datatable-column-resize-indicator {\n    width: ${dt('datatable.resize.indicator.width')};\n    position: absolute;\n    z-index: 10;\n    display: none;\n    background: ${dt('datatable.resize.indicator.color')};\n}\n\n.p-datatable-row-reorder-indicator-up,\n.p-datatable-row-reorder-indicator-down {\n    position: absolute;\n    display: none;\n}\n\n.p-datatable-reorderable-column,\n.p-datatable-reorderable-row-handle {\n    cursor: move;\n}\n\n.p-datatable-mask {\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 3;\n}\n\n.p-datatable-inline-filter {\n    display: flex;\n    align-items: center;\n    width: 100%;\n    gap: ${dt('datatable.filter.inline.gap')};\n}\n\n.p-datatable-inline-filter .p-datatable-filter-element-container {\n    flex: 1 1 auto;\n    width: 1%;\n}\n\n.p-datatable-filter-overlay {\n    position: absolute;\n    background: ${dt('datatable.filter.overlay.select.background')};\n    color: ${dt('datatable.filter.overlay.select.color')};\n    border: 1px solid ${dt('datatable.filter.overlay.select.border.color')};\n    border-radius: ${dt('datatable.filter.overlay.select.border.radius')};\n    box-shadow: ${dt('datatable.filter.overlay.select.shadow')};\n    min-width: 12.5rem;\n}\n\n.p-datatable-filter-constraint-list {\n    margin: 0;\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    padding: ${dt('datatable.filter.constraint.list.padding')};\n    gap: ${dt('datatable.filter.constraint.list.gap')};\n}\n\n.p-datatable-filter-constraint {\n    padding: ${dt('datatable.filter.constraint.padding')};\n    color: ${dt('datatable.filter.constraint.color')};\n    border-radius: ${dt('datatable.filter.constraint.border.radius')};\n    cursor: pointer;\n    transition: background ${dt('datatable.transition.duration')}, color ${dt('datatable.transition.duration')}, border-color ${dt('datatable.transition.duration')},\n        box-shadow ${dt('datatable.transition.duration')};\n}\n\n.p-datatable-filter-constraint-selected {\n    background: ${dt('datatable.filter.constraint.selected.background')};\n    color: ${dt('datatable.filter.constraint.selected.color')};\n}\n\n.p-datatable-filter-constraint:not(.p-datatable-filter-constraint-selected):not(.p-disabled):hover {\n    background: ${dt('datatable.filter.constraint.focus.background')};\n    color: ${dt('datatable.filter.constraint.focus.color')};\n}\n\n.p-datatable-filter-constraint:focus-visible {\n    outline: 0 none;\n    background: ${dt('datatable.filter.constraint.focus.background')};\n    color: ${dt('datatable.filter.constraint.focus.color')};\n}\n\n.p-datatable-filter-constraint-selected:focus-visible {\n    outline: 0 none;\n    background: ${dt('datatable.filter.constraint.selected.focus.background')};\n    color: ${dt('datatable.filter.constraint.selected.focus.color')};\n}\n\n.p-datatable-filter-constraint-separator {\n    border-top: 1px solid ${dt('datatable.filter.constraint.separator.border.color')};\n}\n\n.p-datatable-popover-filter {\n    display: inline-flex;\n    margin-inline-start: auto;\n}\n\n.p-datatable-filter-overlay-popover {\n    background: ${dt('datatable.filter.overlay.popover.background')};\n    color: ${dt('datatable.filter.overlay.popover.color')};\n    border: 1px solid ${dt('datatable.filter.overlay.popover.border.color')};\n    border-radius: ${dt('datatable.filter.overlay.popover.border.radius')};\n    box-shadow: ${dt('datatable.filter.overlay.popover.shadow')};\n    min-width: 12.5rem;\n    padding: ${dt('datatable.filter.overlay.popover.padding')};\n    display: flex;\n    flex-direction: column;\n    gap: ${dt('datatable.filter.overlay.popover.gap')};\n}\n\n.p-datatable-filter-operator-dropdown, .p-datatable-filter-constraint-dropdown {\n    width: 100%;\n}\n\n.p-datatable-filter-rule-list,\n.p-datatable-filter-rule {\n    display: flex;\n    flex-direction: column;\n    gap: ${dt('datatable.filter.overlay.popover.gap')};\n}\n\n.p-datatable-filter-rule {\n    border-bottom: 1px solid ${dt('datatable.filter.rule.border.color')};\n}\n\n.p-datatable-filter-rule:last-child {\n    border-bottom: 0 none;\n}\n\n.p-datatable-filter-add-rule-button, .p-datatable-filter-remove-rule-button {\n    width: 100%;\n}\n\n.p-datatable-filter-remove-button {\n    width: 100%;\n}\n\n.p-datatable-filter-buttonbar {\n    padding: 0;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.p-datatable-virtualscroller-spacer {\n    display: flex;\n}\n\n.p-datatable .p-virtualscroller .p-virtualscroller-loading {\n    transform: none !important;\n    min-height: 0;\n    position: sticky;\n    top: 0;\n    inset-inline-start: 0;\n}\n\n.p-datatable-paginator-top {\n    border-color: ${dt('datatable.paginator.top.border.color')};\n    border-style: solid;\n    border-width: ${dt('datatable.paginator.top.border.width')};\n}\n\n.p-datatable-paginator-bottom {\n    border-color: ${dt('datatable.paginator.bottom.border.color')};\n    border-style: solid;\n    border-width: ${dt('datatable.paginator.bottom.border.width')};\n}\n\n.p-datatable-header {\n    background: ${dt('datatable.header.background')};\n    color: ${dt('datatable.header.color')};\n    border-color: ${dt('datatable.header.border.color')};\n    border-style: solid;\n    border-width: ${dt('datatable.header.border.width')};\n    padding: ${dt('datatable.header.padding')};\n}\n\n.p-datatable-footer {\n    background: ${dt('datatable.footer.background')};\n    color: ${dt('datatable.footer.color')};\n    border-color: ${dt('datatable.footer.border.color')};\n    border-style: solid;\n    border-width: ${dt('datatable.footer.border.width')};\n    padding: ${dt('datatable.footer.padding')};\n}\n\n.p-datatable-thead > tr > th {\n    padding: ${dt('datatable.header.cell.padding')};\n    background: ${dt('datatable.header.cell.background')};\n    border-color: ${dt('datatable.header.cell.border.color')};\n    border-style: solid;\n    border-width: 0 0 1px 0;\n    color: ${dt('datatable.header.cell.color')};\n    font-weight: ${dt('datatable.column.title.font.weight')};\n    text-align: start;\n    transition: background ${dt('datatable.transition.duration')}, color ${dt('datatable.transition.duration')}, border-color ${dt('datatable.transition.duration')},\n            outline-color ${dt('datatable.transition.duration')}, box-shadow ${dt('datatable.transition.duration')};\n}\n\n/** For PrimeNG **/\n.p-datatable-thead > tr > th p-columnfilter {\n    font-weight: normal;\n}\n/** For PrimeNG End **/\n\n/*\n.p-datatable-column-title {\n    font-weight: ${dt('datatable.column.title.font.weight')};\n}\n*/\n\n.p-datatable-tbody > tr {\n    outline-color: transparent;\n    background: ${dt('datatable.row.background')};\n    color: ${dt('datatable.row.color')};\n    transition: background ${dt('datatable.transition.duration')}, color ${dt('datatable.transition.duration')}, border-color ${dt('datatable.transition.duration')},\n            outline-color ${dt('datatable.transition.duration')}, box-shadow ${dt('datatable.transition.duration')};\n}\n\n.p-datatable-tbody > tr > td {\n    text-align: start;\n    border-color: ${dt('datatable.body.cell.border.color')};\n    border-style: solid;\n    border-width: 0 0 1px 0;\n    padding: ${dt('datatable.body.cell.padding')};\n}\n\n.p-datatable-hoverable .p-datatable-tbody > tr:not(.p-datatable-row-selected):hover {\n    background: ${dt('datatable.row.hover.background')};\n    color: ${dt('datatable.row.hover.color')};\n}\n\n.p-datatable-tbody > tr.p-datatable-row-selected {\n    background: ${dt('datatable.row.selected.background')};\n    color: ${dt('datatable.row.selected.color')};\n}\n\n.p-datatable-tbody > tr:has(+ .p-datatable-row-selected) > td {\n    border-bottom-color: ${dt('datatable.body.cell.selected.border.color')};\n}\n\n.p-datatable-tbody > tr.p-datatable-row-selected > td {\n    border-bottom-color: ${dt('datatable.body.cell.selected.border.color')};\n}\n\n.p-datatable-tbody > tr:focus-visible,\n.p-datatable-tbody > tr.p-datatable-contextmenu-row-selected {\n    box-shadow: ${dt('datatable.row.focus.ring.shadow')};\n    outline: ${dt('datatable.row.focus.ring.width')} ${dt('datatable.row.focus.ring.style')} ${dt('datatable.row.focus.ring.color')};\n    outline-offset: ${dt('datatable.row.focus.ring.offset')};\n}\n\n.p-datatable-tfoot > tr > td {\n    text-align: start;\n    padding: ${dt('datatable.footer.cell.padding')};\n    border-color: ${dt('datatable.footer.cell.border.color')};\n    border-style: solid;\n    border-width: 0 0 1px 0;\n    color: ${dt('datatable.footer.cell.color')};\n    background: ${dt('datatable.footer.cell.background')};\n}\n\n.p-datatable-column-footer {\n    font-weight: ${dt('datatable.column.footer.font.weight')};\n}\n\n.p-datatable-sortable-column {\n    cursor: pointer;\n    user-select: none;\n    outline-color: transparent;\n}\n\n.p-datatable-thead > tr > th,\n.p-datatable-sort-icon,\n.p-datatable-sort-badge {\n    vertical-align: middle;\n}\n\n.p-datatable-sort-icon {\n    color: ${dt('datatable.sort.icon.color')};\n    transition: color ${dt('datatable.transition.duration')};\n}\n\n.p-datatable-sortable-column:not(.p-datatable-column-sorted):hover {\n    background: ${dt('datatable.header.cell.hover.background')};\n    color: ${dt('datatable.header.cell.hover.color')};\n}\n\n.p-datatable-sortable-column:not(.p-datatable-column-sorted):hover .p-datatable-sort-icon {\n    color: ${dt('datatable.sort.icon.hover.color')};\n}\n\n.p-datatable-thead > tr > th.p-datatable-column-sorted {\n    background: ${dt('datatable.header.cell.selected.background')};\n    color: ${dt('datatable.header.cell.selected.color')};\n}\n\n.p-datatable-thead > tr > th.p-datatable-column-sorted .p-datatable-sort-icon {\n    color: ${dt('datatable.header.cell.selected.color')};\n}\n\n.p-datatable-sortable-column:focus-visible {\n    box-shadow: ${dt('datatable.header.cell.focus.ring.shadow')};\n    outline: ${dt('datatable.header.cell.focus.ring.width')} ${dt('datatable.header.cell.focus.ring.style')} ${dt('datatable.header.cell.focus.ring.color')};\n    outline-offset: ${dt('datatable.header.cell.focus.ring.offset')};\n}\n\n.p-datatable-hoverable .p-datatable-selectable-row {\n    cursor: pointer;\n}\n\n.p-datatable-tbody > tr.p-datatable-dragpoint-top > td {\n    box-shadow: inset 0 2px 0 0 ${dt('datatable.drop.point.color')};\n}\n\n.p-datatable-tbody > tr.p-datatable-dragpoint-bottom > td {\n    box-shadow: inset 0 -2px 0 0 ${dt('datatable.drop.point.color')};\n}\n\n.p-datatable-loading-icon {\n    font-size: ${dt('datatable.loading.icon.size')};\n    width: ${dt('datatable.loading.icon.size')};\n    height: ${dt('datatable.loading.icon.size')};\n}\n\n.p-datatable-gridlines .p-datatable-header {\n    border-width: 1px 1px 0 1px;\n}\n\n.p-datatable-gridlines .p-datatable-footer {\n    border-width: 0 1px 1px 1px;\n}\n\n.p-datatable-gridlines .p-datatable-paginator-top {\n    border-width: 1px 1px 0 1px;\n}\n\n.p-datatable-gridlines .p-datatable-paginator-bottom {\n    border-width: 0 1px 1px 1px;\n}\n\n.p-datatable-gridlines .p-datatable-thead > tr > th {\n    border-width: 1px 0 1px 1px;\n}\n\n.p-datatable-gridlines .p-datatable-thead > tr > th:last-child {\n    border-width: 1px;\n}\n\n.p-datatable-gridlines .p-datatable-tbody > tr > td {\n    border-width: 1px 0 0 1px;\n}\n\n.p-datatable-gridlines .p-datatable-tbody > tr > td:last-child {\n    border-width: 1px 1px 0 1px;\n}\n\np-datatable-gridlines .p-datatable-tbody > tr:last-child > td {\n    border-width: 1px 0 1px 1px;\n}\n\n.p-datatable-gridlines .p-datatable-tbody > tr:last-child > td:last-child {\n    border-width: 1px;\n}\n\n.p-datatable-gridlines .p-datatable-tfoot > tr > td {\n    border-width: 1px 0 1px 1px;\n}\n\n.p-datatable-gridlines .p-datatable-tfoot > tr > td:last-child {\n    border-width: 1px 1px 1px 1px;\n}\n\n.p-datatable.p-datatable-gridlines .p-datatable-thead + .p-datatable-tfoot > tr > td {\n    border-width: 0 0 1px 1px;\n}\n\n.p-datatable.p-datatable-gridlines .p-datatable-thead + .p-datatable-tfoot > tr > td:last-child {\n    border-width: 0 1px 1px 1px;\n}\n\n.p-datatable.p-datatable-gridlines:has(.p-datatable-thead):has(.p-datatable-tbody) .p-datatable-tbody > tr > td {\n    border-width: 0 0 1px 1px;\n}\n\n.p-datatable.p-datatable-gridlines:has(.p-datatable-thead):has(.p-datatable-tbody) .p-datatable-tbody > tr > td:last-child {\n    border-width: 0 1px 1px 1px;\n}\n\n.p-datatable.p-datatable-gridlines:has(.p-datatable-tbody):has(.p-datatable-tfoot) .p-datatable-tbody > tr:last-child > td {\n    border-width: 0 0 0 1px;\n}\n\n.p-datatable.p-datatable-gridlines:has(.p-datatable-tbody):has(.p-datatable-tfoot) .p-datatable-tbody > tr:last-child > td:last-child {\n    border-width: 0 1px 0 1px;\n}\n\n.p-datatable.p-datatable-striped .p-datatable-tbody > tr:nth-child(odd) {\n    background: ${dt('datatable.row.striped.background')};\n}\n\n.p-datatable.p-datatable-striped .p-datatable-tbody > tr:nth-child(odd).p-datatable-row-selected {\n    background: ${dt('datatable.row.selected.background')};\n    color: ${dt('datatable.row.selected.color')};\n}\n\n.p-datatable.p-datatable-sm .p-datatable-header {\n    padding: 0.375rem 0.5rem;\n}\n\n.p-datatable.p-datatable-sm .p-datatable-thead > tr > th {\n    padding: 0.375rem 0.5rem;\n}\n\n.p-datatable.p-datatable-sm .p-datatable-tbody > tr > td {\n    padding: 0.375rem 0.5rem;\n}\n\n.p-datatable.p-datatable-sm .p-datatable-tfoot > tr > td {\n    padding: 0.375rem 0.5rem;\n}\n\n.p-datatable.p-datatable-sm .p-datatable-footer {\n    padding: 0.375rem 0.5rem;\n}\n\n.p-datatable.p-datatable-lg .p-datatable-header {\n    padding: 0.9375rem 1.25rem;\n}\n\n.p-datatable.p-datatable-lg .p-datatable-thead > tr > th {\n    padding: 0.9375rem 1.25rem;\n}\n\n.p-datatable.p-datatable-lg .p-datatable-tbody>tr>td {\n    padding: 0.9375rem 1.25rem;\n}\n\n.p-datatable.p-datatable-lg .p-datatable-tfoot>tr>td {\n    padding: 0.9375rem 1.25rem;\n}\n\n.p-datatable.p-datatable-lg .p-datatable-footer {\n    padding: 0.9375rem 1.25rem;\n}\n\n.p-datatable-row-toggle-button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    width: ${dt('datatable.row.toggle.button.size')};\n    height: ${dt('datatable.row.toggle.button.size')};\n    color: ${dt('datatable.row.toggle.button.color')};\n    border: 0 none;\n    background: transparent;\n    cursor: pointer;\n    border-radius: ${dt('datatable.row.toggle.button.border.radius')};\n    transition: background ${dt('datatable.transition.duration')}, color ${dt('datatable.transition.duration')}, border-color ${dt('datatable.transition.duration')},\n            outline-color ${dt('datatable.transition.duration')}, box-shadow ${dt('datatable.transition.duration')};\n    outline-color: transparent;\n    user-select: none;\n}\n\n.p-datatable-row-toggle-button:enabled:hover {\n    color: ${dt('datatable.row.toggle.button.hover.color')};\n    background: ${dt('datatable.row.toggle.button.hover.background')};\n}\n\n.p-datatable-tbody > tr.p-datatable-row-selected .p-datatable-row-toggle-button:hover {\n    background: ${dt('datatable.row.toggle.button.selected.hover.background')};\n    ${dt('datatable.row.toggle.button.selected.hover.color')};\n}\n\n.p-datatable-row-toggle-button:focus-visible {\n    box-shadow: ${dt('datatable.row.toggle.button.focus.ring.shadow')};\n    outline: ${dt('datatable.row.toggle.button.focus.ring.width')} ${dt('datatable.row.toggle.button.focus.ring.style')} ${dt('datatable.row.toggle.button.focus.ring.color')};\n    outline-offset: ${dt('datatable.row.toggle.button.focus.ring.offset')};\n}\n`;\nconst classes = {\n  root: ({\n    instance\n  }) => ({\n    'p-datatable p-component': true,\n    'p-datatable-hoverable': instance.rowHover || instance.selectionMode,\n    'p-datatable-resizable': instance.resizableColumns,\n    'p-datatable-resizable-fit': instance.resizableColumns && instance.columnResizeMode === 'fit',\n    'p-datatable-scrollable': instance.scrollable,\n    'p-datatable-flex-scrollable': instance.scrollable && instance.scrollHeight === 'flex',\n    'p-datatable-striped': instance.stripedRows,\n    'p-datatable-gridlines': instance.showGridlines,\n    'p-datatable-sm': instance.size === 'small',\n    'p-datatable-lg': instance.size === 'large'\n  }),\n  mask: 'p-datatable-mask p-overlay-mask',\n  loadingIcon: 'p-datatable-loading-icon',\n  header: 'p-datatable-header',\n  pcPaginator: ({\n    instance\n  }) => 'p-datatable-paginator-' + instance.paginatorPosition,\n  tableContainer: 'p-datatable-table-container',\n  table: ({\n    instance\n  }) => ({\n    'p-datatable-table': true,\n    'p-datatable-scrollable-table': instance.scrollable,\n    'p-datatable-resizable-table': instance.resizableColumns,\n    'p-datatable-resizable-table-fit': instance.resizableColumns && instance.columnResizeMode === 'fit'\n  }),\n  thead: 'p-datatable-thead',\n  columnResizer: 'p-datatable-column-resizer',\n  columnHeaderContent: 'p-datatable-column-header-content',\n  columnTitle: 'p-datatable-column-title',\n  columnFooter: 'p-datatable-column-footer',\n  sortIcon: 'p-datatable-sort-icon',\n  pcSortBadge: 'p-datatable-sort-badge',\n  filter: ({\n    instance\n  }) => ({\n    'p-datatable-filter': true,\n    'p-datatable-inline-filter': instance.display === 'row',\n    'p-datatable-popover-filter': instance.display === 'menu'\n  }),\n  filterElementContainer: 'p-datatable-filter-element-container',\n  pcColumnFilterButton: 'p-datatable-column-filter-button',\n  pcColumnFilterClearButton: 'p-datatable-column-filter-clear-button',\n  filterOverlay: ({\n    instance\n  }) => ({\n    'p-datatable-filter-overlay p-component': true,\n    'p-datatable-filter-overlay-popover': instance.display === 'menu'\n  }),\n  filterConstraintList: 'p-datatable-filter-constraint-list',\n  filterConstraint: 'p-datatable-filter-constraint',\n  filterConstraintSeparator: 'p-datatable-filter-constraint-separator',\n  filterOperator: 'p-datatable-filter-operator',\n  pcFilterOperatorDropdown: 'p-datatable-filter-operator-dropdown',\n  filterRuleList: 'p-datatable-filter-rule-list',\n  filterRule: 'p-datatable-filter-rule',\n  pcFilterConstraintDropdown: 'p-datatable-filter-constraint-dropdown',\n  pcFilterRemoveRuleButton: 'p-datatable-filter-remove-rule-button',\n  pcFilterAddRuleButton: 'p-datatable-filter-add-rule-button',\n  filterButtonbar: 'p-datatable-filter-buttonbar',\n  pcFilterClearButton: 'p-datatable-filter-clear-button',\n  pcFilterApplyButton: 'p-datatable-filter-apply-button',\n  tbody: ({\n    instance\n  }) => ({\n    'p-datatable-tbody': true,\n    'p-datatable-frozen-tbody': instance.frozenValue || instance.frozenBodyTemplate,\n    'p-virtualscroller-content': instance.virtualScroll\n  }),\n  rowGroupHeader: 'p-datatable-row-group-header',\n  rowToggleButton: 'p-datatable-row-toggle-button',\n  rowToggleIcon: 'p-datatable-row-toggle-icon',\n  rowExpansion: 'p-datatable-row-expansion',\n  rowGroupFooter: 'p-datatable-row-group-footer',\n  emptyMessage: 'p-datatable-empty-message',\n  bodyCell: ({\n    instance\n  }) => ({\n    'p-datatable-frozen-column': instance.columnProp('frozen')\n  }),\n  reorderableRowHandle: 'p-datatable-reorderable-row-handle',\n  pcRowEditorInit: 'p-datatable-row-editor-init',\n  pcRowEditorSave: 'p-datatable-row-editor-save',\n  pcRowEditorCancel: 'p-datatable-row-editor-cancel',\n  tfoot: 'p-datatable-tfoot',\n  footerCell: ({\n    instance\n  }) => ({\n    'p-datatable-frozen-column': instance.columnProp('frozen')\n  }),\n  virtualScrollerSpacer: 'p-datatable-virtualscroller-spacer',\n  footer: 'p-datatable-tfoot',\n  columnResizeIndicator: 'p-datatable-column-resize-indicator',\n  rowReorderIndicatorUp: 'p-datatable-row-reorder-indicator-up',\n  rowReorderIndicatorDown: 'p-datatable-row-reorder-indicator-down'\n};\nconst inlineStyles = {\n  tableContainer: ({\n    instance\n  }) => ({\n    'max-height': instance.virtualScroll ? '' : instance.scrollHeight,\n    overflow: 'auto'\n  }),\n  thead: {\n    position: 'sticky'\n  },\n  tfoot: {\n    position: 'sticky'\n  }\n};\nclass TableStyle extends BaseStyle {\n  name = 'datatable';\n  theme = theme;\n  classes = classes;\n  inlineStyles = inlineStyles;\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵTableStyle_BaseFactory;\n    return function TableStyle_Factory(__ngFactoryType__) {\n      return (ɵTableStyle_BaseFactory || (ɵTableStyle_BaseFactory = i0.ɵɵgetInheritedFactory(TableStyle)))(__ngFactoryType__ || TableStyle);\n    };\n  })();\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TableStyle,\n    factory: TableStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TableStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * DataTable displays data in tabular format.\n *\n * [Live Demo](https://www.primeng.org/table/)\n *\n * @module tablestyle\n *\n */\nvar TableClasses;\n(function (TableClasses) {\n  /**\n   * Class name of the root element\n   */\n  TableClasses[\"root\"] = \"p-datatable\";\n  /**\n   * Class name of the mask element\n   */\n  TableClasses[\"mask\"] = \"p-datatable-mask\";\n  /**\n   * Class name of the loading icon element\n   */\n  TableClasses[\"loadingIcon\"] = \"p-datatable-loading-icon\";\n  /**\n   * Class name of the header element\n   */\n  TableClasses[\"header\"] = \"p-datatable-header\";\n  /**\n   * Class name of the paginator element\n   */\n  TableClasses[\"pcPaginator\"] = \"p-datatable-paginator-[position]\";\n  /**\n   * Class name of the table container element\n   */\n  TableClasses[\"tableContainer\"] = \"p-datatable-table-container\";\n  /**\n   * Class name of the table element\n   */\n  TableClasses[\"table\"] = \"p-datatable-table\";\n  /**\n   * Class name of the thead element\n   */\n  TableClasses[\"thead\"] = \"p-datatable-thead\";\n  /**\n   * Class name of the column resizer element\n   */\n  TableClasses[\"columnResizer\"] = \"p-datatable-column-resizer\";\n  /**\n   * Class name of the column header content element\n   */\n  TableClasses[\"columnHeaderContent\"] = \"p-datatable-column-header-content\";\n  /**\n   * Class name of the column title element\n   */\n  TableClasses[\"columnTitle\"] = \"p-datatable-column-title\";\n  /**\n   * Class name of the sort icon element\n   */\n  TableClasses[\"sortIcon\"] = \"p-datatable-sort-icon\";\n  /**\n   * Class name of the sort badge element\n   */\n  TableClasses[\"pcSortBadge\"] = \"p-datatable-sort-badge\";\n  /**\n   * Class name of the filter element\n   */\n  TableClasses[\"filter\"] = \"p-datatable-filter\";\n  /**\n   * Class name of the filter element container element\n   */\n  TableClasses[\"filterElementContainer\"] = \"p-datatable-filter-element-container\";\n  /**\n   * Class name of the column filter button element\n   */\n  TableClasses[\"pcColumnFilterButton\"] = \"p-datatable-column-filter-button\";\n  /**\n   * Class name of the column filter clear button element\n   */\n  TableClasses[\"pcColumnFilterClearButton\"] = \"p-datatable-column-filter-clear-button\";\n  /**\n   * Class name of the filter overlay element\n   */\n  TableClasses[\"filterOverlay\"] = \"p-datatable-filter-overlay\";\n  /**\n   * Class name of the filter constraint list element\n   */\n  TableClasses[\"filterConstraintList\"] = \"p-datatable-filter-constraint-list\";\n  /**\n   * Class name of the filter constraint element\n   */\n  TableClasses[\"filterConstraint\"] = \"p-datatable-filter-constraint\";\n  /**\n   * Class name of the filter constraint separator element\n   */\n  TableClasses[\"filterConstraintSeparator\"] = \"p-datatable-filter-constraint-separator\";\n  /**\n   * Class name of the filter operator element\n   */\n  TableClasses[\"filterOperator\"] = \"p-datatable-filter-operator\";\n  /**\n   * Class name of the filter operator dropdown element\n   */\n  TableClasses[\"pcFilterOperatorDropdown\"] = \"p-datatable-filter-operator-dropdown\";\n  /**\n   * Class name of the filter rule list element\n   */\n  TableClasses[\"filterRuleList\"] = \"p-datatable-filter-rule-list\";\n  /**\n   * Class name of the filter rule element\n   */\n  TableClasses[\"filterRule\"] = \"p-datatable-filter-rule\";\n  /**\n   * Class name of the filter constraint dropdown element\n   */\n  TableClasses[\"pcFilterConstraintDropdown\"] = \"p-datatable-filter-constraint-dropdown\";\n  /**\n   * Class name of the filter remove rule button element\n   */\n  TableClasses[\"pcFilterRemoveRuleButton\"] = \"p-datatable-filter-remove-rule-button\";\n  /**\n   * Class name of the filter add rule button element\n   */\n  TableClasses[\"pcFilterAddRuleButton\"] = \"p-datatable-filter-add-rule-button\";\n  /**\n   * Class name of the filter buttonbar element\n   */\n  TableClasses[\"filterButtonbar\"] = \"p-datatable-filter-buttonbar\";\n  /**\n   * Class name of the filter clear button element\n   */\n  TableClasses[\"pcFilterClearButton\"] = \"p-datatable-filter-clear-button\";\n  /**\n   * Class name of the filter apply button element\n   */\n  TableClasses[\"pcFilterApplyButton\"] = \"p-datatable-filter-apply-button\";\n  /**\n   * Class name of the tbody element\n   */\n  TableClasses[\"tbody\"] = \"p-datatable-tbody\";\n  /**\n   * Class name of the row group header element\n   */\n  TableClasses[\"rowGroupHeader\"] = \"p-datatable-row-group-header\";\n  /**\n   * Class name of the row toggle button element\n   */\n  TableClasses[\"rowToggleButton\"] = \"p-datatable-row-toggle-button\";\n  /**\n   * Class name of the row toggle icon element\n   */\n  TableClasses[\"rowToggleIcon\"] = \"p-datatable-row-toggle-icon\";\n  /**\n   * Class name of the row expansion element\n   */\n  TableClasses[\"rowExpansion\"] = \"p-datatable-row-expansion\";\n  /**\n   * Class name of the row group footer element\n   */\n  TableClasses[\"rowGroupFooter\"] = \"p-datatable-row-group-footer\";\n  /**\n   * Class name of the empty message element\n   */\n  TableClasses[\"emptyMessage\"] = \"p-datatable-empty-message\";\n  /**\n   * Class name of the reorderable row handle element\n   */\n  TableClasses[\"reorderableRowHandle\"] = \"p-datatable-reorderable-row-handle\";\n  /**\n   * Class name of the row editor init element\n   */\n  TableClasses[\"pcRowEditorInit\"] = \"p-datatable-row-editor-init\";\n  /**\n   * Class name of the row editor save element\n   */\n  TableClasses[\"pcRowEditorSave\"] = \"p-datatable-row-editor-save\";\n  /**\n   * Class name of the row editor cancel element\n   */\n  TableClasses[\"pcRowEditorCancel\"] = \"p-datatable-row-editor-cancel\";\n  /**\n   * Class name of the tfoot element\n   */\n  TableClasses[\"tfoot\"] = \"p-datatable-tfoot\";\n  /**\n   * Class name of the virtual scroller spacer element\n   */\n  TableClasses[\"virtualScrollerSpacer\"] = \"p-datatable-virtualscroller-spacer\";\n  /**\n   * Class name of the footer element\n   */\n  TableClasses[\"footer\"] = \"p-datatable-footer\";\n  /**\n   * Class name of the column resize indicator element\n   */\n  TableClasses[\"columnResizeIndicator\"] = \"p-datatable-column-resize-indicator\";\n  /**\n   * Class name of the row reorder indicator up element\n   */\n  TableClasses[\"rowReorderIndicatorUp\"] = \"p-datatable-row-reorder-indicator-up\";\n  /**\n   * Class name of the row reorder indicator down element\n   */\n  TableClasses[\"rowReorderIndicatorDown\"] = \"p-datatable-row-reorder-indicator-down\";\n})(TableClasses || (TableClasses = {}));\nconst _c0 = [\"header\"];\nconst _c1 = [\"headergrouped\"];\nconst _c2 = [\"body\"];\nconst _c3 = [\"loadingbody\"];\nconst _c4 = [\"caption\"];\nconst _c5 = [\"footer\"];\nconst _c6 = [\"footergrouped\"];\nconst _c7 = [\"summary\"];\nconst _c8 = [\"colgroup\"];\nconst _c9 = [\"expandedrow\"];\nconst _c10 = [\"groupheader\"];\nconst _c11 = [\"groupfooter\"];\nconst _c12 = [\"frozenexpandedrow\"];\nconst _c13 = [\"frozenheader\"];\nconst _c14 = [\"frozenbody\"];\nconst _c15 = [\"frozenfooter\"];\nconst _c16 = [\"frozencolgroup\"];\nconst _c17 = [\"emptymessage\"];\nconst _c18 = [\"paginatorleft\"];\nconst _c19 = [\"paginatorright\"];\nconst _c20 = [\"paginatordropdownitem\"];\nconst _c21 = [\"loadingicon\"];\nconst _c22 = [\"reorderindicatorupicon\"];\nconst _c23 = [\"reorderindicatordownicon\"];\nconst _c24 = [\"sorticon\"];\nconst _c25 = [\"checkboxicon\"];\nconst _c26 = [\"headercheckboxicon\"];\nconst _c27 = [\"paginatordropdownicon\"];\nconst _c28 = [\"paginatorfirstpagelinkicon\"];\nconst _c29 = [\"paginatorlastpagelinkicon\"];\nconst _c30 = [\"paginatorpreviouspagelinkicon\"];\nconst _c31 = [\"paginatornextpagelinkicon\"];\nconst _c32 = [\"container\"];\nconst _c33 = [\"resizeHelper\"];\nconst _c34 = [\"reorderIndicatorUp\"];\nconst _c35 = [\"reorderIndicatorDown\"];\nconst _c36 = [\"wrapper\"];\nconst _c37 = [\"table\"];\nconst _c38 = [\"thead\"];\nconst _c39 = [\"tfoot\"];\nconst _c40 = [\"scroller\"];\nconst _c41 = a0 => ({\n  height: a0\n});\nconst _c42 = (a0, a1) => ({\n  $implicit: a0,\n  options: a1\n});\nconst _c43 = a0 => ({\n  columns: a0\n});\nconst _c44 = a0 => ({\n  $implicit: a0\n});\nfunction Table_div_2_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\");\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(\"p-datatable-loading-icon \" + ctx_r0.loadingIcon);\n  }\n}\nfunction Table_div_2_ng_container_2_SpinnerIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SpinnerIcon\", 22);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"spin\", true)(\"styleClass\", ctx_r0.cx(\"loadingIcon\"));\n  }\n}\nfunction Table_div_2_ng_container_2_span_2_1_ng_template_0_Template(rf, ctx) {}\nfunction Table_div_2_ng_container_2_span_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_div_2_ng_container_2_span_2_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Table_div_2_ng_container_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 19);\n    i0.ɵɵtemplate(1, Table_div_2_ng_container_2_span_2_1_Template, 1, 0, null, 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"loadingIcon\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.loadingIconTemplate || ctx_r0._loadingIconTemplate);\n  }\n}\nfunction Table_div_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Table_div_2_ng_container_2_SpinnerIcon_1_Template, 1, 2, \"SpinnerIcon\", 21)(2, Table_div_2_ng_container_2_span_2_Template, 2, 2, \"span\", 12);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIconTemplate && !ctx_r0._loadingIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loadingIconTemplate || ctx_r0._loadingIconTemplate);\n  }\n}\nfunction Table_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, Table_div_2_i_1_Template, 1, 2, \"i\", 20)(2, Table_div_2_ng_container_2_Template, 3, 2, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"mask\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.loadingIcon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.loadingIcon);\n  }\n}\nfunction Table_div_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, Table_div_3_ng_container_1_Template, 1, 0, \"ng-container\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"header\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.captionTemplate || ctx_r0._captionTemplate);\n  }\n}\nfunction Table_p_paginator_4_1_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_4_1_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_1_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorDropdownIconTemplate || ctx_r0._paginatorDropdownIconTemplate);\n  }\n}\nfunction Table_p_paginator_4_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_1_ng_template_0_Template, 1, 1, \"ng-template\", 25);\n  }\n}\nfunction Table_p_paginator_4_2_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_4_2_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_2_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorFirstPageLinkIconTemplate || ctx_r0._paginatorFirstPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_4_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_2_ng_template_0_Template, 1, 1, \"ng-template\", 26);\n  }\n}\nfunction Table_p_paginator_4_3_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_4_3_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_3_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorPreviousPageLinkIconTemplate || ctx_r0._paginatorPreviousPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_4_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_3_ng_template_0_Template, 1, 1, \"ng-template\", 27);\n  }\n}\nfunction Table_p_paginator_4_4_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_4_4_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_4_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorLastPageLinkIconTemplate || ctx_r0._paginatorLastPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_4_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_4_ng_template_0_Template, 1, 1, \"ng-template\", 28);\n  }\n}\nfunction Table_p_paginator_4_5_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_4_5_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_5_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorNextPageLinkIconTemplate || ctx_r0._paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_4_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_4_5_ng_template_0_Template, 1, 1, \"ng-template\", 29);\n  }\n}\nfunction Table_p_paginator_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 24);\n    i0.ɵɵlistener(\"onPageChange\", function Table_p_paginator_4_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onPageChange($event));\n    });\n    i0.ɵɵtemplate(1, Table_p_paginator_4_1_Template, 1, 0, null, 16)(2, Table_p_paginator_4_2_Template, 1, 0, null, 16)(3, Table_p_paginator_4_3_Template, 1, 0, null, 16)(4, Table_p_paginator_4_4_Template, 1, 0, null, 16)(5, Table_p_paginator_4_5_Template, 1, 0, null, 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r0.rows)(\"first\", ctx_r0.first)(\"totalRecords\", ctx_r0.totalRecords)(\"pageLinkSize\", ctx_r0.pageLinks)(\"alwaysShow\", ctx_r0.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r0.rowsPerPageOptions)(\"templateLeft\", ctx_r0.paginatorLeftTemplate)(\"templateRight\", ctx_r0.paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r0.paginatorDropdownAppendTo)(\"dropdownScrollHeight\", ctx_r0.paginatorDropdownScrollHeight)(\"currentPageReportTemplate\", ctx_r0.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r0.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r0.paginatorDropdownItemTemplate || ctx_r0._paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r0.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r0.showJumpToPageDropdown)(\"showJumpToPageInput\", ctx_r0.showJumpToPageInput)(\"showPageLinks\", ctx_r0.showPageLinks)(\"styleClass\", ctx_r0.cx(\"pcPaginator\") + \" \" + ctx_r0.paginatorStyleClass && ctx_r0.paginatorStyleClass)(\"locale\", ctx_r0.paginatorLocale);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorDropdownIconTemplate || ctx_r0._paginatorDropdownIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorFirstPageLinkIconTemplate || ctx_r0._paginatorFirstPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorPreviousPageLinkIconTemplate || ctx_r0._paginatorPreviousPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorLastPageLinkIconTemplate || ctx_r0._paginatorLastPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorNextPageLinkIconTemplate || ctx_r0._paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction Table_p_scroller_7_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_scroller_7_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_scroller_7_ng_template_2_ng_container_0_Template, 1, 0, \"ng-container\", 31);\n  }\n  if (rf & 2) {\n    const items_r4 = ctx.$implicit;\n    const scrollerOptions_r5 = ctx.options;\n    i0.ɵɵnextContext(2);\n    const buildInTable_r6 = i0.ɵɵreference(10);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", buildInTable_r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c42, items_r4, scrollerOptions_r5));\n  }\n}\nfunction Table_p_scroller_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-scroller\", 30, 3);\n    i0.ɵɵlistener(\"onLazyLoad\", function Table_p_scroller_7_Template_p_scroller_onLazyLoad_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onLazyItemLoad($event));\n    });\n    i0.ɵɵtemplate(2, Table_p_scroller_7_ng_template_2_Template, 1, 5, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction1(15, _c41, ctx_r0.scrollHeight !== \"flex\" ? ctx_r0.scrollHeight : undefined));\n    i0.ɵɵproperty(\"items\", ctx_r0.processedData)(\"columns\", ctx_r0.columns)(\"scrollHeight\", ctx_r0.scrollHeight !== \"flex\" ? undefined : \"100%\")(\"itemSize\", ctx_r0.virtualScrollItemSize || ctx_r0._virtualRowHeight)(\"step\", ctx_r0.rows)(\"delay\", ctx_r0.lazy ? ctx_r0.virtualScrollDelay : 0)(\"inline\", true)(\"lazy\", ctx_r0.lazy)(\"loaderDisabled\", true)(\"showSpacer\", false)(\"showLoader\", ctx_r0.loadingBodyTemplate || ctx_r0._loadingBodyTemplate)(\"options\", ctx_r0.virtualScrollOptions)(\"autoSize\", true);\n  }\n}\nfunction Table_ng_container_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Table_ng_container_8_ng_container_1_Template, 1, 0, \"ng-container\", 31);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const buildInTable_r6 = i0.ɵɵreference(10);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", buildInTable_r6)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(4, _c42, ctx_r0.processedData, i0.ɵɵpureFunction1(2, _c43, ctx_r0.columns)));\n  }\n}\nfunction Table_ng_template_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_ng_template_9_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_ng_template_9_tbody_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tbody\", 38);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r7 = i0.ɵɵnextContext().options;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"tbody\"))(\"value\", ctx_r0.frozenValue)(\"frozenRows\", true)(\"pTableBody\", scrollerOptions_r7.columns)(\"pTableBodyTemplate\", ctx_r0.frozenBodyTemplate || ctx_r0._frozenBodyTemplate)(\"frozen\", true);\n  }\n}\nfunction Table_ng_template_9_tbody_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"tbody\", 39);\n  }\n  if (rf & 2) {\n    const scrollerOptions_r7 = i0.ɵɵnextContext().options;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(\"height: calc(\" + scrollerOptions_r7.spacerStyle.height + \" - \" + scrollerOptions_r7.rows.length * scrollerOptions_r7.itemSize + \"px);\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"virtualScrollerSpacer\"));\n  }\n}\nfunction Table_ng_template_9_tfoot_9_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_ng_template_9_tfoot_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tfoot\", 39, 7);\n    i0.ɵɵtemplate(2, Table_ng_template_9_tfoot_9_ng_container_2_Template, 1, 0, \"ng-container\", 31);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const scrollerOptions_r7 = i0.ɵɵnextContext().options;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"footer\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.footerGroupedTemplate || ctx_r0.footerTemplate || ctx_r0._footerTemplate || ctx_r0._footerGroupedTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c44, scrollerOptions_r7.columns));\n  }\n}\nfunction Table_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 32, 5);\n    i0.ɵɵtemplate(2, Table_ng_template_9_ng_container_2_Template, 1, 0, \"ng-container\", 31);\n    i0.ɵɵelementStart(3, \"thead\", 33, 6);\n    i0.ɵɵtemplate(5, Table_ng_template_9_ng_container_5_Template, 1, 0, \"ng-container\", 31);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, Table_ng_template_9_tbody_6_Template, 1, 6, \"tbody\", 34);\n    i0.ɵɵelement(7, \"tbody\", 35);\n    i0.ɵɵtemplate(8, Table_ng_template_9_tbody_8_Template, 1, 3, \"tbody\", 36)(9, Table_ng_template_9_tfoot_9_Template, 3, 5, \"tfoot\", 37);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const scrollerOptions_r7 = ctx.options;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r0.tableStyle);\n    i0.ɵɵclassMap(ctx_r0.tableStyleClass);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"table\"));\n    i0.ɵɵattribute(\"id\", ctx_r0.id + \"-table\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.colGroupTemplate || ctx_r0._colGroupTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(22, _c44, scrollerOptions_r7.columns));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"thead\"))(\"ngStyle\", ctx_r0.sx(\"thead\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.headerGroupedTemplate || ctx_r0.headerTemplate || ctx_r0._headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(24, _c44, scrollerOptions_r7.columns));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.frozenValue || ctx_r0.frozenBodyTemplate || ctx_r0._frozenBodyTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleMap(scrollerOptions_r7.contentStyle);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"tbody\", scrollerOptions_r7.contentStyleClass))(\"value\", ctx_r0.dataToRender(scrollerOptions_r7.rows))(\"pTableBody\", scrollerOptions_r7.columns)(\"pTableBodyTemplate\", ctx_r0.bodyTemplate || ctx_r0._bodyTemplate)(\"scrollerOptions\", scrollerOptions_r7);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", scrollerOptions_r7.spacerStyle);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.footerGroupedTemplate || ctx_r0.footerTemplate || ctx_r0._footerTemplate || ctx_r0._footerGroupedTemplate);\n  }\n}\nfunction Table_p_paginator_11_1_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_11_1_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_1_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorDropdownIconTemplate || ctx_r0._paginatorDropdownIconTemplate);\n  }\n}\nfunction Table_p_paginator_11_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_1_ng_template_0_Template, 1, 1, \"ng-template\", 25);\n  }\n}\nfunction Table_p_paginator_11_2_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_11_2_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_2_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorFirstPageLinkIconTemplate || ctx_r0._paginatorFirstPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_11_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_2_ng_template_0_Template, 1, 1, \"ng-template\", 26);\n  }\n}\nfunction Table_p_paginator_11_3_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_11_3_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_3_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorPreviousPageLinkIconTemplate || ctx_r0._paginatorPreviousPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_11_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_3_ng_template_0_Template, 1, 1, \"ng-template\", 27);\n  }\n}\nfunction Table_p_paginator_11_4_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_11_4_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_4_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorLastPageLinkIconTemplate || ctx_r0._paginatorLastPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_11_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_4_ng_template_0_Template, 1, 1, \"ng-template\", 28);\n  }\n}\nfunction Table_p_paginator_11_5_ng_template_0_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_p_paginator_11_5_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_5_ng_template_0_ng_container_0_Template, 1, 0, \"ng-container\", 23);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.paginatorNextPageLinkIconTemplate || ctx_r0._paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction Table_p_paginator_11_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_p_paginator_11_5_ng_template_0_Template, 1, 1, \"ng-template\", 29);\n  }\n}\nfunction Table_p_paginator_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-paginator\", 24);\n    i0.ɵɵlistener(\"onPageChange\", function Table_p_paginator_11_Template_p_paginator_onPageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onPageChange($event));\n    });\n    i0.ɵɵtemplate(1, Table_p_paginator_11_1_Template, 1, 0, null, 16)(2, Table_p_paginator_11_2_Template, 1, 0, null, 16)(3, Table_p_paginator_11_3_Template, 1, 0, null, 16)(4, Table_p_paginator_11_4_Template, 1, 0, null, 16)(5, Table_p_paginator_11_5_Template, 1, 0, null, 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rows\", ctx_r0.rows)(\"first\", ctx_r0.first)(\"totalRecords\", ctx_r0.totalRecords)(\"pageLinkSize\", ctx_r0.pageLinks)(\"alwaysShow\", ctx_r0.alwaysShowPaginator)(\"rowsPerPageOptions\", ctx_r0.rowsPerPageOptions)(\"templateLeft\", ctx_r0.paginatorLeftTemplate || ctx_r0._paginatorLeftTemplate)(\"templateRight\", ctx_r0.paginatorRightTemplate || ctx_r0._paginatorRightTemplate)(\"dropdownAppendTo\", ctx_r0.paginatorDropdownAppendTo)(\"dropdownScrollHeight\", ctx_r0.paginatorDropdownScrollHeight)(\"currentPageReportTemplate\", ctx_r0.currentPageReportTemplate)(\"showFirstLastIcon\", ctx_r0.showFirstLastIcon)(\"dropdownItemTemplate\", ctx_r0.paginatorDropdownItemTemplate || ctx_r0._paginatorDropdownItemTemplate)(\"showCurrentPageReport\", ctx_r0.showCurrentPageReport)(\"showJumpToPageDropdown\", ctx_r0.showJumpToPageDropdown)(\"showJumpToPageInput\", ctx_r0.showJumpToPageInput)(\"showPageLinks\", ctx_r0.showPageLinks)(\"styleClass\", ctx_r0.cx(\"pcPaginator\") + \" \" + ctx_r0.paginatorStyleClass && ctx_r0.paginatorStyleClass)(\"locale\", ctx_r0.paginatorLocale);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorDropdownIconTemplate || ctx_r0._paginatorDropdownIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorFirstPageLinkIconTemplate || ctx_r0._paginatorFirstPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorPreviousPageLinkIconTemplate || ctx_r0._paginatorPreviousPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorLastPageLinkIconTemplate || ctx_r0._paginatorLastPageLinkIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.paginatorNextPageLinkIconTemplate || ctx_r0._paginatorNextPageLinkIconTemplate);\n  }\n}\nfunction Table_div_12_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction Table_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtemplate(1, Table_div_12_ng_container_1_Template, 1, 0, \"ng-container\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"footer\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.summaryTemplate || ctx_r0._summaryTemplate);\n  }\n}\nfunction Table_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 40, 8);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"columnResizeIndicator\"));\n  }\n}\nfunction Table_span_14_ArrowDownIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ArrowDownIcon\");\n  }\n}\nfunction Table_span_14_3_ng_template_0_Template(rf, ctx) {}\nfunction Table_span_14_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_span_14_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Table_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 40, 9);\n    i0.ɵɵtemplate(2, Table_span_14_ArrowDownIcon_2_Template, 1, 0, \"ArrowDownIcon\", 16)(3, Table_span_14_3_Template, 1, 0, null, 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"rowReorderIndicatorUp\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.reorderIndicatorUpIconTemplate && !ctx_r0._reorderIndicatorUpIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.reorderIndicatorUpIconTemplate || ctx_r0._reorderIndicatorUpIconTemplate);\n  }\n}\nfunction Table_span_15_ArrowUpIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ArrowUpIcon\");\n  }\n}\nfunction Table_span_15_3_ng_template_0_Template(rf, ctx) {}\nfunction Table_span_15_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Table_span_15_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction Table_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 40, 10);\n    i0.ɵɵtemplate(2, Table_span_15_ArrowUpIcon_2_Template, 1, 0, \"ArrowUpIcon\", 16)(3, Table_span_15_3_Template, 1, 0, null, 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"rowReorderIndicatorDown\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.reorderIndicatorDownIconTemplate && !ctx_r0._reorderIndicatorDownIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.reorderIndicatorDownIconTemplate || ctx_r0._reorderIndicatorDownIconTemplate);\n  }\n}\nconst _c45 = [\"pTableBody\", \"\"];\nconst _c46 = (a0, a1, a2, a3, a4) => ({\n  $implicit: a0,\n  rowIndex: a1,\n  columns: a2,\n  editing: a3,\n  frozen: a4\n});\nconst _c47 = (a0, a1, a2, a3, a4, a5, a6) => ({\n  $implicit: a0,\n  rowIndex: a1,\n  columns: a2,\n  editing: a3,\n  frozen: a4,\n  rowgroup: a5,\n  rowspan: a6\n});\nconst _c48 = (a0, a1, a2, a3, a4, a5) => ({\n  $implicit: a0,\n  rowIndex: a1,\n  columns: a2,\n  expanded: a3,\n  editing: a4,\n  frozen: a5\n});\nconst _c49 = (a0, a1, a2, a3) => ({\n  $implicit: a0,\n  rowIndex: a1,\n  columns: a2,\n  frozen: a3\n});\nconst _c50 = (a0, a1) => ({\n  $implicit: a0,\n  frozen: a1\n});\nfunction TableBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, TableBody_ng_container_0_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const rowData_r2 = ctx_r0.$implicit;\n    const rowIndex_r3 = ctx_r0.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.groupHeaderTemplate || ctx_r3.dt._groupHeaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction5(2, _c46, rowData_r2, ctx_r3.getRowIndex(rowIndex_r3), ctx_r3.columns, ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r2), ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_0_ng_template_1_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const rowData_r2 = ctx_r0.$implicit;\n    const rowIndex_r3 = ctx_r0.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", rowData_r2 ? ctx_r3.template : ctx_r3.dt.loadingBodyTemplate || ctx_r3.dt._loadingBodyTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction5(2, _c46, rowData_r2, ctx_r3.getRowIndex(rowIndex_r3), ctx_r3.columns, ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r2), ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_0_ng_template_1_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const rowData_r2 = ctx_r0.$implicit;\n    const rowIndex_r3 = ctx_r0.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", rowData_r2 ? ctx_r3.template : ctx_r3.dt.loadingBodyTemplate || ctx_r3.dt._loadingBodyTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction7(2, _c47, rowData_r2, ctx_r3.getRowIndex(rowIndex_r3), ctx_r3.columns, ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r2), ctx_r3.frozen, ctx_r3.shouldRenderRowspan(ctx_r3.value, rowData_r2, rowIndex_r3), ctx_r3.calculateRowGroupSize(ctx_r3.value, rowData_r2, rowIndex_r3)));\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, TableBody_ng_container_0_ng_template_1_ng_container_3_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const rowData_r2 = ctx_r0.$implicit;\n    const rowIndex_r3 = ctx_r0.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.groupFooterTemplate || ctx_r3.dt._groupFooterTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction5(2, _c46, rowData_r2, ctx_r3.getRowIndex(rowIndex_r3), ctx_r3.columns, ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r2), ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableBody_ng_container_0_ng_template_1_ng_container_0_Template, 2, 8, \"ng-container\", 2)(1, TableBody_ng_container_0_ng_template_1_ng_container_1_Template, 2, 8, \"ng-container\", 0)(2, TableBody_ng_container_0_ng_template_1_ng_container_2_Template, 2, 10, \"ng-container\", 0)(3, TableBody_ng_container_0_ng_template_1_ng_container_3_Template, 2, 8, \"ng-container\", 2);\n  }\n  if (rf & 2) {\n    const rowData_r2 = ctx.$implicit;\n    const rowIndex_r3 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.dt.groupHeaderTemplate || ctx_r3.dt._groupHeaderTemplate) && !ctx_r3.dt.virtualScroll && ctx_r3.dt.rowGroupMode === \"subheader\" && ctx_r3.shouldRenderRowGroupHeader(ctx_r3.value, rowData_r2, rowIndex_r3));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dt.rowGroupMode !== \"rowspan\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dt.rowGroupMode === \"rowspan\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.dt.groupFooterTemplate || ctx_r3.dt._groupFooterTemplate) && !ctx_r3.dt.virtualScroll && ctx_r3.dt.rowGroupMode === \"subheader\" && ctx_r3.shouldRenderRowGroupFooter(ctx_r3.value, rowData_r2, rowIndex_r3));\n  }\n}\nfunction TableBody_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_0_ng_template_1_Template, 4, 4, \"ng-template\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.value)(\"ngForTrackBy\", ctx_r3.dt.rowTrackBy);\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_1_ng_template_1_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    const rowData_r6 = ctx_r4.$implicit;\n    const rowIndex_r7 = ctx_r4.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(2, _c48, rowData_r6, ctx_r3.getRowIndex(rowIndex_r7), ctx_r3.columns, ctx_r3.dt.isRowExpanded(rowData_r6), ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r6), ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, TableBody_ng_container_1_ng_template_1_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    const rowData_r6 = ctx_r4.$implicit;\n    const rowIndex_r7 = ctx_r4.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.groupHeaderTemplate || ctx_r3.dt._groupHeaderTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(2, _c48, rowData_r6, ctx_r3.getRowIndex(rowIndex_r7), ctx_r3.columns, ctx_r3.dt.isRowExpanded(rowData_r6), ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r6), ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_2_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, TableBody_ng_container_1_ng_template_1_ng_container_2_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    const rowData_r6 = ctx_r4.$implicit;\n    const rowIndex_r7 = ctx_r4.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.groupFooterTemplate || ctx_r3.dt._groupFooterTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(2, _c48, rowData_r6, ctx_r3.getRowIndex(rowIndex_r7), ctx_r3.columns, ctx_r3.dt.isRowExpanded(rowData_r6), ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r6), ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_1_ng_template_1_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 4)(2, TableBody_ng_container_1_ng_template_1_ng_container_2_ng_container_2_Template, 2, 9, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    const rowData_r6 = ctx_r4.$implicit;\n    const rowIndex_r7 = ctx_r4.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.expandedRowTemplate || ctx_r3.dt._expandedRowTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(3, _c49, rowData_r6, ctx_r3.getRowIndex(rowIndex_r7), ctx_r3.columns, ctx_r3.frozen));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.dt.groupFooterTemplate || ctx_r3.dt._groupFooterTemplate) && ctx_r3.dt.rowGroupMode === \"subheader\" && ctx_r3.shouldRenderRowGroupFooter(ctx_r3.value, rowData_r6, ctx_r3.getRowIndex(rowIndex_r7)));\n  }\n}\nfunction TableBody_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableBody_ng_container_1_ng_template_1_ng_container_0_Template, 2, 9, \"ng-container\", 0)(1, TableBody_ng_container_1_ng_template_1_ng_container_1_Template, 2, 9, \"ng-container\", 2)(2, TableBody_ng_container_1_ng_template_1_ng_container_2_Template, 3, 8, \"ng-container\", 0);\n  }\n  if (rf & 2) {\n    const rowData_r6 = ctx.$implicit;\n    const rowIndex_r7 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", !(ctx_r3.dt.groupHeaderTemplate && ctx_r3.dt._groupHeaderTemplate));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (ctx_r3.dt.groupHeaderTemplate || ctx_r3.dt._groupHeaderTemplate) && ctx_r3.dt.rowGroupMode === \"subheader\" && ctx_r3.shouldRenderRowGroupHeader(ctx_r3.value, rowData_r6, ctx_r3.getRowIndex(rowIndex_r7)));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dt.isRowExpanded(rowData_r6));\n  }\n}\nfunction TableBody_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_1_ng_template_1_Template, 3, 3, \"ng-template\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.value)(\"ngForTrackBy\", ctx_r3.dt.rowTrackBy);\n  }\n}\nfunction TableBody_ng_container_2_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_2_ng_template_1_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_2_ng_template_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_2_ng_template_1_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    const rowData_r9 = ctx_r7.$implicit;\n    const rowIndex_r10 = ctx_r7.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.frozenExpandedRowTemplate || ctx_r3.dt._frozenExpandedRowTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(2, _c49, rowData_r9, ctx_r3.getRowIndex(rowIndex_r10), ctx_r3.columns, ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_2_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableBody_ng_container_2_ng_template_1_ng_container_0_Template, 1, 0, \"ng-container\", 4)(1, TableBody_ng_container_2_ng_template_1_ng_container_1_Template, 2, 7, \"ng-container\", 0);\n  }\n  if (rf & 2) {\n    const rowData_r9 = ctx.$implicit;\n    const rowIndex_r10 = ctx.index;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction6(3, _c48, rowData_r9, ctx_r3.getRowIndex(rowIndex_r10), ctx_r3.columns, ctx_r3.dt.isRowExpanded(rowData_r9), ctx_r3.dt.editMode === \"row\" && ctx_r3.dt.isRowEditing(rowData_r9), ctx_r3.frozen));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dt.isRowExpanded(rowData_r9));\n  }\n}\nfunction TableBody_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_2_ng_template_1_Template, 2, 10, \"ng-template\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.value)(\"ngForTrackBy\", ctx_r3.dt.rowTrackBy);\n  }\n}\nfunction TableBody_ng_container_3_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_3_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.loadingBodyTemplate || ctx_r3.dt._loadingBodyTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c50, ctx_r3.columns, ctx_r3.frozen));\n  }\n}\nfunction TableBody_ng_container_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TableBody_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableBody_ng_container_4_ng_container_1_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.dt.emptyMessageTemplate || ctx_r3.dt._emptyMessageTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c50, ctx_r3.columns, ctx_r3.frozen));\n  }\n}\nfunction SortIcon_ng_container_0_SortAltIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAltIcon\", 4);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction SortIcon_ng_container_0_SortAmountUpAltIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAmountUpAltIcon\", 4);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction SortIcon_ng_container_0_SortAmountDownIcon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"SortAmountDownIcon\", 4);\n  }\n  if (rf & 2) {\n    i0.ɵɵproperty(\"styleClass\", \"p-sortable-column-icon\");\n  }\n}\nfunction SortIcon_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, SortIcon_ng_container_0_SortAltIcon_1_Template, 1, 1, \"SortAltIcon\", 3)(2, SortIcon_ng_container_0_SortAmountUpAltIcon_2_Template, 1, 1, \"SortAmountUpAltIcon\", 3)(3, SortIcon_ng_container_0_SortAmountDownIcon_3_Template, 1, 1, \"SortAmountDownIcon\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === 1);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.sortOrder === -1);\n  }\n}\nfunction SortIcon_span_1_1_ng_template_0_Template(rf, ctx) {}\nfunction SortIcon_span_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, SortIcon_span_1_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction SortIcon_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵtemplate(1, SortIcon_span_1_1_Template, 1, 0, null, 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.dt.sortIconTemplate || ctx_r0.dt._sortIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c44, ctx_r0.sortOrder));\n  }\n}\nfunction SortIcon_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.getBadgeValue());\n  }\n}\nconst _c51 = [\"input\"];\nconst _c52 = [\"output\"];\nfunction CellEditor_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction CellEditor_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CellEditor_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.inputTemplate || ctx_r0._inputTemplate);\n  }\n}\nfunction CellEditor_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction CellEditor_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, CellEditor_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.outputTemplate || ctx_r0._outputTemplate);\n  }\n}\nconst _c53 = [\"rb\"];\nfunction TableCheckbox_ng_container_1_ng_template_1_0_ng_template_0_Template(rf, ctx) {}\nfunction TableCheckbox_ng_container_1_ng_template_1_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableCheckbox_ng_container_1_ng_template_1_0_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TableCheckbox_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableCheckbox_ng_container_1_ng_template_1_0_Template, 1, 0, null, 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.dt.checkboxIconTemplate || ctx_r0.dt._checkboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c44, ctx_r0.checked));\n  }\n}\nfunction TableCheckbox_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableCheckbox_ng_container_1_ng_template_1_Template, 1, 4, \"ng-template\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nfunction TableHeaderCheckbox_ng_container_1_ng_template_1_0_ng_template_0_Template(rf, ctx) {}\nfunction TableHeaderCheckbox_ng_container_1_ng_template_1_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableHeaderCheckbox_ng_container_1_ng_template_1_0_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction TableHeaderCheckbox_ng_container_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TableHeaderCheckbox_ng_container_1_ng_template_1_0_Template, 1, 0, null, 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.dt.headerCheckboxIconTemplate || ctx_r0.dt._headerCheckboxIconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c44, ctx_r0.checked));\n  }\n}\nfunction TableHeaderCheckbox_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TableHeaderCheckbox_ng_container_1_ng_template_1_Template, 1, 4, \"ng-template\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n}\nconst _c54 = [\"filter\"];\nconst _c55 = [\"filtericon\"];\nconst _c56 = [\"removeruleicon\"];\nconst _c57 = [\"addruleicon\"];\nconst _c58 = [\"clearfiltericon\"];\nconst _c59 = [\"clearBtn\"];\nfunction ColumnFilter_p_columnFilterFormElement_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p-columnFilterFormElement\", 8);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"type\", ctx_r0.type)(\"field\", ctx_r0.field)(\"ariaLabel\", ctx_r0.ariaLabel)(\"filterConstraint\", ctx_r0.dt.filters[ctx_r0.field])(\"filterTemplate\", ctx_r0.filterTemplate)(\"placeholder\", ctx_r0.placeholder)(\"minFractionDigits\", ctx_r0.minFractionDigits)(\"maxFractionDigits\", ctx_r0.maxFractionDigits)(\"prefix\", ctx_r0.prefix)(\"suffix\", ctx_r0.suffix)(\"locale\", ctx_r0.locale)(\"localeMatcher\", ctx_r0.localeMatcher)(\"currency\", ctx_r0.currency)(\"currencyDisplay\", ctx_r0.currencyDisplay)(\"useGrouping\", ctx_r0.useGrouping)(\"showButtons\", ctx_r0.showButtons);\n  }\n}\nfunction ColumnFilter_p_button_2_ng_template_1_FilterIcon_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"FilterIcon\");\n  }\n}\nfunction ColumnFilter_p_button_2_ng_template_1_span_1_1_ng_template_0_Template(rf, ctx) {}\nfunction ColumnFilter_p_button_2_ng_template_1_span_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ColumnFilter_p_button_2_ng_template_1_span_1_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction ColumnFilter_p_button_2_ng_template_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 12);\n    i0.ɵɵtemplate(1, ColumnFilter_p_button_2_ng_template_1_span_1_1_Template, 1, 0, null, 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.filterIconTemplate || ctx_r0._filterIconTemplate);\n  }\n}\nfunction ColumnFilter_p_button_2_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ColumnFilter_p_button_2_ng_template_1_FilterIcon_0_Template, 1, 0, \"FilterIcon\", 10)(1, ColumnFilter_p_button_2_ng_template_1_span_1_Template, 2, 1, \"span\", 11);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.filterIconTemplate && !ctx_r0._filterIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.filterIconTemplate || ctx_r0._filterIconTemplate);\n  }\n}\nfunction ColumnFilter_p_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 9);\n    i0.ɵɵlistener(\"click\", function ColumnFilter_p_button_2_Template_p_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.toggleMenu($event));\n    })(\"keydown\", function ColumnFilter_p_button_2_Template_p_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onToggleButtonKeyDown($event));\n    });\n    i0.ɵɵtemplate(1, ColumnFilter_p_button_2_ng_template_1_Template, 2, 2, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    let tmp_7_0;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"styleClass\", ctx_r0.cx(\"pcColumnFilterButton\"))(\"ariaLabel\", ctx_r0.filterMenuButtonAriaLabel)(\"buttonProps\", ctx_r0.filterButtonProps == null ? null : ctx_r0.filterButtonProps.filter);\n    i0.ɵɵattribute(\"aria-haspopup\", true)(\"aria-controls\", ctx_r0.overlayVisible ? ctx_r0.overlayId : null)(\"aria-expanded\", (tmp_7_0 = ctx_r0.overlayVisible) !== null && tmp_7_0 !== undefined ? tmp_7_0 : false);\n  }\n}\nfunction ColumnFilter_p_button_3_ng_template_1_FilterSlashIcon_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"FilterSlashIcon\");\n  }\n}\nfunction ColumnFilter_p_button_3_ng_template_1_1_ng_template_0_Template(rf, ctx) {}\nfunction ColumnFilter_p_button_3_ng_template_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ColumnFilter_p_button_3_ng_template_1_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction ColumnFilter_p_button_3_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ColumnFilter_p_button_3_ng_template_1_FilterSlashIcon_0_Template, 1, 0, \"FilterSlashIcon\", 10)(1, ColumnFilter_p_button_3_ng_template_1_1_Template, 1, 0, null, 13);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.clearFilterIconTemplate && !ctx_r0._clearFilterIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.clearFilterIconTemplate || ctx_r0._clearFilterIconTemplate);\n  }\n}\nfunction ColumnFilter_p_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 14);\n    i0.ɵɵlistener(\"onClick\", function ColumnFilter_p_button_3_Template_p_button_onClick_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.clearFilter());\n    });\n    i0.ɵɵtemplate(1, ColumnFilter_p_button_3_ng_template_1_Template, 2, 2, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"styleClass\", ctx_r0.cx(\"pcColumnfilterClearButton\"))(\"ariaLabel\", ctx_r0.clearButtonLabel)(\"buttonProps\", ctx_r0.filterButtonProps == null ? null : ctx_r0.filterButtonProps.inline == null ? null : ctx_r0.filterButtonProps.inline.clear);\n  }\n}\nfunction ColumnFilter_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ColumnFilter_div_4_ul_2_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 19);\n    i0.ɵɵlistener(\"click\", function ColumnFilter_div_4_ul_2_li_1_Template_li_click_0_listener() {\n      const matchMode_r7 = i0.ɵɵrestoreView(_r6).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onRowMatchModeChange(matchMode_r7.value));\n    })(\"keydown\", function ColumnFilter_div_4_ul_2_li_1_Template_li_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onRowMatchModeKeyDown($event));\n    })(\"keydown.enter\", function ColumnFilter_div_4_ul_2_li_1_Template_li_keydown_enter_0_listener() {\n      const matchMode_r7 = i0.ɵɵrestoreView(_r6).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onRowMatchModeChange(matchMode_r7.value));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const matchMode_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassProp(\"p-datatable-filter-constraint-selected\", ctx_r0.isRowMatchModeSelected(matchMode_r7.value));\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterConstraint\"));\n    i0.ɵɵattribute(\"tabindex\", i_r8 === 0 ? \"0\" : null);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", matchMode_r7.label, \" \");\n  }\n}\nfunction ColumnFilter_div_4_ul_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ul\", 3);\n    i0.ɵɵtemplate(1, ColumnFilter_div_4_ul_2_li_1_Template, 2, 5, \"li\", 18);\n    i0.ɵɵelement(2, \"li\", 3);\n    i0.ɵɵelementStart(3, \"li\", 19);\n    i0.ɵɵlistener(\"click\", function ColumnFilter_div_4_ul_2_Template_li_click_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onRowClearItemClick());\n    })(\"keydown\", function ColumnFilter_div_4_ul_2_Template_li_keydown_3_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onRowMatchModeKeyDown($event));\n    })(\"keydown.enter\", function ColumnFilter_div_4_ul_2_Template_li_keydown_enter_3_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onRowClearItemClick());\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterConstraintList\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.matchModes);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterConstraintSeparator\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterConstraint\"));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.noFilterLabel, \" \");\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"p-select\", 24);\n    i0.ɵɵlistener(\"ngModelChange\", function ColumnFilter_div_4_ng_template_3_div_0_Template_p_select_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onOperatorChange($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterOperator\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"options\", ctx_r0.operatorOptions)(\"ngModel\", ctx_r0.operator)(\"styleClass\", ctx_r0.cx(\"pcFilterOperatorDropdown\"));\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_2_p_select_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-select\", 24);\n    i0.ɵɵlistener(\"ngModelChange\", function ColumnFilter_div_4_ng_template_3_div_2_p_select_1_Template_p_select_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const fieldConstraint_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.onMenuMatchModeChange($event, fieldConstraint_r11));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const fieldConstraint_r11 = i0.ɵɵnextContext().$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"options\", ctx_r0.matchModes)(\"ngModel\", fieldConstraint_r11.matchMode)(\"styleClass\", ctx_r0.cx(\"pcFilterConstraintDropdown\"));\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_2_p_button_4_TrashIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"TrashIcon\");\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_2_p_button_4_2_ng_template_0_Template(rf, ctx) {}\nfunction ColumnFilter_div_4_ng_template_3_div_2_p_button_4_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ColumnFilter_div_4_ng_template_3_div_2_p_button_4_2_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_2_p_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 28);\n    i0.ɵɵlistener(\"onClick\", function ColumnFilter_div_4_ng_template_3_div_2_p_button_4_Template_p_button_onClick_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const fieldConstraint_r11 = i0.ɵɵnextContext().$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.removeConstraint(fieldConstraint_r11));\n    });\n    i0.ɵɵtemplate(1, ColumnFilter_div_4_ng_template_3_div_2_p_button_4_TrashIcon_1_Template, 1, 0, \"TrashIcon\", 10)(2, ColumnFilter_div_4_ng_template_3_div_2_p_button_4_2_Template, 1, 0, null, 13);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"styleClass\", ctx_r0.cx(\"pcFilterRemoveRuleButton\"))(\"text\", true)(\"ariaLabel\", ctx_r0.removeRuleButtonLabel)(\"label\", ctx_r0.removeRuleButtonLabel)(\"buttonProps\", ctx_r0.filterButtonProps == null ? null : ctx_r0.filterButtonProps.popover == null ? null : ctx_r0.filterButtonProps.popover.removeRule);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.removeRuleIconTemplate && !ctx_r0._removeRuleIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.removeRuleIconTemplate || ctx_r0._removeRuleIconTemplate);\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, ColumnFilter_div_4_ng_template_3_div_2_p_select_1_Template, 1, 3, \"p-select\", 25);\n    i0.ɵɵelement(2, \"p-columnFilterFormElement\", 26);\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtemplate(4, ColumnFilter_div_4_ng_template_3_div_2_p_button_4_Template, 3, 7, \"p-button\", 27);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const fieldConstraint_r11 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterRule\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showMatchModes && ctx_r0.matchModes);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"type\", ctx_r0.type)(\"field\", ctx_r0.field)(\"filterConstraint\", fieldConstraint_r11)(\"filterTemplate\", ctx_r0.filterTemplate || ctx_r0._filterTemplate)(\"placeholder\", ctx_r0.placeholder)(\"minFractionDigits\", ctx_r0.minFractionDigits)(\"maxFractionDigits\", ctx_r0.maxFractionDigits)(\"prefix\", ctx_r0.prefix)(\"suffix\", ctx_r0.suffix)(\"locale\", ctx_r0.locale)(\"localeMatcher\", ctx_r0.localeMatcher)(\"currency\", ctx_r0.currency)(\"currencyDisplay\", ctx_r0.currencyDisplay)(\"useGrouping\", ctx_r0.useGrouping);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showRemoveIcon);\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_3_PlusIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"PlusIcon\");\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_3_3_ng_template_0_Template(rf, ctx) {}\nfunction ColumnFilter_div_4_ng_template_3_div_3_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ColumnFilter_div_4_ng_template_3_div_3_3_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p-button\", 29);\n    i0.ɵɵlistener(\"onClick\", function ColumnFilter_div_4_ng_template_3_div_3_Template_p_button_onClick_1_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.addConstraint());\n    });\n    i0.ɵɵtemplate(2, ColumnFilter_div_4_ng_template_3_div_3_PlusIcon_2_Template, 1, 0, \"PlusIcon\", 10)(3, ColumnFilter_div_4_ng_template_3_div_3_3_Template, 1, 0, null, 13);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"label\", ctx_r0.addRuleButtonLabel)(\"styleClass\", ctx_r0.cx(\"pcFilterAddRuleButton\"))(\"text\", true)(\"buttonProps\", ctx_r0.filterButtonProps == null ? null : ctx_r0.filterButtonProps.popover == null ? null : ctx_r0.filterButtonProps.popover.addRule);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.addRuleButtonLabel);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.addRuleIconTemplate && !ctx_r0._addRuleIconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.addRuleIconTemplate || ctx_r0._addRuleIconTemplate);\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_p_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 30, 2);\n    i0.ɵɵlistener(\"onClick\", function ColumnFilter_div_4_ng_template_3_p_button_5_Template_p_button_onClick_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.clearFilter());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"outlined\", true)(\"label\", ctx_r0.clearButtonLabel)(\"buttonProps\", ctx_r0.filterButtonProps == null ? null : ctx_r0.filterButtonProps.popover == null ? null : ctx_r0.filterButtonProps.popover.clear);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.clearButtonLabel);\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_p_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-button\", 31);\n    i0.ɵɵlistener(\"onClick\", function ColumnFilter_div_4_ng_template_3_p_button_6_Template_p_button_onClick_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r0 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r0.applyFilter());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"label\", ctx_r0.applyButtonLabel)(\"buttonProps\", ctx_r0.filterButtonProps == null ? null : ctx_r0.filterButtonProps.popover == null ? null : ctx_r0.filterButtonProps.popover.apply);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.applyButtonLabel);\n  }\n}\nfunction ColumnFilter_div_4_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ColumnFilter_div_4_ng_template_3_div_0_Template, 2, 4, \"div\", 20);\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵtemplate(2, ColumnFilter_div_4_ng_template_3_div_2_Template, 5, 17, \"div\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, ColumnFilter_div_4_ng_template_3_div_3_Template, 4, 7, \"div\", 10);\n    i0.ɵɵelementStart(4, \"div\", 3);\n    i0.ɵɵtemplate(5, ColumnFilter_div_4_ng_template_3_p_button_5_Template, 2, 4, \"p-button\", 22)(6, ColumnFilter_div_4_ng_template_3_p_button_6_Template, 1, 3, \"p-button\", 23);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isShowOperator);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterRuleList\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.fieldConstraints);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isShowAddConstraint);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterButtonbar\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showClearButton);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showApplyButton);\n  }\n}\nfunction ColumnFilter_div_4_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ColumnFilter_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵlistener(\"click\", function ColumnFilter_div_4_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onContentClick());\n    })(\"@overlayAnimation.start\", function ColumnFilter_div_4_Template_div_animation_overlayAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onOverlayAnimationStart($event));\n    })(\"@overlayAnimation.done\", function ColumnFilter_div_4_Template_div_animation_overlayAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onOverlayAnimationEnd($event));\n    })(\"keydown.escape\", function ColumnFilter_div_4_Template_div_keydown_escape_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onEscape());\n    });\n    i0.ɵɵtemplate(1, ColumnFilter_div_4_ng_container_1_Template, 1, 0, \"ng-container\", 16)(2, ColumnFilter_div_4_ul_2_Template, 5, 5, \"ul\", 17)(3, ColumnFilter_div_4_ng_template_3_Template, 7, 7, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor)(5, ColumnFilter_div_4_ng_container_5_Template, 1, 0, \"ng-container\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const menu_r16 = i0.ɵɵreference(4);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"filterOverlay\"))(\"id\", ctx_r0.overlayId)(\"@overlayAnimation\", \"visible\");\n    i0.ɵɵattribute(\"aria-modal\", true);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.headerTemplate || ctx_r0._headerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c44, ctx_r0.field));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.display === \"row\")(\"ngIfElse\", menu_r16);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.footerTemplate || ctx_r0._footerTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(12, _c44, ctx_r0.field));\n  }\n}\nconst _c60 = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) => ({\n  $implicit: a0,\n  filterCallback: a1,\n  type: a2,\n  field: a3,\n  filterConstraint: a4,\n  placeholder: a5,\n  minFractionDigits: a6,\n  maxFractionDigits: a7,\n  prefix: a8,\n  suffix: a9,\n  locale: a10,\n  localeMatcher: a11,\n  currency: a12,\n  currencyDisplay: a13,\n  useGrouping: a14,\n  showButtons: a15\n});\nfunction ColumnFilterFormElement_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ColumnFilterFormElement_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, ColumnFilterFormElement_ng_container_0_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.filterTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunctionV(2, _c60, [ctx_r0.filterConstraint.value, ctx_r0.filterCallback, ctx_r0.type, ctx_r0.field, ctx_r0.filterConstraint, ctx_r0.placeholder, ctx_r0.minFractionDigits, ctx_r0.maxFractionDigits, ctx_r0.prefix, ctx_r0.suffix, ctx_r0.locale, ctx_r0.localeMatcher, ctx_r0.currency, ctx_r0.currencyDisplay, ctx_r0.useGrouping, ctx_r0.showButtons]));\n  }\n}\nfunction ColumnFilterFormElement_ng_template_1_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 8);\n    i0.ɵɵlistener(\"input\", function ColumnFilterFormElement_ng_template_1_input_1_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onModelChange($event.target.value));\n    })(\"keydown.enter\", function ColumnFilterFormElement_ng_template_1_input_1_Template_input_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onTextInputEnterKeyDown($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ariaLabel\", ctx_r0.ariaLabel)(\"value\", ctx_r0.filterConstraint == null ? null : ctx_r0.filterConstraint.value);\n    i0.ɵɵattribute(\"placeholder\", ctx_r0.placeholder);\n  }\n}\nfunction ColumnFilterFormElement_ng_template_1_p_inputNumber_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-inputNumber\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function ColumnFilterFormElement_ng_template_1_p_inputNumber_2_Template_p_inputNumber_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onModelChange($event));\n    })(\"onKeyDown\", function ColumnFilterFormElement_ng_template_1_p_inputNumber_2_Template_p_inputNumber_onKeyDown_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onNumericInputKeyDown($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.filterConstraint == null ? null : ctx_r0.filterConstraint.value)(\"showButtons\", ctx_r0.showButtons)(\"minFractionDigits\", ctx_r0.minFractionDigits)(\"maxFractionDigits\", ctx_r0.maxFractionDigits)(\"ariaLabel\", ctx_r0.ariaLabel)(\"prefix\", ctx_r0.prefix)(\"suffix\", ctx_r0.suffix)(\"placeholder\", ctx_r0.placeholder)(\"mode\", ctx_r0.currency ? \"currency\" : \"decimal\")(\"locale\", ctx_r0.locale)(\"localeMatcher\", ctx_r0.localeMatcher)(\"currency\", ctx_r0.currency)(\"currencyDisplay\", ctx_r0.currencyDisplay)(\"useGrouping\", ctx_r0.useGrouping);\n  }\n}\nfunction ColumnFilterFormElement_ng_template_1_p_checkbox_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-checkbox\", 10);\n    i0.ɵɵlistener(\"ngModelChange\", function ColumnFilterFormElement_ng_template_1_p_checkbox_3_Template_p_checkbox_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onModelChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"indeterminate\", true)(\"binary\", true)(\"ngModel\", ctx_r0.filterConstraint == null ? null : ctx_r0.filterConstraint.value);\n  }\n}\nfunction ColumnFilterFormElement_ng_template_1_p_datepicker_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p-datepicker\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function ColumnFilterFormElement_ng_template_1_p_datepicker_4_Template_p_datepicker_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0.onModelChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ariaLabel\", ctx_r0.ariaLabel)(\"placeholder\", ctx_r0.placeholder)(\"ngModel\", ctx_r0.filterConstraint == null ? null : ctx_r0.filterConstraint.value);\n  }\n}\nfunction ColumnFilterFormElement_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 3);\n    i0.ɵɵtemplate(1, ColumnFilterFormElement_ng_template_1_input_1_Template, 1, 3, \"input\", 4)(2, ColumnFilterFormElement_ng_template_1_p_inputNumber_2_Template, 1, 14, \"p-inputNumber\", 5)(3, ColumnFilterFormElement_ng_template_1_p_checkbox_3_Template, 1, 3, \"p-checkbox\", 6)(4, ColumnFilterFormElement_ng_template_1_p_datepicker_4_Template, 1, 3, \"p-datepicker\", 7);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngSwitch\", ctx_r0.type);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"text\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"numeric\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"boolean\");\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngSwitchCase\", \"date\");\n  }\n}\nclass TableService {\n  sortSource = new Subject();\n  selectionSource = new Subject();\n  contextMenuSource = new Subject();\n  valueSource = new Subject();\n  totalRecordsSource = new Subject();\n  columnsSource = new Subject();\n  sortSource$ = this.sortSource.asObservable();\n  selectionSource$ = this.selectionSource.asObservable();\n  contextMenuSource$ = this.contextMenuSource.asObservable();\n  valueSource$ = this.valueSource.asObservable();\n  totalRecordsSource$ = this.totalRecordsSource.asObservable();\n  columnsSource$ = this.columnsSource.asObservable();\n  onSort(sortMeta) {\n    this.sortSource.next(sortMeta);\n  }\n  onSelectionChange() {\n    this.selectionSource.next(null);\n  }\n  onContextMenu(data) {\n    this.contextMenuSource.next(data);\n  }\n  onValueChange(value) {\n    this.valueSource.next(value);\n  }\n  onTotalRecordsChange(value) {\n    this.totalRecordsSource.next(value);\n  }\n  onColumnsChange(columns) {\n    this.columnsSource.next(columns);\n  }\n  static ɵfac = function TableService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TableService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TableService,\n    factory: TableService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TableService, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * Table displays data in tabular format.\n * @group Components\n */\nclass Table extends BaseComponent {\n  /**\n   * An array of objects to represent dynamic columns that are frozen.\n   * @group Props\n   */\n  frozenColumns;\n  /**\n   * An array of objects to display as frozen.\n   * @group Props\n   */\n  frozenValue;\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n  styleClass;\n  /**\n   * Inline style of the table.\n   * @group Props\n   */\n  tableStyle;\n  /**\n   * Style class of the table.\n   * @group Props\n   */\n  tableStyleClass;\n  /**\n   * When specified as true, enables the pagination.\n   * @group Props\n   */\n  paginator;\n  /**\n   * Number of page links to display in paginator.\n   * @group Props\n   */\n  pageLinks = 5;\n  /**\n   * Array of integer/object values to display inside rows per page dropdown of paginator\n   * @group Props\n   */\n  rowsPerPageOptions;\n  /**\n   * Whether to show it even there is only one page.\n   * @group Props\n   */\n  alwaysShowPaginator = true;\n  /**\n   * Position of the paginator, options are \"top\", \"bottom\" or \"both\".\n   * @group Props\n   */\n  paginatorPosition = 'bottom';\n  /**\n   * Custom style class for paginator\n   * @group Props\n   */\n  paginatorStyleClass;\n  /**\n   * Target element to attach the paginator dropdown overlay, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n   * @group Props\n   */\n  paginatorDropdownAppendTo;\n  /**\n   * Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.\n   * @group Props\n   */\n  paginatorDropdownScrollHeight = '200px';\n  /**\n   * Template of the current page report element. Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}\n   * @group Props\n   */\n  currentPageReportTemplate = '{currentPage} of {totalPages}';\n  /**\n   * Whether to display current page report.\n   * @group Props\n   */\n  showCurrentPageReport;\n  /**\n   * Whether to display a dropdown to navigate to any page.\n   * @group Props\n   */\n  showJumpToPageDropdown;\n  /**\n   * Whether to display a input to navigate to any page.\n   * @group Props\n   */\n  showJumpToPageInput;\n  /**\n   * When enabled, icons are displayed on paginator to go first and last page.\n   * @group Props\n   */\n  showFirstLastIcon = true;\n  /**\n   * Whether to show page links.\n   * @group Props\n   */\n  showPageLinks = true;\n  /**\n   * Sort order to use when an unsorted column gets sorted by user interaction.\n   * @group Props\n   */\n  defaultSortOrder = 1;\n  /**\n   * Defines whether sorting works on single column or on multiple columns.\n   * @group Props\n   */\n  sortMode = 'single';\n  /**\n   * When true, resets paginator to first page after sorting. Available only when sortMode is set to single.\n   * @group Props\n   */\n  resetPageOnSort = true;\n  /**\n   * Specifies the selection mode, valid values are \"single\" and \"multiple\".\n   * @group Props\n   */\n  selectionMode;\n  /**\n   * When enabled with paginator and checkbox selection mode, the select all checkbox in the header will select all rows on the current page.\n   * @group Props\n   */\n  selectionPageOnly;\n  /**\n   * Selected row with a context menu.\n   * @group Props\n   */\n  contextMenuSelection;\n  /**\n   * Callback to invoke on context menu selection change.\n   * @param {*} object - row data.\n   * @group Emits\n   */\n  contextMenuSelectionChange = new EventEmitter();\n  /**\n   *  Defines the behavior of context menu selection, in \"separate\" mode context menu updates contextMenuSelection property whereas in joint mode selection property is used instead so that when row selection is enabled, both row selection and context menu selection use the same property.\n   * @group Props\n   */\n  contextMenuSelectionMode = 'separate';\n  /**\n   * A property to uniquely identify a record in data.\n   * @group Props\n   */\n  dataKey;\n  /**\n   * Defines whether metaKey should be considered for the selection. On touch enabled devices, metaKeySelection is turned off automatically.\n   * @group Props\n   */\n  metaKeySelection = false;\n  /**\n   * Defines if the row is selectable.\n   * @group Props\n   */\n  rowSelectable;\n  /**\n   * Function to optimize the dom operations by delegating to ngForTrackBy, default algorithm checks for object identity.\n   * @group Props\n   */\n  rowTrackBy = (index, item) => item;\n  /**\n   * Defines if data is loaded and interacted with in lazy manner.\n   * @group Props\n   */\n  lazy = false;\n  /**\n   * Whether to call lazy loading on initialization.\n   * @group Props\n   */\n  lazyLoadOnInit = true;\n  /**\n   * Algorithm to define if a row is selected, valid values are \"equals\" that compares by reference and \"deepEquals\" that compares all fields.\n   * @group Props\n   */\n  compareSelectionBy = 'deepEquals';\n  /**\n   * Character to use as the csv separator.\n   * @group Props\n   */\n  csvSeparator = ',';\n  /**\n   * Name of the exported file.\n   * @group Props\n   */\n  exportFilename = 'download';\n  /**\n   * An array of FilterMetadata objects to provide external filters.\n   * @group Props\n   */\n  filters = {};\n  /**\n   * An array of fields as string to use in global filtering.\n   * @group Props\n   */\n  globalFilterFields;\n  /**\n   * Delay in milliseconds before filtering the data.\n   * @group Props\n   */\n  filterDelay = 300;\n  /**\n   * Locale to use in filtering. The default locale is the host environment's current locale.\n   * @group Props\n   */\n  filterLocale;\n  /**\n   * Map instance to keep the expanded rows where key of the map is the data key of the row.\n   * @group Props\n   */\n  expandedRowKeys = {};\n  /**\n   * Map instance to keep the rows being edited where key of the map is the data key of the row.\n   * @group Props\n   */\n  editingRowKeys = {};\n  /**\n   * Whether multiple rows can be expanded at any time. Valid values are \"multiple\" and \"single\".\n   * @group Props\n   */\n  rowExpandMode = 'multiple';\n  /**\n   * Enables scrollable tables.\n   * @group Props\n   */\n  scrollable;\n  /**\n   * Orientation of the scrolling, options are \"vertical\", \"horizontal\" and \"both\".\n   * @group Props\n   * @deprecated Property is obselete since v14.2.0.\n   */\n  scrollDirection = 'vertical';\n  /**\n   * Type of the row grouping, valid values are \"subheader\" and \"rowspan\".\n   * @group Props\n   */\n  rowGroupMode;\n  /**\n   * Height of the scroll viewport in fixed pixels or the \"flex\" keyword for a dynamic size.\n   * @group Props\n   */\n  scrollHeight;\n  /**\n   * Whether the data should be loaded on demand during scroll.\n   * @group Props\n   */\n  virtualScroll;\n  /**\n   * Height of a row to use in calculations of virtual scrolling.\n   * @group Props\n   */\n  virtualScrollItemSize;\n  /**\n   * Whether to use the scroller feature. The properties of scroller component can be used like an object in it.\n   * @group Props\n   */\n  virtualScrollOptions;\n  /**\n   * Threshold in milliseconds to delay lazy loading during scrolling.\n   * @group Props\n   */\n  virtualScrollDelay = 250;\n  /**\n   * Width of the frozen columns container.\n   * @group Props\n   */\n  frozenWidth;\n  /**\n   * Defines if the table is responsive.\n   * @group Props\n   * @deprecated table is always responsive with scrollable behavior.\n   */\n  get responsive() {\n    return this._responsive;\n  }\n  set responsive(val) {\n    this._responsive = val;\n    console.log('responsive property is deprecated as table is always responsive with scrollable behavior.');\n  }\n  _responsive;\n  /**\n   * Local ng-template varilable of a ContextMenu.\n   * @group Props\n   */\n  contextMenu;\n  /**\n   * When enabled, columns can be resized using drag and drop.\n   * @group Props\n   */\n  resizableColumns;\n  /**\n   * Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\".\n   * @group Props\n   */\n  columnResizeMode = 'fit';\n  /**\n   * When enabled, columns can be reordered using drag and drop.\n   * @group Props\n   */\n  reorderableColumns;\n  /**\n   * Displays a loader to indicate data load is in progress.\n   * @group Props\n   */\n  loading;\n  /**\n   * The icon to show while indicating data load is in progress.\n   * @group Props\n   */\n  loadingIcon;\n  /**\n   * Whether to show the loading mask when loading property is true.\n   * @group Props\n   */\n  showLoader = true;\n  /**\n   * Adds hover effect to rows without the need for selectionMode. Note that tr elements that can be hovered need to have \"p-selectable-row\" class for rowHover to work.\n   * @group Props\n   */\n  rowHover;\n  /**\n   * Whether to use the default sorting or a custom one using sortFunction.\n   * @group Props\n   */\n  customSort;\n  /**\n   * Whether to use the initial sort badge or not.\n   * @group Props\n   */\n  showInitialSortBadge = true;\n  /**\n   * Whether the cell widths scale according to their content or not.  Deprecated:  Table layout is always \"auto\".\n   * @group Props\n   */\n  autoLayout;\n  /**\n   * Export function.\n   * @group Props\n   */\n  exportFunction;\n  /**\n   * Custom export header of the column to be exported as CSV.\n   * @group Props\n   */\n  exportHeader;\n  /**\n   * Unique identifier of a stateful table to use in state storage.\n   * @group Props\n   */\n  stateKey;\n  /**\n   * Defines where a stateful table keeps its state, valid values are \"session\" for sessionStorage and \"local\" for localStorage.\n   * @group Props\n   */\n  stateStorage = 'session';\n  /**\n   * Defines the editing mode, valid values are \"cell\" and \"row\".\n   * @group Props\n   */\n  editMode = 'cell';\n  /**\n   * Field name to use in row grouping.\n   * @group Props\n   */\n  groupRowsBy;\n  /**\n   * Defines the size of the table.\n   * @group Props\n   */\n  size;\n  /**\n   * Whether to show grid lines between cells.\n   * @group Props\n   */\n  showGridlines;\n  /**\n   * Whether to display rows with alternating colors.\n   * @group Props\n   */\n  stripedRows;\n  /**\n   * Order to sort when default row grouping is enabled.\n   * @group Props\n   */\n  groupRowsByOrder = 1;\n  /**\n   * Defines the responsive mode, valid options are \"stack\" and \"scroll\".\n   * @group Props\n   */\n  responsiveLayout = 'scroll';\n  /**\n   * The breakpoint to define the maximum width boundary when using stack responsive layout.\n   * @group Props\n   */\n  breakpoint = '960px';\n  /**\n   * Locale to be used in paginator formatting.\n   * @group Props\n   */\n  paginatorLocale;\n  /**\n   * An array of objects to display.\n   * @group Props\n   */\n  get value() {\n    return this._value;\n  }\n  set value(val) {\n    this._value = val;\n  }\n  /**\n   * An array of objects to represent dynamic columns.\n   * @group Props\n   */\n  get columns() {\n    return this._columns;\n  }\n  set columns(cols) {\n    this._columns = cols;\n  }\n  /**\n   * Index of the first row to be displayed.\n   * @group Props\n   */\n  get first() {\n    return this._first;\n  }\n  set first(val) {\n    this._first = val;\n  }\n  /**\n   * Number of rows to display per page.\n   * @group Props\n   */\n  get rows() {\n    return this._rows;\n  }\n  set rows(val) {\n    this._rows = val;\n  }\n  /**\n   * Number of total records, defaults to length of value when not defined.\n   * @group Props\n   */\n  get totalRecords() {\n    return this._totalRecords;\n  }\n  set totalRecords(val) {\n    this._totalRecords = val;\n    this.tableService.onTotalRecordsChange(this._totalRecords);\n  }\n  /**\n   * Name of the field to sort data by default.\n   * @group Props\n   */\n  get sortField() {\n    return this._sortField;\n  }\n  set sortField(val) {\n    this._sortField = val;\n  }\n  /**\n   * Order to sort when default sorting is enabled.\n   * @group Props\n   */\n  get sortOrder() {\n    return this._sortOrder;\n  }\n  set sortOrder(val) {\n    this._sortOrder = val;\n  }\n  /**\n   * An array of SortMeta objects to sort the data by default in multiple sort mode.\n   * @group Props\n   */\n  get multiSortMeta() {\n    return this._multiSortMeta;\n  }\n  set multiSortMeta(val) {\n    this._multiSortMeta = val;\n  }\n  /**\n   * Selected row in single mode or an array of values in multiple mode.\n   * @group Props\n   */\n  get selection() {\n    return this._selection;\n  }\n  set selection(val) {\n    this._selection = val;\n  }\n  /**\n   * Indicates the height of rows to be scrolled.\n   * @group Props\n   * @deprecated use virtualScrollItemSize property instead.\n   */\n  get virtualRowHeight() {\n    return this._virtualRowHeight;\n  }\n  set virtualRowHeight(val) {\n    this._virtualRowHeight = val;\n    console.log('The virtualRowHeight property is deprecated.');\n  }\n  /**\n   * Whether all data is selected.\n   * @group Props\n   */\n  get selectAll() {\n    return this._selection;\n  }\n  set selectAll(val) {\n    this._selection = val;\n  }\n  /**\n   * Emits when the all of the items selected or unselected.\n   * @param {TableSelectAllChangeEvent} event - custom  all selection change event.\n   * @group Emits\n   */\n  selectAllChange = new EventEmitter();\n  /**\n   * Callback to invoke on selection changed.\n   * @param {any | null} value - selected data.\n   * @group Emits\n   */\n  selectionChange = new EventEmitter();\n  /**\n   * Callback to invoke when a row is selected.\n   * @param {TableRowSelectEvent} event - custom select event.\n   * @group Emits\n   */\n  onRowSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a row is unselected.\n   * @param {TableRowUnSelectEvent} event - custom unselect event.\n   * @group Emits\n   */\n  onRowUnselect = new EventEmitter();\n  /**\n   * Callback to invoke when pagination occurs.\n   * @param {TablePageEvent} event - custom pagination event.\n   * @group Emits\n   */\n  onPage = new EventEmitter();\n  /**\n   * Callback to invoke when a column gets sorted.\n   * @param {Object} object - sort meta.\n   * @group Emits\n   */\n  onSort = new EventEmitter();\n  /**\n   * Callback to invoke when data is filtered.\n   * @param {TableFilterEvent} event - custom filtering event.\n   * @group Emits\n   */\n  onFilter = new EventEmitter();\n  /**\n   * Callback to invoke when paging, sorting or filtering happens in lazy mode.\n   * @param {TableLazyLoadEvent} event - custom lazy loading event.\n   * @group Emits\n   */\n  onLazyLoad = new EventEmitter();\n  /**\n   * Callback to invoke when a row is expanded.\n   * @param {TableRowExpandEvent} event - custom row expand event.\n   * @group Emits\n   */\n  onRowExpand = new EventEmitter();\n  /**\n   * Callback to invoke when a row is collapsed.\n   * @param {TableRowCollapseEvent} event - custom row collapse event.\n   * @group Emits\n   */\n  onRowCollapse = new EventEmitter();\n  /**\n   * Callback to invoke when a row is selected with right click.\n   * @param {TableContextMenuSelectEvent} event - custom context menu select event.\n   * @group Emits\n   */\n  onContextMenuSelect = new EventEmitter();\n  /**\n   * Callback to invoke when a column is resized.\n   * @param {TableColResizeEvent} event - custom column resize event.\n   * @group Emits\n   */\n  onColResize = new EventEmitter();\n  /**\n   * Callback to invoke when a column is reordered.\n   * @param {TableColumnReorderEvent} event - custom column reorder event.\n   * @group Emits\n   */\n  onColReorder = new EventEmitter();\n  /**\n   * Callback to invoke when a row is reordered.\n   * @param {TableRowReorderEvent} event - custom row reorder event.\n   * @group Emits\n   */\n  onRowReorder = new EventEmitter();\n  /**\n   * Callback to invoke when a cell switches to edit mode.\n   * @param {TableEditInitEvent} event - custom edit init event.\n   * @group Emits\n   */\n  onEditInit = new EventEmitter();\n  /**\n   * Callback to invoke when cell edit is completed.\n   * @param {TableEditCompleteEvent} event - custom edit complete event.\n   * @group Emits\n   */\n  onEditComplete = new EventEmitter();\n  /**\n   * Callback to invoke when cell edit is cancelled with escape key.\n   * @param {TableEditCancelEvent} event - custom edit cancel event.\n   * @group Emits\n   */\n  onEditCancel = new EventEmitter();\n  /**\n   * Callback to invoke when state of header checkbox changes.\n   * @param {TableHeaderCheckboxToggleEvent} event - custom header checkbox event.\n   * @group Emits\n   */\n  onHeaderCheckboxToggle = new EventEmitter();\n  /**\n   * A function to implement custom sorting, refer to sorting section for details.\n   * @param {any} any - sort meta.\n   * @group Emits\n   */\n  sortFunction = new EventEmitter();\n  /**\n   * Callback to invoke on pagination.\n   * @param {number} number - first element.\n   * @group Emits\n   */\n  firstChange = new EventEmitter();\n  /**\n   * Callback to invoke on rows change.\n   * @param {number} number - Row count.\n   * @group Emits\n   */\n  rowsChange = new EventEmitter();\n  /**\n   * Callback to invoke table state is saved.\n   * @param {TableState} object - table state.\n   * @group Emits\n   */\n  onStateSave = new EventEmitter();\n  /**\n   * Callback to invoke table state is restored.\n   * @param {TableState} object - table state.\n   * @group Emits\n   */\n  onStateRestore = new EventEmitter();\n  containerViewChild;\n  resizeHelperViewChild;\n  reorderIndicatorUpViewChild;\n  reorderIndicatorDownViewChild;\n  wrapperViewChild;\n  tableViewChild;\n  tableHeaderViewChild;\n  tableFooterViewChild;\n  scroller;\n  _templates;\n  _virtualRowHeight = 28;\n  _value = [];\n  _columns;\n  _totalRecords = 0;\n  _first = 0;\n  _rows;\n  filteredValue;\n  // @todo will be refactored later\n  _headerTemplate;\n  headerTemplate;\n  _headerGroupedTemplate;\n  headerGroupedTemplate;\n  _bodyTemplate;\n  bodyTemplate;\n  _loadingBodyTemplate;\n  loadingBodyTemplate;\n  _captionTemplate;\n  captionTemplate;\n  _footerTemplate;\n  footerTemplate;\n  _footerGroupedTemplate;\n  footerGroupedTemplate;\n  _summaryTemplate;\n  summaryTemplate;\n  _colGroupTemplate;\n  colGroupTemplate;\n  _expandedRowTemplate;\n  expandedRowTemplate;\n  _groupHeaderTemplate;\n  groupHeaderTemplate;\n  _groupFooterTemplate;\n  groupFooterTemplate;\n  _frozenExpandedRowTemplate;\n  frozenExpandedRowTemplate;\n  _frozenHeaderTemplate;\n  frozenHeaderTemplate;\n  _frozenBodyTemplate;\n  frozenBodyTemplate;\n  _frozenFooterTemplate;\n  frozenFooterTemplate;\n  _frozenColGroupTemplate;\n  frozenColGroupTemplate;\n  _emptyMessageTemplate;\n  emptyMessageTemplate;\n  _paginatorLeftTemplate;\n  paginatorLeftTemplate;\n  _paginatorRightTemplate;\n  paginatorRightTemplate;\n  _paginatorDropdownItemTemplate;\n  paginatorDropdownItemTemplate;\n  _loadingIconTemplate;\n  loadingIconTemplate;\n  _reorderIndicatorUpIconTemplate;\n  reorderIndicatorUpIconTemplate;\n  _reorderIndicatorDownIconTemplate;\n  reorderIndicatorDownIconTemplate;\n  _sortIconTemplate;\n  sortIconTemplate;\n  _checkboxIconTemplate;\n  checkboxIconTemplate;\n  _headerCheckboxIconTemplate;\n  headerCheckboxIconTemplate;\n  _paginatorDropdownIconTemplate;\n  paginatorDropdownIconTemplate;\n  _paginatorFirstPageLinkIconTemplate;\n  paginatorFirstPageLinkIconTemplate;\n  _paginatorLastPageLinkIconTemplate;\n  paginatorLastPageLinkIconTemplate;\n  _paginatorPreviousPageLinkIconTemplate;\n  paginatorPreviousPageLinkIconTemplate;\n  _paginatorNextPageLinkIconTemplate;\n  paginatorNextPageLinkIconTemplate;\n  selectionKeys = {};\n  lastResizerHelperX;\n  reorderIconWidth;\n  reorderIconHeight;\n  draggedColumn;\n  draggedRowIndex;\n  droppedRowIndex;\n  rowDragging;\n  dropPosition;\n  editingCell;\n  editingCellData;\n  editingCellField;\n  editingCellRowIndex;\n  selfClick;\n  documentEditListener;\n  _multiSortMeta;\n  _sortField;\n  _sortOrder = 1;\n  preventSelectionSetterPropagation;\n  _selection;\n  _selectAll = null;\n  anchorRowIndex;\n  rangeRowIndex;\n  filterTimeout;\n  initialized;\n  rowTouched;\n  restoringSort;\n  restoringFilter;\n  stateRestored;\n  columnOrderStateRestored;\n  columnWidthsState;\n  tableWidthState;\n  overlaySubscription;\n  resizeColumnElement;\n  columnResizing = false;\n  rowGroupHeaderStyleObject = {};\n  id = UniqueComponentId();\n  styleElement;\n  responsiveStyleElement;\n  overlayService = inject(OverlayService);\n  filterService = inject(FilterService);\n  tableService = inject(TableService);\n  zone = inject(NgZone);\n  _componentStyle = inject(TableStyle);\n  ngOnInit() {\n    super.ngOnInit();\n    if (this.lazy && this.lazyLoadOnInit) {\n      if (!this.virtualScroll) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      }\n      if (this.restoringFilter) {\n        this.restoringFilter = false;\n      }\n    }\n    if (this.responsiveLayout === 'stack') {\n      this.createResponsiveStyle();\n    }\n    this.initialized = true;\n  }\n  ngAfterContentInit() {\n    this._templates.forEach(item => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'headergrouped':\n          this.headerGroupedTemplate = item.template;\n          break;\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'loadingbody':\n          this.loadingBodyTemplate = item.template;\n          break;\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n        case 'footergrouped':\n          this.footerGroupedTemplate = item.template;\n          break;\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n        case 'colgroup':\n          this.colGroupTemplate = item.template;\n          break;\n        case 'rowexpansion':\n          this.expandedRowTemplate = item.template;\n          break;\n        case 'groupheader':\n          this.groupHeaderTemplate = item.template;\n          break;\n        case 'groupfooter':\n          this.groupFooterTemplate = item.template;\n          break;\n        case 'frozenheader':\n          this.frozenHeaderTemplate = item.template;\n          break;\n        case 'frozenbody':\n          this.frozenBodyTemplate = item.template;\n          break;\n        case 'frozenfooter':\n          this.frozenFooterTemplate = item.template;\n          break;\n        case 'frozencolgroup':\n          this.frozenColGroupTemplate = item.template;\n          break;\n        case 'frozenrowexpansion':\n          this.frozenExpandedRowTemplate = item.template;\n          break;\n        case 'emptymessage':\n          this.emptyMessageTemplate = item.template;\n          break;\n        case 'paginatorleft':\n          this.paginatorLeftTemplate = item.template;\n          break;\n        case 'paginatorright':\n          this.paginatorRightTemplate = item.template;\n          break;\n        case 'paginatordropdownicon':\n          this.paginatorDropdownIconTemplate = item.template;\n          break;\n        case 'paginatordropdownitem':\n          this.paginatorDropdownItemTemplate = item.template;\n          break;\n        case 'paginatorfirstpagelinkicon':\n          this.paginatorFirstPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatorlastpagelinkicon':\n          this.paginatorLastPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatorpreviouspagelinkicon':\n          this.paginatorPreviousPageLinkIconTemplate = item.template;\n          break;\n        case 'paginatornextpagelinkicon':\n          this.paginatorNextPageLinkIconTemplate = item.template;\n          break;\n        case 'loadingicon':\n          this.loadingIconTemplate = item.template;\n          break;\n        case 'reorderindicatorupicon':\n          this.reorderIndicatorUpIconTemplate = item.template;\n          break;\n        case 'reorderindicatordownicon':\n          this.reorderIndicatorDownIconTemplate = item.template;\n          break;\n        case 'sorticon':\n          this.sortIconTemplate = item.template;\n          break;\n        case 'checkboxicon':\n          this.checkboxIconTemplate = item.template;\n          break;\n        case 'headercheckboxicon':\n          this.headerCheckboxIconTemplate = item.template;\n          break;\n      }\n    });\n  }\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.isStateful() && this.resizableColumns) {\n        this.restoreColumnWidths();\n      }\n    }\n  }\n  ngOnChanges(simpleChange) {\n    super.ngOnChanges(simpleChange);\n    if (simpleChange.value) {\n      if (this.isStateful() && !this.stateRestored && isPlatformBrowser(this.platformId)) {\n        this.restoreState();\n      }\n      this._value = simpleChange.value.currentValue;\n      if (!this.lazy) {\n        this.totalRecords = this._value ? this._value.length : 0;\n        if (this.sortMode == 'single' && (this.sortField || this.groupRowsBy)) this.sortSingle();else if (this.sortMode == 'multiple' && (this.multiSortMeta || this.groupRowsBy)) this.sortMultiple();else if (this.hasFilter())\n          //sort already filters\n          this._filter();\n      }\n      this.tableService.onValueChange(simpleChange.value.currentValue);\n    }\n    if (simpleChange.columns) {\n      if (!this.isStateful()) {\n        this._columns = simpleChange.columns.currentValue;\n        this.tableService.onColumnsChange(simpleChange.columns.currentValue);\n      }\n      if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored) {\n        this.restoreColumnOrder();\n        this.tableService.onColumnsChange(this._columns);\n      }\n    }\n    if (simpleChange.sortField) {\n      this._sortField = simpleChange.sortField.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.groupRowsBy) {\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.sortOrder) {\n      this._sortOrder = simpleChange.sortOrder.currentValue;\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.groupRowsByOrder) {\n      //avoid triggering lazy load prior to lazy initialization at onInit\n      if (!this.lazy || this.initialized) {\n        if (this.sortMode === 'single') {\n          this.sortSingle();\n        }\n      }\n    }\n    if (simpleChange.multiSortMeta) {\n      this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\n      if (this.sortMode === 'multiple' && (this.initialized || !this.lazy && !this.virtualScroll)) {\n        this.sortMultiple();\n      }\n    }\n    if (simpleChange.selection) {\n      this._selection = simpleChange.selection.currentValue;\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys();\n        this.tableService.onSelectionChange();\n      }\n      this.preventSelectionSetterPropagation = false;\n    }\n    if (simpleChange.selectAll) {\n      this._selectAll = simpleChange.selectAll.currentValue;\n      if (!this.preventSelectionSetterPropagation) {\n        this.updateSelectionKeys();\n        this.tableService.onSelectionChange();\n        if (this.isStateful()) {\n          this.saveState();\n        }\n      }\n      this.preventSelectionSetterPropagation = false;\n    }\n  }\n  get processedData() {\n    return this.filteredValue || this.value || [];\n  }\n  _initialColWidths;\n  dataToRender(data) {\n    const _data = data || this.processedData;\n    if (_data && this.paginator) {\n      const first = this.lazy ? 0 : this.first;\n      return _data.slice(first, first + this.rows);\n    }\n    return _data;\n  }\n  updateSelectionKeys() {\n    if (this.dataKey && this._selection) {\n      this.selectionKeys = {};\n      if (Array.isArray(this._selection)) {\n        for (let data of this._selection) {\n          this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\n        }\n      } else {\n        this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\n      }\n    }\n  }\n  onPageChange(event) {\n    this.first = event.first;\n    this.rows = event.rows;\n    this.onPage.emit({\n      first: this.first,\n      rows: this.rows\n    });\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    }\n    this.firstChange.emit(this.first);\n    this.rowsChange.emit(this.rows);\n    this.tableService.onValueChange(this.value);\n    if (this.isStateful()) {\n      this.saveState();\n    }\n    this.anchorRowIndex = null;\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  sort(event) {\n    let originalEvent = event.originalEvent;\n    if (this.sortMode === 'single') {\n      this._sortOrder = this.sortField === event.field ? this.sortOrder * -1 : this.defaultSortOrder;\n      this._sortField = event.field;\n      if (this.resetPageOnSort) {\n        this._first = 0;\n        this.firstChange.emit(this._first);\n        if (this.scrollable) {\n          this.resetScrollTop();\n        }\n      }\n      this.sortSingle();\n    }\n    if (this.sortMode === 'multiple') {\n      let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\n      let sortMeta = this.getSortMeta(event.field);\n      if (sortMeta) {\n        if (!metaKey) {\n          this._multiSortMeta = [{\n            field: event.field,\n            order: sortMeta.order * -1\n          }];\n          if (this.resetPageOnSort) {\n            this._first = 0;\n            this.firstChange.emit(this._first);\n            if (this.scrollable) {\n              this.resetScrollTop();\n            }\n          }\n        } else {\n          sortMeta.order = sortMeta.order * -1;\n        }\n      } else {\n        if (!metaKey || !this.multiSortMeta) {\n          this._multiSortMeta = [];\n          if (this.resetPageOnSort) {\n            this._first = 0;\n            this.firstChange.emit(this._first);\n          }\n        }\n        this._multiSortMeta.push({\n          field: event.field,\n          order: this.defaultSortOrder\n        });\n      }\n      this.sortMultiple();\n    }\n    if (this.isStateful()) {\n      this.saveState();\n    }\n    this.anchorRowIndex = null;\n  }\n  sortSingle() {\n    let field = this.sortField || this.groupRowsBy;\n    let order = this.sortField ? this.sortOrder : this.groupRowsByOrder;\n    if (this.groupRowsBy && this.sortField && this.groupRowsBy !== this.sortField) {\n      this._multiSortMeta = [this.getGroupRowsMeta(), {\n        field: this.sortField,\n        order: this.sortOrder\n      }];\n      this.sortMultiple();\n      return;\n    }\n    if (field && order) {\n      if (this.restoringSort) {\n        this.restoringSort = false;\n      }\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        if (this.customSort) {\n          this.sortFunction.emit({\n            data: this.value,\n            mode: this.sortMode,\n            field: field,\n            order: order\n          });\n        } else {\n          this.value.sort((data1, data2) => {\n            let value1 = ObjectUtils.resolveFieldData(data1, field);\n            let value2 = ObjectUtils.resolveFieldData(data2, field);\n            let result = null;\n            if (value1 == null && value2 != null) result = -1;else if (value1 != null && value2 == null) result = 1;else if (value1 == null && value2 == null) result = 0;else if (typeof value1 === 'string' && typeof value2 === 'string') result = value1.localeCompare(value2);else result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;\n            return order * result;\n          });\n          this._value = [...this.value];\n        }\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      let sortMeta = {\n        field: field,\n        order: order\n      };\n      this.onSort.emit(sortMeta);\n      this.tableService.onSort(sortMeta);\n    }\n  }\n  sortMultiple() {\n    if (this.groupRowsBy) {\n      if (!this._multiSortMeta) this._multiSortMeta = [this.getGroupRowsMeta()];else if (this.multiSortMeta[0].field !== this.groupRowsBy) this._multiSortMeta = [this.getGroupRowsMeta(), ...this._multiSortMeta];\n    }\n    if (this.multiSortMeta) {\n      if (this.lazy) {\n        this.onLazyLoad.emit(this.createLazyLoadMetadata());\n      } else if (this.value) {\n        if (this.customSort) {\n          this.sortFunction.emit({\n            data: this.value,\n            mode: this.sortMode,\n            multiSortMeta: this.multiSortMeta\n          });\n        } else {\n          this.value.sort((data1, data2) => {\n            return this.multisortField(data1, data2, this.multiSortMeta, 0);\n          });\n          this._value = [...this.value];\n        }\n        if (this.hasFilter()) {\n          this._filter();\n        }\n      }\n      this.onSort.emit({\n        multisortmeta: this.multiSortMeta\n      });\n      this.tableService.onSort(this.multiSortMeta);\n    }\n  }\n  multisortField(data1, data2, multiSortMeta, index) {\n    const value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\n    const value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\n    if (ObjectUtils.compare(value1, value2, this.filterLocale) === 0) {\n      return multiSortMeta.length - 1 > index ? this.multisortField(data1, data2, multiSortMeta, index + 1) : 0;\n    }\n    return this.compareValuesOnSort(value1, value2, multiSortMeta[index].order);\n  }\n  compareValuesOnSort(value1, value2, order) {\n    return ObjectUtils.sort(value1, value2, order, this.filterLocale, this.sortOrder);\n  }\n  getSortMeta(field) {\n    if (this.multiSortMeta && this.multiSortMeta.length) {\n      for (let i = 0; i < this.multiSortMeta.length; i++) {\n        if (this.multiSortMeta[i].field === field) {\n          return this.multiSortMeta[i];\n        }\n      }\n    }\n    return null;\n  }\n  isSorted(field) {\n    if (this.sortMode === 'single') {\n      return this.sortField && this.sortField === field;\n    } else if (this.sortMode === 'multiple') {\n      let sorted = false;\n      if (this.multiSortMeta) {\n        for (let i = 0; i < this.multiSortMeta.length; i++) {\n          if (this.multiSortMeta[i].field == field) {\n            sorted = true;\n            break;\n          }\n        }\n      }\n      return sorted;\n    }\n  }\n  handleRowClick(event) {\n    let target = event.originalEvent.target;\n    let targetNode = target.nodeName;\n    let parentNode = target.parentElement && target.parentElement.nodeName;\n    if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' || parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' || DomHandler.hasClass(event.originalEvent.target, 'p-clickable')) {\n      return;\n    }\n    if (this.selectionMode) {\n      let rowData = event.rowData;\n      let rowIndex = event.rowIndex;\n      this.preventSelectionSetterPropagation = true;\n      if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\n        DomHandler.clearSelection();\n        if (this.rangeRowIndex != null) {\n          this.clearSelectionRange(event.originalEvent);\n        }\n        this.rangeRowIndex = rowIndex;\n        this.selectRange(event.originalEvent, rowIndex);\n      } else {\n        let selected = this.isSelected(rowData);\n        if (!selected && !this.isRowSelectable(rowData, rowIndex)) {\n          return;\n        }\n        let metaSelection = this.rowTouched ? false : this.metaKeySelection;\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        this.anchorRowIndex = rowIndex;\n        this.rangeRowIndex = rowIndex;\n        if (metaSelection) {\n          let metaKey = event.originalEvent.metaKey || event.originalEvent.ctrlKey;\n          if (selected && metaKey) {\n            if (this.isSingleSelectionMode()) {\n              this._selection = null;\n              this.selectionKeys = {};\n              this.selectionChange.emit(null);\n            } else {\n              let selectionIndex = this.findIndexInSelection(rowData);\n              this._selection = this.selection.filter((val, i) => i != selectionIndex);\n              this.selectionChange.emit(this.selection);\n              if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n              }\n            }\n            this.onRowUnselect.emit({\n              originalEvent: event.originalEvent,\n              data: rowData,\n              type: 'row'\n            });\n          } else {\n            if (this.isSingleSelectionMode()) {\n              this._selection = rowData;\n              this.selectionChange.emit(rowData);\n              if (dataKeyValue) {\n                this.selectionKeys = {};\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            } else if (this.isMultipleSelectionMode()) {\n              if (metaKey) {\n                this._selection = this.selection || [];\n              } else {\n                this._selection = [];\n                this.selectionKeys = {};\n              }\n              this._selection = [...this.selection, rowData];\n              this.selectionChange.emit(this.selection);\n              if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            }\n            this.onRowSelect.emit({\n              originalEvent: event.originalEvent,\n              data: rowData,\n              type: 'row',\n              index: rowIndex\n            });\n          }\n        } else {\n          if (this.selectionMode === 'single') {\n            if (selected) {\n              this._selection = null;\n              this.selectionKeys = {};\n              this.selectionChange.emit(this.selection);\n              this.onRowUnselect.emit({\n                originalEvent: event.originalEvent,\n                data: rowData,\n                type: 'row',\n                index: rowIndex\n              });\n            } else {\n              this._selection = rowData;\n              this.selectionChange.emit(this.selection);\n              this.onRowSelect.emit({\n                originalEvent: event.originalEvent,\n                data: rowData,\n                type: 'row',\n                index: rowIndex\n              });\n              if (dataKeyValue) {\n                this.selectionKeys = {};\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            }\n          } else if (this.selectionMode === 'multiple') {\n            if (selected) {\n              let selectionIndex = this.findIndexInSelection(rowData);\n              this._selection = this.selection.filter((val, i) => i != selectionIndex);\n              this.selectionChange.emit(this.selection);\n              this.onRowUnselect.emit({\n                originalEvent: event.originalEvent,\n                data: rowData,\n                type: 'row',\n                index: rowIndex\n              });\n              if (dataKeyValue) {\n                delete this.selectionKeys[dataKeyValue];\n              }\n            } else {\n              this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n              this.selectionChange.emit(this.selection);\n              this.onRowSelect.emit({\n                originalEvent: event.originalEvent,\n                data: rowData,\n                type: 'row',\n                index: rowIndex\n              });\n              if (dataKeyValue) {\n                this.selectionKeys[dataKeyValue] = 1;\n              }\n            }\n          }\n        }\n      }\n      this.tableService.onSelectionChange();\n      if (this.isStateful()) {\n        this.saveState();\n      }\n    }\n    this.rowTouched = false;\n  }\n  handleRowTouchEnd(event) {\n    this.rowTouched = true;\n  }\n  handleRowRightClick(event) {\n    if (this.contextMenu) {\n      const rowData = event.rowData;\n      const rowIndex = event.rowIndex;\n      if (this.contextMenuSelectionMode === 'separate') {\n        this.contextMenuSelection = rowData;\n        this.contextMenuSelectionChange.emit(rowData);\n        this.onContextMenuSelect.emit({\n          originalEvent: event.originalEvent,\n          data: rowData,\n          index: event.rowIndex\n        });\n        this.contextMenu.show(event.originalEvent);\n        this.tableService.onContextMenu(rowData);\n      } else if (this.contextMenuSelectionMode === 'joint') {\n        this.preventSelectionSetterPropagation = true;\n        let selected = this.isSelected(rowData);\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n        if (!selected) {\n          if (!this.isRowSelectable(rowData, rowIndex)) {\n            return;\n          }\n          if (this.isSingleSelectionMode()) {\n            this.selection = rowData;\n            this.selectionChange.emit(rowData);\n            if (dataKeyValue) {\n              this.selectionKeys = {};\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          } else if (this.isMultipleSelectionMode()) {\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n            this.selectionChange.emit(this.selection);\n            if (dataKeyValue) {\n              this.selectionKeys[dataKeyValue] = 1;\n            }\n          }\n        }\n        this.tableService.onSelectionChange();\n        this.contextMenu.show(event.originalEvent);\n        this.onContextMenuSelect.emit({\n          originalEvent: event,\n          data: rowData,\n          index: event.rowIndex\n        });\n      }\n    }\n  }\n  selectRange(event, rowIndex) {\n    let rangeStart, rangeEnd;\n    if (this.anchorRowIndex > rowIndex) {\n      rangeStart = rowIndex;\n      rangeEnd = this.anchorRowIndex;\n    } else if (this.anchorRowIndex < rowIndex) {\n      rangeStart = this.anchorRowIndex;\n      rangeEnd = rowIndex;\n    } else {\n      rangeStart = rowIndex;\n      rangeEnd = rowIndex;\n    }\n    if (this.lazy && this.paginator) {\n      rangeStart -= this.first;\n      rangeEnd -= this.first;\n    }\n    let rangeRowsData = [];\n    for (let i = rangeStart; i <= rangeEnd; i++) {\n      let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\n      if (!this.isSelected(rangeRowData)) {\n        if (!this.isRowSelectable(rangeRowData, rowIndex)) {\n          continue;\n        }\n        rangeRowsData.push(rangeRowData);\n        this._selection = [...this.selection, rangeRowData];\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n        if (dataKeyValue) {\n          this.selectionKeys[dataKeyValue] = 1;\n        }\n      }\n    }\n    this.selectionChange.emit(this.selection);\n    this.onRowSelect.emit({\n      originalEvent: event,\n      data: rangeRowsData,\n      type: 'row'\n    });\n  }\n  clearSelectionRange(event) {\n    let rangeStart, rangeEnd;\n    let rangeRowIndex = this.rangeRowIndex;\n    let anchorRowIndex = this.anchorRowIndex;\n    if (rangeRowIndex > anchorRowIndex) {\n      rangeStart = this.anchorRowIndex;\n      rangeEnd = this.rangeRowIndex;\n    } else if (rangeRowIndex < anchorRowIndex) {\n      rangeStart = this.rangeRowIndex;\n      rangeEnd = this.anchorRowIndex;\n    } else {\n      rangeStart = this.rangeRowIndex;\n      rangeEnd = this.rangeRowIndex;\n    }\n    for (let i = rangeStart; i <= rangeEnd; i++) {\n      let rangeRowData = this.value[i];\n      let selectionIndex = this.findIndexInSelection(rangeRowData);\n      this._selection = this.selection.filter((val, i) => i != selectionIndex);\n      let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue];\n      }\n      this.onRowUnselect.emit({\n        originalEvent: event,\n        data: rangeRowData,\n        type: 'row'\n      });\n    }\n  }\n  isSelected(rowData) {\n    if (rowData && this.selection) {\n      if (this.dataKey) {\n        return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\n      } else {\n        if (Array.isArray(this.selection)) return this.findIndexInSelection(rowData) > -1;else return this.equals(rowData, this.selection);\n      }\n    }\n    return false;\n  }\n  findIndexInSelection(rowData) {\n    let index = -1;\n    if (this.selection && this.selection.length) {\n      for (let i = 0; i < this.selection.length; i++) {\n        if (this.equals(rowData, this.selection[i])) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  }\n  isRowSelectable(data, index) {\n    if (this.rowSelectable && !this.rowSelectable({\n      data,\n      index\n    })) {\n      return false;\n    }\n    return true;\n  }\n  toggleRowWithRadio(event, rowData) {\n    this.preventSelectionSetterPropagation = true;\n    if (this.selection != rowData) {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return;\n      }\n      this._selection = rowData;\n      this.selectionChange.emit(this.selection);\n      this.onRowSelect.emit({\n        originalEvent: event.originalEvent,\n        index: event.rowIndex,\n        data: rowData,\n        type: 'radiobutton'\n      });\n      if (this.dataKey) {\n        this.selectionKeys = {};\n        this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\n      }\n    } else {\n      this._selection = null;\n      this.selectionChange.emit(this.selection);\n      this.onRowUnselect.emit({\n        originalEvent: event.originalEvent,\n        index: event.rowIndex,\n        data: rowData,\n        type: 'radiobutton'\n      });\n    }\n    this.tableService.onSelectionChange();\n    if (this.isStateful()) {\n      this.saveState();\n    }\n  }\n  toggleRowWithCheckbox(event, rowData) {\n    this.selection = this.selection || [];\n    let selected = this.isSelected(rowData);\n    let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\n    this.preventSelectionSetterPropagation = true;\n    if (selected) {\n      let selectionIndex = this.findIndexInSelection(rowData);\n      this._selection = this.selection.filter((val, i) => i != selectionIndex);\n      this.selectionChange.emit(this.selection);\n      this.onRowUnselect.emit({\n        originalEvent: event.originalEvent,\n        index: event.rowIndex,\n        data: rowData,\n        type: 'checkbox'\n      });\n      if (dataKeyValue) {\n        delete this.selectionKeys[dataKeyValue];\n      }\n    } else {\n      if (!this.isRowSelectable(rowData, event.rowIndex)) {\n        return;\n      }\n      this._selection = this.selection ? [...this.selection, rowData] : [rowData];\n      this.selectionChange.emit(this.selection);\n      this.onRowSelect.emit({\n        originalEvent: event.originalEvent,\n        index: event.rowIndex,\n        data: rowData,\n        type: 'checkbox'\n      });\n      if (dataKeyValue) {\n        this.selectionKeys[dataKeyValue] = 1;\n      }\n    }\n    this.tableService.onSelectionChange();\n    if (this.isStateful()) {\n      this.saveState();\n    }\n  }\n  toggleRowsWithCheckbox(event, check) {\n    if (this._selectAll !== null) {\n      this.selectAllChange.emit({\n        originalEvent: event,\n        checked: check\n      });\n    } else {\n      const data = this.selectionPageOnly ? this.dataToRender(this.processedData) : this.processedData;\n      let selection = this.selectionPageOnly && this._selection ? this._selection.filter(s => !data.some(d => this.equals(s, d))) : [];\n      if (check) {\n        selection = this.frozenValue ? [...selection, ...this.frozenValue, ...data] : [...selection, ...data];\n        selection = this.rowSelectable ? selection.filter((data, index) => this.rowSelectable({\n          data,\n          index\n        })) : selection;\n      }\n      this._selection = selection;\n      this.preventSelectionSetterPropagation = true;\n      this.updateSelectionKeys();\n      this.selectionChange.emit(this._selection);\n      this.tableService.onSelectionChange();\n      this.onHeaderCheckboxToggle.emit({\n        originalEvent: event,\n        checked: check\n      });\n      if (this.isStateful()) {\n        this.saveState();\n      }\n    }\n  }\n  equals(data1, data2) {\n    return this.compareSelectionBy === 'equals' ? data1 === data2 : ObjectUtils.equals(data1, data2, this.dataKey);\n  }\n  /* Legacy Filtering for custom elements */\n  filter(value, field, matchMode) {\n    if (this.filterTimeout) {\n      clearTimeout(this.filterTimeout);\n    }\n    if (!this.isFilterBlank(value)) {\n      this.filters[field] = {\n        value: value,\n        matchMode: matchMode\n      };\n    } else if (this.filters[field]) {\n      delete this.filters[field];\n    }\n    this.filterTimeout = setTimeout(() => {\n      this._filter();\n      this.filterTimeout = null;\n    }, this.filterDelay);\n    this.anchorRowIndex = null;\n  }\n  filterGlobal(value, matchMode) {\n    this.filter(value, 'global', matchMode);\n  }\n  isFilterBlank(filter) {\n    if (filter !== null && filter !== undefined) {\n      if (typeof filter === 'string' && filter.trim().length == 0 || Array.isArray(filter) && filter.length == 0) return true;else return false;\n    }\n    return true;\n  }\n  _filter() {\n    if (!this.restoringFilter) {\n      this.first = 0;\n      this.firstChange.emit(this.first);\n    }\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      if (!this.value) {\n        return;\n      }\n      if (!this.hasFilter()) {\n        this.filteredValue = null;\n        if (this.paginator) {\n          this.totalRecords = this.value ? this.value.length : 0;\n        }\n      } else {\n        let globalFilterFieldsArray;\n        if (this.filters['global']) {\n          if (!this.columns && !this.globalFilterFields) throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');else globalFilterFieldsArray = this.globalFilterFields || this.columns;\n        }\n        this.filteredValue = [];\n        for (let i = 0; i < this.value.length; i++) {\n          let localMatch = true;\n          let globalMatch = false;\n          let localFiltered = false;\n          for (let prop in this.filters) {\n            if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\n              localFiltered = true;\n              let filterField = prop;\n              let filterMeta = this.filters[filterField];\n              if (Array.isArray(filterMeta)) {\n                for (let meta of filterMeta) {\n                  localMatch = this.executeLocalFilter(filterField, this.value[i], meta);\n                  if (meta.operator === FilterOperator.OR && localMatch || meta.operator === FilterOperator.AND && !localMatch) {\n                    break;\n                  }\n                }\n              } else {\n                localMatch = this.executeLocalFilter(filterField, this.value[i], filterMeta);\n              }\n              if (!localMatch) {\n                break;\n              }\n            }\n          }\n          if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\n            for (let j = 0; j < globalFilterFieldsArray.length; j++) {\n              let globalFilterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];\n              globalMatch = this.filterService.filters[this.filters['global'].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value, this.filterLocale);\n              if (globalMatch) {\n                break;\n              }\n            }\n          }\n          let matches;\n          if (this.filters['global']) {\n            matches = localFiltered ? localFiltered && localMatch && globalMatch : globalMatch;\n          } else {\n            matches = localFiltered && localMatch;\n          }\n          if (matches) {\n            this.filteredValue.push(this.value[i]);\n          }\n        }\n        if (this.filteredValue.length === this.value.length) {\n          this.filteredValue = null;\n        }\n        if (this.paginator) {\n          this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n        }\n      }\n    }\n    this.onFilter.emit({\n      filters: this.filters,\n      filteredValue: this.filteredValue || this.value\n    });\n    this.tableService.onValueChange(this.value);\n    if (this.isStateful() && !this.restoringFilter) {\n      this.saveState();\n    }\n    if (this.restoringFilter) {\n      this.restoringFilter = false;\n    }\n    this.cd.markForCheck();\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n  }\n  executeLocalFilter(field, rowData, filterMeta) {\n    let filterValue = filterMeta.value;\n    let filterMatchMode = filterMeta.matchMode || FilterMatchMode.STARTS_WITH;\n    let dataFieldValue = ObjectUtils.resolveFieldData(rowData, field);\n    let filterConstraint = this.filterService.filters[filterMatchMode];\n    return filterConstraint(dataFieldValue, filterValue, this.filterLocale);\n  }\n  hasFilter() {\n    let empty = true;\n    for (let prop in this.filters) {\n      if (this.filters.hasOwnProperty(prop)) {\n        empty = false;\n        break;\n      }\n    }\n    return !empty;\n  }\n  createLazyLoadMetadata() {\n    return {\n      first: this.first,\n      rows: this.rows,\n      sortField: this.sortField,\n      sortOrder: this.sortOrder,\n      filters: this.filters,\n      globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\n      multiSortMeta: this.multiSortMeta,\n      forceUpdate: () => this.cd.detectChanges()\n    };\n  }\n  clear() {\n    this._sortField = null;\n    this._sortOrder = this.defaultSortOrder;\n    this._multiSortMeta = null;\n    this.tableService.onSort(null);\n    this.clearFilterValues();\n    this.filteredValue = null;\n    this.first = 0;\n    this.firstChange.emit(this.first);\n    if (this.lazy) {\n      this.onLazyLoad.emit(this.createLazyLoadMetadata());\n    } else {\n      this.totalRecords = this._value ? this._value.length : 0;\n    }\n  }\n  clearFilterValues() {\n    for (const [, filterMetadata] of Object.entries(this.filters)) {\n      if (Array.isArray(filterMetadata)) {\n        for (let filter of filterMetadata) {\n          filter.value = null;\n        }\n      } else if (filterMetadata) {\n        filterMetadata.value = null;\n      }\n    }\n  }\n  reset() {\n    this.clear();\n  }\n  getExportHeader(column) {\n    return column[this.exportHeader] || column.header || column.field;\n  }\n  /**\n   * Data export method.\n   * @param {ExportCSVOptions} object - Export options.\n   * @group Method\n   */\n  exportCSV(options) {\n    let data;\n    let csv = '';\n    let columns = this.columns;\n    if (options && options.selectionOnly) {\n      data = this.selection || [];\n    } else if (options && options.allValues) {\n      data = this.value || [];\n    } else {\n      data = this.filteredValue || this.value;\n      if (this.frozenValue) {\n        data = data ? [...this.frozenValue, ...data] : this.frozenValue;\n      }\n    }\n    const exportableColumns = columns.filter(column => column.exportable !== false && column.field);\n    //headers\n    csv += exportableColumns.map(column => '\"' + this.getExportHeader(column) + '\"').join(this.csvSeparator);\n    //body\n    const body = data.map(record => exportableColumns.map(column => {\n      let cellData = ObjectUtils.resolveFieldData(record, column.field);\n      if (cellData != null) {\n        if (this.exportFunction) {\n          cellData = this.exportFunction({\n            data: cellData,\n            field: column.field\n          });\n        } else cellData = String(cellData).replace(/\"/g, '\"\"');\n      } else cellData = '';\n      return '\"' + cellData + '\"';\n    }).join(this.csvSeparator)).join('\\n');\n    if (body.length) {\n      csv += '\\n' + body;\n    }\n    let blob = new Blob([new Uint8Array([0xef, 0xbb, 0xbf]), csv], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    let link = this.renderer.createElement('a');\n    link.style.display = 'none';\n    this.renderer.appendChild(this.document.body, link);\n    if (link.download !== undefined) {\n      link.setAttribute('href', URL.createObjectURL(blob));\n      link.setAttribute('download', this.exportFilename + '.csv');\n      link.click();\n    } else {\n      csv = 'data:text/csv;charset=utf-8,' + csv;\n      this.document.defaultView.open(encodeURI(csv));\n    }\n    this.renderer.removeChild(this.document.body, link);\n  }\n  onLazyItemLoad(event) {\n    this.onLazyLoad.emit({\n      ...this.createLazyLoadMetadata(),\n      ...event,\n      rows: event.last - event.first\n    });\n  }\n  /**\n   * Resets scroll to top.\n   * @group Method\n   */\n  resetScrollTop() {\n    if (this.virtualScroll) this.scrollToVirtualIndex(0);else this.scrollTo({\n      top: 0\n    });\n  }\n  /**\n   * Scrolls to given index when using virtual scroll.\n   * @param {number} index - index of the element.\n   * @group Method\n   */\n  scrollToVirtualIndex(index) {\n    this.scroller && this.scroller.scrollToIndex(index);\n  }\n  /**\n   * Scrolls to given index.\n   * @param {ScrollToOptions} options - scroll options.\n   * @group Method\n   */\n  scrollTo(options) {\n    if (this.virtualScroll) {\n      this.scroller?.scrollTo(options);\n    } else if (this.wrapperViewChild && this.wrapperViewChild.nativeElement) {\n      if (this.wrapperViewChild.nativeElement.scrollTo) {\n        this.wrapperViewChild.nativeElement.scrollTo(options);\n      } else {\n        this.wrapperViewChild.nativeElement.scrollLeft = options.left;\n        this.wrapperViewChild.nativeElement.scrollTop = options.top;\n      }\n    }\n  }\n  updateEditingCell(cell, data, field, index) {\n    this.editingCell = cell;\n    this.editingCellData = data;\n    this.editingCellField = field;\n    this.editingCellRowIndex = index;\n    this.bindDocumentEditListener();\n  }\n  isEditingCellValid() {\n    return this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0;\n  }\n  bindDocumentEditListener() {\n    if (!this.documentEditListener) {\n      this.documentEditListener = this.renderer.listen(this.document, 'click', event => {\n        if (this.editingCell && !this.selfClick && this.isEditingCellValid()) {\n          DomHandler.removeClass(this.editingCell, 'p-cell-editing');\n          this.editingCell = null;\n          this.onEditComplete.emit({\n            field: this.editingCellField,\n            data: this.editingCellData,\n            originalEvent: event,\n            index: this.editingCellRowIndex\n          });\n          this.editingCellField = null;\n          this.editingCellData = null;\n          this.editingCellRowIndex = null;\n          this.unbindDocumentEditListener();\n          this.cd.markForCheck();\n          if (this.overlaySubscription) {\n            this.overlaySubscription.unsubscribe();\n          }\n        }\n        this.selfClick = false;\n      });\n    }\n  }\n  unbindDocumentEditListener() {\n    if (this.documentEditListener) {\n      this.documentEditListener();\n      this.documentEditListener = null;\n    }\n  }\n  initRowEdit(rowData) {\n    let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n    this.editingRowKeys[dataKeyValue] = true;\n  }\n  saveRowEdit(rowData, rowElement) {\n    if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\n      let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n      delete this.editingRowKeys[dataKeyValue];\n    }\n  }\n  cancelRowEdit(rowData) {\n    let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n    delete this.editingRowKeys[dataKeyValue];\n  }\n  toggleRow(rowData, event) {\n    if (!this.dataKey && !this.groupRowsBy) {\n      throw new Error('dataKey or groupRowsBy must be defined to use row expansion');\n    }\n    let dataKeyValue = this.groupRowsBy ? String(ObjectUtils.resolveFieldData(rowData, this.groupRowsBy)) : String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\n    if (this.expandedRowKeys[dataKeyValue] != null) {\n      delete this.expandedRowKeys[dataKeyValue];\n      this.onRowCollapse.emit({\n        originalEvent: event,\n        data: rowData\n      });\n    } else {\n      if (this.rowExpandMode === 'single') {\n        this.expandedRowKeys = {};\n      }\n      this.expandedRowKeys[dataKeyValue] = true;\n      this.onRowExpand.emit({\n        originalEvent: event,\n        data: rowData\n      });\n    }\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.isStateful()) {\n      this.saveState();\n    }\n  }\n  isRowExpanded(rowData) {\n    return this.groupRowsBy ? this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.groupRowsBy))] === true : this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n  }\n  isRowEditing(rowData) {\n    return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\n  }\n  isSingleSelectionMode() {\n    return this.selectionMode === 'single';\n  }\n  isMultipleSelectionMode() {\n    return this.selectionMode === 'multiple';\n  }\n  onColumnResizeBegin(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n    this.resizeColumnElement = event.target.parentElement;\n    this.columnResizing = true;\n    if (event.type == 'touchstart') {\n      this.lastResizerHelperX = event.changedTouches[0].clientX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;\n    } else {\n      this.lastResizerHelperX = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft;\n    }\n    this.onColumnResize(event);\n    event.preventDefault();\n  }\n  onColumnResize(event) {\n    let containerLeft = DomHandler.getOffset(this.containerViewChild?.nativeElement).left;\n    DomHandler.addClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n    this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild?.nativeElement.offsetHeight + 'px';\n    this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\n    if (event.type == 'touchmove') {\n      this.resizeHelperViewChild.nativeElement.style.left = event.changedTouches[0].clientX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + 'px';\n    } else {\n      this.resizeHelperViewChild.nativeElement.style.left = event.pageX - containerLeft + this.containerViewChild?.nativeElement.scrollLeft + 'px';\n    }\n    this.resizeHelperViewChild.nativeElement.style.display = 'block';\n  }\n  onColumnResizeEnd() {\n    let delta = this.resizeHelperViewChild?.nativeElement.offsetLeft - this.lastResizerHelperX;\n    let columnWidth = this.resizeColumnElement.offsetWidth;\n    let newColumnWidth = columnWidth + delta;\n    let minWidth = this.resizeColumnElement.style.minWidth.replace(/[^\\d.]/g, '') || 15;\n    if (newColumnWidth >= minWidth) {\n      if (this.columnResizeMode === 'fit') {\n        let nextColumn = this.resizeColumnElement.nextElementSibling;\n        let nextColumnWidth = nextColumn.offsetWidth - delta;\n        if (newColumnWidth > 15 && nextColumnWidth > 15) {\n          this.resizeTableCells(newColumnWidth, nextColumnWidth);\n        }\n      } else if (this.columnResizeMode === 'expand') {\n        this._initialColWidths = this._totalTableWidth();\n        let tableWidth = this.tableViewChild?.nativeElement.offsetWidth + delta;\n        this.setResizeTableWidth(tableWidth + 'px');\n        this.resizeTableCells(newColumnWidth, null);\n      }\n      this.onColResize.emit({\n        element: this.resizeColumnElement,\n        delta: delta\n      });\n      if (this.isStateful()) {\n        this.saveState();\n      }\n    }\n    this.resizeHelperViewChild.nativeElement.style.display = 'none';\n    DomHandler.removeClass(this.containerViewChild?.nativeElement, 'p-unselectable-text');\n  }\n  _totalTableWidth() {\n    let widths = [];\n    const tableHead = DomHandler.findSingle(this.containerViewChild.nativeElement, '.p-datatable-thead');\n    let headers = DomHandler.find(tableHead, 'tr > th');\n    headers.forEach(header => widths.push(DomHandler.getOuterWidth(header)));\n    return widths;\n  }\n  onColumnDragStart(event, columnElement) {\n    this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild?.nativeElement);\n    this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild?.nativeElement);\n    this.draggedColumn = columnElement;\n    event.dataTransfer.setData('text', 'b'); // For firefox\n  }\n  onColumnDragEnter(event, dropHeader) {\n    if (this.reorderableColumns && this.draggedColumn && dropHeader) {\n      event.preventDefault();\n      let containerOffset = DomHandler.getOffset(this.containerViewChild?.nativeElement);\n      let dropHeaderOffset = DomHandler.getOffset(dropHeader);\n      if (this.draggedColumn != dropHeader) {\n        let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n        let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\n        let targetLeft = dropHeaderOffset.left - containerOffset.left;\n        let targetTop = containerOffset.top - dropHeaderOffset.top;\n        let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\n        this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\n        this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\n        if (event.pageX > columnCenter) {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = 1;\n        } else {\n          this.reorderIndicatorUpViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.reorderIndicatorDownViewChild.nativeElement.style.left = targetLeft - Math.ceil(this.reorderIconWidth / 2) + 'px';\n          this.dropPosition = -1;\n        }\n        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\n        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\n      } else {\n        event.dataTransfer.dropEffect = 'none';\n      }\n    }\n  }\n  onColumnDragLeave(event) {\n    if (this.reorderableColumns && this.draggedColumn) {\n      event.preventDefault();\n    }\n  }\n  onColumnDrop(event, dropColumn) {\n    event.preventDefault();\n    if (this.draggedColumn) {\n      let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\n      let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\n      let allowDrop = dragIndex != dropIndex;\n      if (allowDrop && (dropIndex - dragIndex == 1 && this.dropPosition === -1 || dragIndex - dropIndex == 1 && this.dropPosition === 1)) {\n        allowDrop = false;\n      }\n      if (allowDrop && dropIndex < dragIndex && this.dropPosition === 1) {\n        dropIndex = dropIndex + 1;\n      }\n      if (allowDrop && dropIndex > dragIndex && this.dropPosition === -1) {\n        dropIndex = dropIndex - 1;\n      }\n      if (allowDrop) {\n        ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\n        this.onColReorder.emit({\n          dragIndex: dragIndex,\n          dropIndex: dropIndex,\n          columns: this.columns\n        });\n        if (this.isStateful()) {\n          this.zone.runOutsideAngular(() => {\n            setTimeout(() => {\n              this.saveState();\n            });\n          });\n        }\n      }\n      if (this.resizableColumns && this.resizeColumnElement) {\n        let width = this.columnResizeMode === 'expand' ? this._initialColWidths : this._totalTableWidth();\n        ObjectUtils.reorderArray(width, dragIndex + 1, dropIndex + 1);\n        this.updateStyleElement(width, dragIndex, null, null);\n      }\n      this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\n      this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\n      this.draggedColumn.draggable = false;\n      this.draggedColumn = null;\n      this.dropPosition = null;\n    }\n  }\n  resizeTableCells(newColumnWidth, nextColumnWidth) {\n    let colIndex = DomHandler.index(this.resizeColumnElement);\n    let width = this.columnResizeMode === 'expand' ? this._initialColWidths : this._totalTableWidth();\n    this.updateStyleElement(width, colIndex, newColumnWidth, nextColumnWidth);\n  }\n  updateStyleElement(width, colIndex, newColumnWidth, nextColumnWidth) {\n    this.destroyStyleElement();\n    this.createStyleElement();\n    let innerHTML = '';\n    width.forEach((width, index) => {\n      let colWidth = index === colIndex ? newColumnWidth : nextColumnWidth && index === colIndex + 1 ? nextColumnWidth : width;\n      let style = `width: ${colWidth}px !important; max-width: ${colWidth}px !important;`;\n      innerHTML += `\n                #${this.id}-table > .p-datatable-thead > tr > th:nth-child(${index + 1}),\n                #${this.id}-table > .p-datatable-tbody > tr > td:nth-child(${index + 1}),\n                #${this.id}-table > .p-datatable-tfoot > tr > td:nth-child(${index + 1}) {\n                    ${style}\n                }\n            `;\n    });\n    this.renderer.setProperty(this.styleElement, 'innerHTML', innerHTML);\n  }\n  onRowDragStart(event, index) {\n    this.rowDragging = true;\n    this.draggedRowIndex = index;\n    event.dataTransfer.setData('text', 'b'); // For firefox\n  }\n  onRowDragOver(event, index, rowElement) {\n    if (this.rowDragging && this.draggedRowIndex !== index) {\n      let rowY = DomHandler.getOffset(rowElement).top;\n      let pageY = event.pageY;\n      let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\n      let prevRowElement = rowElement.previousElementSibling;\n      if (pageY < rowMidY) {\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n        this.droppedRowIndex = index;\n        if (prevRowElement) DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');else DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n      } else {\n        if (prevRowElement) DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');else DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\n        this.droppedRowIndex = index + 1;\n        DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\n      }\n    }\n  }\n  onRowDragLeave(event, rowElement) {\n    let prevRowElement = rowElement.previousElementSibling;\n    if (prevRowElement) {\n      DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\n    }\n    DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\n    DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\n  }\n  onRowDragEnd(event) {\n    this.rowDragging = false;\n    this.draggedRowIndex = null;\n    this.droppedRowIndex = null;\n  }\n  onRowDrop(event, rowElement) {\n    if (this.droppedRowIndex != null) {\n      let dropIndex = this.draggedRowIndex > this.droppedRowIndex ? this.droppedRowIndex : this.droppedRowIndex === 0 ? 0 : this.droppedRowIndex - 1;\n      ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\n      if (this.virtualScroll) {\n        // TODO: Check\n        this._value = [...this._value];\n      }\n      this.onRowReorder.emit({\n        dragIndex: this.draggedRowIndex,\n        dropIndex: dropIndex\n      });\n    }\n    //cleanup\n    this.onRowDragLeave(event, rowElement);\n    this.onRowDragEnd(event);\n  }\n  isEmpty() {\n    let data = this.filteredValue || this.value;\n    return data == null || data.length == 0;\n  }\n  getBlockableElement() {\n    return this.el.nativeElement.children[0];\n  }\n  getStorage() {\n    if (isPlatformBrowser(this.platformId)) {\n      switch (this.stateStorage) {\n        case 'local':\n          return window.localStorage;\n        case 'session':\n          return window.sessionStorage;\n        default:\n          throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n      }\n    } else {\n      throw new Error('Browser storage is not available in the server side.');\n    }\n  }\n  isStateful() {\n    return this.stateKey != null;\n  }\n  saveState() {\n    const storage = this.getStorage();\n    let state = {};\n    if (this.paginator) {\n      state.first = this.first;\n      state.rows = this.rows;\n    }\n    if (this.sortField) {\n      state.sortField = this.sortField;\n      state.sortOrder = this.sortOrder;\n    }\n    if (this.multiSortMeta) {\n      state.multiSortMeta = this.multiSortMeta;\n    }\n    if (this.hasFilter()) {\n      state.filters = this.filters;\n    }\n    if (this.resizableColumns) {\n      this.saveColumnWidths(state);\n    }\n    if (this.reorderableColumns) {\n      this.saveColumnOrder(state);\n    }\n    if (this.selection) {\n      state.selection = this.selection;\n    }\n    if (Object.keys(this.expandedRowKeys).length) {\n      state.expandedRowKeys = this.expandedRowKeys;\n    }\n    storage.setItem(this.stateKey, JSON.stringify(state));\n    this.onStateSave.emit(state);\n  }\n  clearState() {\n    const storage = this.getStorage();\n    if (this.stateKey) {\n      storage.removeItem(this.stateKey);\n    }\n  }\n  restoreState() {\n    const storage = this.getStorage();\n    const stateString = storage.getItem(this.stateKey);\n    const dateFormat = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/;\n    const reviver = function (key, value) {\n      if (typeof value === 'string' && dateFormat.test(value)) {\n        return new Date(value);\n      }\n      return value;\n    };\n    if (stateString) {\n      let state = JSON.parse(stateString, reviver);\n      if (this.paginator) {\n        if (this.first !== undefined) {\n          this.first = state.first;\n          this.firstChange.emit(this.first);\n        }\n        if (this.rows !== undefined) {\n          this.rows = state.rows;\n          this.rowsChange.emit(this.rows);\n        }\n      }\n      if (state.sortField) {\n        this.restoringSort = true;\n        this._sortField = state.sortField;\n        this._sortOrder = state.sortOrder;\n      }\n      if (state.multiSortMeta) {\n        this.restoringSort = true;\n        this._multiSortMeta = state.multiSortMeta;\n      }\n      if (state.filters) {\n        this.restoringFilter = true;\n        this.filters = state.filters;\n      }\n      if (this.resizableColumns) {\n        this.columnWidthsState = state.columnWidths;\n        this.tableWidthState = state.tableWidth;\n      }\n      // if (this.reorderableColumns) {\n      //     this.restoreColumnOrder();\n      // }\n      if (state.expandedRowKeys) {\n        this.expandedRowKeys = state.expandedRowKeys;\n      }\n      if (state.selection) {\n        Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\n      }\n      this.stateRestored = true;\n      this.onStateRestore.emit(state);\n    }\n  }\n  saveColumnWidths(state) {\n    let widths = [];\n    let headers = DomHandler.find(this.containerViewChild?.nativeElement, '.p-datatable-thead > tr > th');\n    headers.forEach(header => widths.push(DomHandler.getOuterWidth(header)));\n    state.columnWidths = widths.join(',');\n    if (this.columnResizeMode === 'expand') {\n      state.tableWidth = DomHandler.getOuterWidth(this.tableViewChild?.nativeElement);\n    }\n  }\n  setResizeTableWidth(width) {\n    this.tableViewChild.nativeElement.style.width = width;\n    this.tableViewChild.nativeElement.style.minWidth = width;\n  }\n  restoreColumnWidths() {\n    if (this.columnWidthsState) {\n      let widths = this.columnWidthsState.split(',');\n      if (this.columnResizeMode === 'expand' && this.tableWidthState) {\n        this.setResizeTableWidth(this.tableWidthState + 'px');\n      }\n      if (ObjectUtils.isNotEmpty(widths)) {\n        this.createStyleElement();\n        let innerHTML = '';\n        widths.forEach((width, index) => {\n          let style = `width: ${width}px !important; max-width: ${width}px !important`;\n          innerHTML += `\n                        #${this.id}-table > .p-datatable-thead > tr > th:nth-child(${index + 1}),\n                        #${this.id}-table > .p-datatable-tbody > tr > td:nth-child(${index + 1}),\n                        #${this.id}-table > .p-datatable-tfoot > tr > td:nth-child(${index + 1}) {\n                            ${style}\n                        }\n                    `;\n        });\n        this.styleElement.innerHTML = innerHTML;\n      }\n    }\n  }\n  saveColumnOrder(state) {\n    if (this.columns) {\n      let columnOrder = [];\n      this.columns.map(column => {\n        columnOrder.push(column.field || column.key);\n      });\n      state.columnOrder = columnOrder;\n    }\n  }\n  restoreColumnOrder() {\n    const storage = this.getStorage();\n    const stateString = storage.getItem(this.stateKey);\n    if (stateString) {\n      let state = JSON.parse(stateString);\n      let columnOrder = state.columnOrder;\n      if (columnOrder) {\n        let reorderedColumns = [];\n        columnOrder.map(key => {\n          let col = this.findColumnByKey(key);\n          if (col) {\n            reorderedColumns.push(col);\n          }\n        });\n        this.columnOrderStateRestored = true;\n        this.columns = reorderedColumns;\n      }\n    }\n  }\n  findColumnByKey(key) {\n    if (this.columns) {\n      for (let col of this.columns) {\n        if (col.key === key || col.field === key) return col;else continue;\n      }\n    } else {\n      return null;\n    }\n  }\n  createStyleElement() {\n    this.styleElement = this.renderer.createElement('style');\n    this.styleElement.type = 'text/css';\n    this.renderer.appendChild(this.document.head, this.styleElement);\n    DomHandler.setAttribute(this.styleElement, 'nonce', this.config?.csp()?.nonce);\n  }\n  getGroupRowsMeta() {\n    return {\n      field: this.groupRowsBy,\n      order: this.groupRowsByOrder\n    };\n  }\n  createResponsiveStyle() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!this.responsiveStyleElement) {\n        this.responsiveStyleElement = this.renderer.createElement('style');\n        this.responsiveStyleElement.type = 'text/css';\n        this.renderer.appendChild(this.document.head, this.responsiveStyleElement);\n        let innerHTML = `\n    @media screen and (max-width: ${this.breakpoint}) {\n        #${this.id}-table > .p-datatable-thead > tr > th,\n        #${this.id}-table > .p-datatable-tfoot > tr > td {\n            display: none !important;\n        }\n\n        #${this.id}-table > .p-datatable-tbody > tr > td {\n            display: flex;\n            width: 100% !important;\n            align-items: center;\n            justify-content: space-between;\n        }\n\n        #${this.id}-table > .p-datatable-tbody > tr > td:not(:last-child) {\n            border: 0 none;\n        }\n\n        #${this.id}.p-datatable-gridlines > .p-datatable-table-container > .p-datatable-table > .p-datatable-tbody > tr > td:last-child {\n            border-top: 0;\n            border-right: 0;\n            border-left: 0;\n        }\n\n        #${this.id}-table > .p-datatable-tbody > tr > td > .p-datatable-column-title {\n            display: block;\n        }\n    }\n    `;\n        this.renderer.setProperty(this.responsiveStyleElement, 'innerHTML', innerHTML);\n      }\n    }\n  }\n  destroyResponsiveStyle() {\n    if (this.responsiveStyleElement) {\n      this.renderer.removeChild(this.document.head, this.responsiveStyleElement);\n      this.responsiveStyleElement = null;\n    }\n  }\n  destroyStyleElement() {\n    if (this.styleElement) {\n      this.renderer.removeChild(this.document.head, this.styleElement);\n      this.styleElement = null;\n    }\n  }\n  ngOnDestroy() {\n    this.unbindDocumentEditListener();\n    this.editingCell = null;\n    this.initialized = null;\n    this.destroyStyleElement();\n    this.destroyResponsiveStyle();\n    super.ngOnDestroy();\n  }\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵTable_BaseFactory;\n    return function Table_Factory(__ngFactoryType__) {\n      return (ɵTable_BaseFactory || (ɵTable_BaseFactory = i0.ɵɵgetInheritedFactory(Table)))(__ngFactoryType__ || Table);\n    };\n  })();\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Table,\n    selectors: [[\"p-table\"]],\n    contentQueries: function Table_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c1, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c2, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c3, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c4, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c5, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c6, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c7, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c8, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c9, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c10, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c11, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c12, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c13, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c14, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c15, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c16, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c17, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c18, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c19, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c20, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c21, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c22, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c23, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c24, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c25, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c26, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c27, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c28, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c29, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c30, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c31, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerGroupedTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._bodyTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._loadingBodyTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._captionTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._footerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._footerGroupedTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._summaryTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._colGroupTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._expandedRowTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._groupHeaderTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._groupFooterTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._frozenExpandedRowTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._frozenHeaderTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._frozenBodyTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._frozenFooterTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._frozenColGroupTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._emptyMessageTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorLeftTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorRightTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorDropdownItemTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._loadingIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._reorderIndicatorUpIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._reorderIndicatorDownIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._sortIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._checkboxIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerCheckboxIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorDropdownIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorFirstPageLinkIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorLastPageLinkIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorPreviousPageLinkIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._paginatorNextPageLinkIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._templates = _t);\n      }\n    },\n    viewQuery: function Table_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c32, 5);\n        i0.ɵɵviewQuery(_c33, 5);\n        i0.ɵɵviewQuery(_c34, 5);\n        i0.ɵɵviewQuery(_c35, 5);\n        i0.ɵɵviewQuery(_c36, 5);\n        i0.ɵɵviewQuery(_c37, 5);\n        i0.ɵɵviewQuery(_c38, 5);\n        i0.ɵɵviewQuery(_c39, 5);\n        i0.ɵɵviewQuery(_c40, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrapperViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableHeaderViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableFooterViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n      }\n    },\n    inputs: {\n      frozenColumns: \"frozenColumns\",\n      frozenValue: \"frozenValue\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      tableStyle: \"tableStyle\",\n      tableStyleClass: \"tableStyleClass\",\n      paginator: [2, \"paginator\", \"paginator\", booleanAttribute],\n      pageLinks: [2, \"pageLinks\", \"pageLinks\", numberAttribute],\n      rowsPerPageOptions: \"rowsPerPageOptions\",\n      alwaysShowPaginator: [2, \"alwaysShowPaginator\", \"alwaysShowPaginator\", booleanAttribute],\n      paginatorPosition: \"paginatorPosition\",\n      paginatorStyleClass: \"paginatorStyleClass\",\n      paginatorDropdownAppendTo: \"paginatorDropdownAppendTo\",\n      paginatorDropdownScrollHeight: \"paginatorDropdownScrollHeight\",\n      currentPageReportTemplate: \"currentPageReportTemplate\",\n      showCurrentPageReport: [2, \"showCurrentPageReport\", \"showCurrentPageReport\", booleanAttribute],\n      showJumpToPageDropdown: [2, \"showJumpToPageDropdown\", \"showJumpToPageDropdown\", booleanAttribute],\n      showJumpToPageInput: [2, \"showJumpToPageInput\", \"showJumpToPageInput\", booleanAttribute],\n      showFirstLastIcon: [2, \"showFirstLastIcon\", \"showFirstLastIcon\", booleanAttribute],\n      showPageLinks: [2, \"showPageLinks\", \"showPageLinks\", booleanAttribute],\n      defaultSortOrder: [2, \"defaultSortOrder\", \"defaultSortOrder\", numberAttribute],\n      sortMode: \"sortMode\",\n      resetPageOnSort: [2, \"resetPageOnSort\", \"resetPageOnSort\", booleanAttribute],\n      selectionMode: \"selectionMode\",\n      selectionPageOnly: [2, \"selectionPageOnly\", \"selectionPageOnly\", booleanAttribute],\n      contextMenuSelection: \"contextMenuSelection\",\n      contextMenuSelectionMode: \"contextMenuSelectionMode\",\n      dataKey: \"dataKey\",\n      metaKeySelection: [2, \"metaKeySelection\", \"metaKeySelection\", booleanAttribute],\n      rowSelectable: \"rowSelectable\",\n      rowTrackBy: \"rowTrackBy\",\n      lazy: [2, \"lazy\", \"lazy\", booleanAttribute],\n      lazyLoadOnInit: [2, \"lazyLoadOnInit\", \"lazyLoadOnInit\", booleanAttribute],\n      compareSelectionBy: \"compareSelectionBy\",\n      csvSeparator: \"csvSeparator\",\n      exportFilename: \"exportFilename\",\n      filters: \"filters\",\n      globalFilterFields: \"globalFilterFields\",\n      filterDelay: [2, \"filterDelay\", \"filterDelay\", numberAttribute],\n      filterLocale: \"filterLocale\",\n      expandedRowKeys: \"expandedRowKeys\",\n      editingRowKeys: \"editingRowKeys\",\n      rowExpandMode: \"rowExpandMode\",\n      scrollable: [2, \"scrollable\", \"scrollable\", booleanAttribute],\n      scrollDirection: \"scrollDirection\",\n      rowGroupMode: \"rowGroupMode\",\n      scrollHeight: \"scrollHeight\",\n      virtualScroll: [2, \"virtualScroll\", \"virtualScroll\", booleanAttribute],\n      virtualScrollItemSize: [2, \"virtualScrollItemSize\", \"virtualScrollItemSize\", numberAttribute],\n      virtualScrollOptions: \"virtualScrollOptions\",\n      virtualScrollDelay: [2, \"virtualScrollDelay\", \"virtualScrollDelay\", numberAttribute],\n      frozenWidth: \"frozenWidth\",\n      responsive: \"responsive\",\n      contextMenu: \"contextMenu\",\n      resizableColumns: [2, \"resizableColumns\", \"resizableColumns\", booleanAttribute],\n      columnResizeMode: \"columnResizeMode\",\n      reorderableColumns: [2, \"reorderableColumns\", \"reorderableColumns\", booleanAttribute],\n      loading: [2, \"loading\", \"loading\", booleanAttribute],\n      loadingIcon: \"loadingIcon\",\n      showLoader: [2, \"showLoader\", \"showLoader\", booleanAttribute],\n      rowHover: [2, \"rowHover\", \"rowHover\", booleanAttribute],\n      customSort: [2, \"customSort\", \"customSort\", booleanAttribute],\n      showInitialSortBadge: [2, \"showInitialSortBadge\", \"showInitialSortBadge\", booleanAttribute],\n      autoLayout: [2, \"autoLayout\", \"autoLayout\", booleanAttribute],\n      exportFunction: \"exportFunction\",\n      exportHeader: \"exportHeader\",\n      stateKey: \"stateKey\",\n      stateStorage: \"stateStorage\",\n      editMode: \"editMode\",\n      groupRowsBy: \"groupRowsBy\",\n      size: \"size\",\n      showGridlines: [2, \"showGridlines\", \"showGridlines\", booleanAttribute],\n      stripedRows: [2, \"stripedRows\", \"stripedRows\", booleanAttribute],\n      groupRowsByOrder: [2, \"groupRowsByOrder\", \"groupRowsByOrder\", numberAttribute],\n      responsiveLayout: \"responsiveLayout\",\n      breakpoint: \"breakpoint\",\n      paginatorLocale: \"paginatorLocale\",\n      value: \"value\",\n      columns: \"columns\",\n      first: \"first\",\n      rows: \"rows\",\n      totalRecords: \"totalRecords\",\n      sortField: \"sortField\",\n      sortOrder: \"sortOrder\",\n      multiSortMeta: \"multiSortMeta\",\n      selection: \"selection\",\n      virtualRowHeight: \"virtualRowHeight\",\n      selectAll: \"selectAll\"\n    },\n    outputs: {\n      contextMenuSelectionChange: \"contextMenuSelectionChange\",\n      selectAllChange: \"selectAllChange\",\n      selectionChange: \"selectionChange\",\n      onRowSelect: \"onRowSelect\",\n      onRowUnselect: \"onRowUnselect\",\n      onPage: \"onPage\",\n      onSort: \"onSort\",\n      onFilter: \"onFilter\",\n      onLazyLoad: \"onLazyLoad\",\n      onRowExpand: \"onRowExpand\",\n      onRowCollapse: \"onRowCollapse\",\n      onContextMenuSelect: \"onContextMenuSelect\",\n      onColResize: \"onColResize\",\n      onColReorder: \"onColReorder\",\n      onRowReorder: \"onRowReorder\",\n      onEditInit: \"onEditInit\",\n      onEditComplete: \"onEditComplete\",\n      onEditCancel: \"onEditCancel\",\n      onHeaderCheckboxToggle: \"onHeaderCheckboxToggle\",\n      sortFunction: \"sortFunction\",\n      firstChange: \"firstChange\",\n      rowsChange: \"rowsChange\",\n      onStateSave: \"onStateSave\",\n      onStateRestore: \"onStateRestore\"\n    },\n    features: [i0.ɵɵProvidersFeature([TableService, TableStyle]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 16,\n    vars: 17,\n    consts: [[\"container\", \"\"], [\"wrapper\", \"\"], [\"buildInTable\", \"\"], [\"scroller\", \"\"], [\"content\", \"\"], [\"table\", \"\"], [\"thead\", \"\"], [\"tfoot\", \"\"], [\"resizeHelper\", \"\"], [\"reorderIndicatorUp\", \"\"], [\"reorderIndicatorDown\", \"\"], [3, \"ngStyle\", \"ngClass\"], [3, \"ngClass\", 4, \"ngIf\"], [3, \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showJumpToPageInput\", \"showPageLinks\", \"styleClass\", \"locale\", \"onPageChange\", 4, \"ngIf\"], [3, \"ngClass\", \"ngStyle\"], [3, \"items\", \"columns\", \"style\", \"scrollHeight\", \"itemSize\", \"step\", \"delay\", \"inline\", \"lazy\", \"loaderDisabled\", \"showSpacer\", \"showLoader\", \"options\", \"autoSize\", \"onLazyLoad\", 4, \"ngIf\"], [4, \"ngIf\"], [\"style\", \"display:none\", 3, \"ngClass\", 4, \"ngIf\"], [\"style\", \"display: none;\", 3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"], [3, \"class\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\", 4, \"ngIf\"], [3, \"spin\", \"styleClass\"], [4, \"ngTemplateOutlet\"], [3, \"onPageChange\", \"rows\", \"first\", \"totalRecords\", \"pageLinkSize\", \"alwaysShow\", \"rowsPerPageOptions\", \"templateLeft\", \"templateRight\", \"dropdownAppendTo\", \"dropdownScrollHeight\", \"currentPageReportTemplate\", \"showFirstLastIcon\", \"dropdownItemTemplate\", \"showCurrentPageReport\", \"showJumpToPageDropdown\", \"showJumpToPageInput\", \"showPageLinks\", \"styleClass\", \"locale\"], [\"pTemplate\", \"dropdownicon\"], [\"pTemplate\", \"firstpagelinkicon\"], [\"pTemplate\", \"previouspagelinkicon\"], [\"pTemplate\", \"lastpagelinkicon\"], [\"pTemplate\", \"nextpagelinkicon\"], [3, \"onLazyLoad\", \"items\", \"columns\", \"scrollHeight\", \"itemSize\", \"step\", \"delay\", \"inline\", \"lazy\", \"loaderDisabled\", \"showSpacer\", \"showLoader\", \"options\", \"autoSize\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"role\", \"table\", 3, \"ngClass\"], [\"role\", \"rowgroup\", 3, \"ngClass\", \"ngStyle\"], [\"role\", \"rowgroup\", 3, \"ngClass\", \"value\", \"frozenRows\", \"pTableBody\", \"pTableBodyTemplate\", \"frozen\", 4, \"ngIf\"], [\"role\", \"rowgroup\", 3, \"ngClass\", \"value\", \"pTableBody\", \"pTableBodyTemplate\", \"scrollerOptions\"], [\"role\", \"rowgroup\", 3, \"style\", \"ngClass\", 4, \"ngIf\"], [\"role\", \"rowgroup\", 3, \"ngClass\", 4, \"ngIf\"], [\"role\", \"rowgroup\", 3, \"ngClass\", \"value\", \"frozenRows\", \"pTableBody\", \"pTableBodyTemplate\", \"frozen\"], [\"role\", \"rowgroup\", 3, \"ngClass\"], [2, \"display\", \"none\", 3, \"ngClass\"]],\n    template: function Table_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 11, 0);\n        i0.ɵɵtemplate(2, Table_div_2_Template, 3, 3, \"div\", 12)(3, Table_div_3_Template, 2, 2, \"div\", 12)(4, Table_p_paginator_4_Template, 6, 24, \"p-paginator\", 13);\n        i0.ɵɵelementStart(5, \"div\", 14, 1);\n        i0.ɵɵtemplate(7, Table_p_scroller_7_Template, 4, 17, \"p-scroller\", 15)(8, Table_ng_container_8_Template, 2, 7, \"ng-container\", 16)(9, Table_ng_template_9_Template, 10, 26, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(11, Table_p_paginator_11_Template, 6, 24, \"p-paginator\", 13)(12, Table_div_12_Template, 2, 2, \"div\", 12)(13, Table_div_13_Template, 2, 1, \"div\", 17)(14, Table_span_14_Template, 4, 3, \"span\", 18)(15, Table_span_15_Template, 4, 3, \"span\", 18);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", ctx.cx(\"root\"));\n        i0.ɵɵattribute(\"id\", ctx.id);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading && ctx.showLoader);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.captionTemplate || ctx._captionTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"top\" || ctx.paginatorPosition == \"both\"));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngClass\", ctx.cx(\"tableContainer\"))(\"ngStyle\", ctx.sx(\"tableContainer\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.virtualScroll);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.virtualScroll);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.paginator && (ctx.paginatorPosition === \"bottom\" || ctx.paginatorPosition == \"both\"));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.summaryTemplate || ctx._summaryTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.resizableColumns);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.reorderableColumns);\n      }\n    },\n    dependencies: () => [i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, i2.Paginator, i3.PrimeTemplate, i4.Scroller, ArrowDownIcon, ArrowUpIcon, SpinnerIcon, TableBody],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Table, [{\n    type: Component,\n    args: [{\n      selector: 'p-table',\n      template: `\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" [ngClass]=\"cx('root')\" [attr.id]=\"id\">\n            <div [ngClass]=\"cx('mask')\" *ngIf=\"loading && showLoader\">\n                <i *ngIf=\"loadingIcon\" [class]=\"'p-datatable-loading-icon ' + loadingIcon\"></i>\n                <ng-container *ngIf=\"!loadingIcon\">\n                    <SpinnerIcon *ngIf=\"!loadingIconTemplate && !_loadingIconTemplate\" [spin]=\"true\" [styleClass]=\"cx('loadingIcon')\" />\n                    <span *ngIf=\"loadingIconTemplate || _loadingIconTemplate\" [ngClass]=\"cx('loadingIcon')\">\n                        <ng-template *ngTemplateOutlet=\"loadingIconTemplate || _loadingIconTemplate\"></ng-template>\n                    </span>\n                </ng-container>\n            </div>\n            <div *ngIf=\"captionTemplate || _captionTemplate\" [ngClass]=\"cx('header')\">\n                <ng-container *ngTemplateOutlet=\"captionTemplate || _captionTemplate\"></ng-container>\n            </div>\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate || _paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showJumpToPageInput]=\"showJumpToPageInput\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"cx('pcPaginator') + ' ' + paginatorStyleClass && paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"dropdownicon\" *ngIf=\"paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div #wrapper [ngClass]=\"cx('tableContainer')\" [ngStyle]=\"sx('tableContainer')\">\n                <p-scroller\n                    #scroller\n                    *ngIf=\"virtualScroll\"\n                    [items]=\"processedData\"\n                    [columns]=\"columns\"\n                    [style]=\"{\n                        height: scrollHeight !== 'flex' ? scrollHeight : undefined\n                    }\"\n                    [scrollHeight]=\"scrollHeight !== 'flex' ? undefined : '100%'\"\n                    [itemSize]=\"virtualScrollItemSize || _virtualRowHeight\"\n                    [step]=\"rows\"\n                    [delay]=\"lazy ? virtualScrollDelay : 0\"\n                    [inline]=\"true\"\n                    [lazy]=\"lazy\"\n                    (onLazyLoad)=\"onLazyItemLoad($event)\"\n                    [loaderDisabled]=\"true\"\n                    [showSpacer]=\"false\"\n                    [showLoader]=\"loadingBodyTemplate || _loadingBodyTemplate\"\n                    [options]=\"virtualScrollOptions\"\n                    [autoSize]=\"true\"\n                >\n                    <ng-template #content let-items let-scrollerOptions=\"options\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                buildInTable;\n                                context: {\n                                    $implicit: items,\n                                    options: scrollerOptions\n                                }\n                            \"\n                        ></ng-container>\n                    </ng-template>\n                </p-scroller>\n                <ng-container *ngIf=\"!virtualScroll\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            buildInTable;\n                            context: {\n                                $implicit: processedData,\n                                options: { columns }\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n\n                <ng-template #buildInTable let-items let-scrollerOptions=\"options\">\n                    <table #table role=\"table\" [ngClass]=\"cx('table')\" [class]=\"tableStyleClass\" [style]=\"tableStyle\" [attr.id]=\"id + '-table'\">\n                        <ng-container *ngTemplateOutlet=\"colGroupTemplate || _colGroupTemplate; context: { $implicit: scrollerOptions.columns }\"></ng-container>\n                        <thead role=\"rowgroup\" #thead [ngClass]=\"cx('thead')\" [ngStyle]=\"sx('thead')\">\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    headerGroupedTemplate || headerTemplate || _headerTemplate;\n                                    context: {\n                                        $implicit: scrollerOptions.columns\n                                    }\n                                \"\n                            ></ng-container>\n                        </thead>\n                        <tbody\n                            role=\"rowgroup\"\n                            [ngClass]=\"cx('tbody')\"\n                            *ngIf=\"frozenValue || frozenBodyTemplate || _frozenBodyTemplate\"\n                            [value]=\"frozenValue\"\n                            [frozenRows]=\"true\"\n                            [pTableBody]=\"scrollerOptions.columns\"\n                            [pTableBodyTemplate]=\"frozenBodyTemplate || _frozenBodyTemplate\"\n                            [frozen]=\"true\"\n                        ></tbody>\n                        <tbody\n                            role=\"rowgroup\"\n                            [ngClass]=\"cx('tbody', scrollerOptions.contentStyleClass)\"\n                            [style]=\"scrollerOptions.contentStyle\"\n                            [value]=\"dataToRender(scrollerOptions.rows)\"\n                            [pTableBody]=\"scrollerOptions.columns\"\n                            [pTableBodyTemplate]=\"bodyTemplate || _bodyTemplate\"\n                            [scrollerOptions]=\"scrollerOptions\"\n                        ></tbody>\n                        <tbody\n                            role=\"rowgroup\"\n                            *ngIf=\"scrollerOptions.spacerStyle\"\n                            [style]=\"'height: calc(' + scrollerOptions.spacerStyle.height + ' - ' + scrollerOptions.rows.length * scrollerOptions.itemSize + 'px);'\"\n                            [ngClass]=\"cx('virtualScrollerSpacer')\"\n                        ></tbody>\n                        <tfoot role=\"rowgroup\" *ngIf=\"footerGroupedTemplate || footerTemplate || _footerTemplate || _footerGroupedTemplate\" #tfoot [ngClass]=\"cx('footer')\">\n                            <ng-container\n                                *ngTemplateOutlet=\"\n                                    footerGroupedTemplate || footerTemplate || _footerTemplate || _footerGroupedTemplate;\n                                    context: {\n                                        $implicit: scrollerOptions.columns\n                                    }\n                                \"\n                            ></ng-container>\n                        </tfoot>\n                    </table>\n                </ng-template>\n            </div>\n\n            <p-paginator\n                [rows]=\"rows\"\n                [first]=\"first\"\n                [totalRecords]=\"totalRecords\"\n                [pageLinkSize]=\"pageLinks\"\n                [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"onPageChange($event)\"\n                [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition == 'both')\"\n                [templateLeft]=\"paginatorLeftTemplate || _paginatorLeftTemplate\"\n                [templateRight]=\"paginatorRightTemplate || _paginatorRightTemplate\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                [showFirstLastIcon]=\"showFirstLastIcon\"\n                [dropdownItemTemplate]=\"paginatorDropdownItemTemplate || _paginatorDropdownItemTemplate\"\n                [showCurrentPageReport]=\"showCurrentPageReport\"\n                [showJumpToPageDropdown]=\"showJumpToPageDropdown\"\n                [showJumpToPageInput]=\"showJumpToPageInput\"\n                [showPageLinks]=\"showPageLinks\"\n                [styleClass]=\"cx('pcPaginator') + ' ' + paginatorStyleClass && paginatorStyleClass\"\n                [locale]=\"paginatorLocale\"\n            >\n                <ng-template pTemplate=\"dropdownicon\" *ngIf=\"paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorDropdownIconTemplate || _paginatorDropdownIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"firstpagelinkicon\" *ngIf=\"paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorFirstPageLinkIconTemplate || _paginatorFirstPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"previouspagelinkicon\" *ngIf=\"paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorPreviousPageLinkIconTemplate || _paginatorPreviousPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"lastpagelinkicon\" *ngIf=\"paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorLastPageLinkIconTemplate || _paginatorLastPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n\n                <ng-template pTemplate=\"nextpagelinkicon\" *ngIf=\"paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate\">\n                    <ng-container *ngTemplateOutlet=\"paginatorNextPageLinkIconTemplate || _paginatorNextPageLinkIconTemplate\"></ng-container>\n                </ng-template>\n            </p-paginator>\n\n            <div *ngIf=\"summaryTemplate || _summaryTemplate\" [ngClass]=\"cx('footer')\">\n                <ng-container *ngTemplateOutlet=\"summaryTemplate || _summaryTemplate\"></ng-container>\n            </div>\n\n            <div #resizeHelper [ngClass]=\"cx('columnResizeIndicator')\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\n            <span #reorderIndicatorUp [ngClass]=\"cx('rowReorderIndicatorUp')\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowDownIcon *ngIf=\"!reorderIndicatorUpIconTemplate && !_reorderIndicatorUpIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorUpIconTemplate || _reorderIndicatorUpIconTemplate\"></ng-template>\n            </span>\n            <span #reorderIndicatorDown [ngClass]=\"cx('rowReorderIndicatorDown')\" style=\"display: none;\" *ngIf=\"reorderableColumns\">\n                <ArrowUpIcon *ngIf=\"!reorderIndicatorDownIconTemplate && !_reorderIndicatorDownIconTemplate\" />\n                <ng-template *ngTemplateOutlet=\"reorderIndicatorDownIconTemplate || _reorderIndicatorDownIconTemplate\"></ng-template>\n            </span>\n        </div>\n    `,\n      providers: [TableService, TableStyle],\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    frozenColumns: [{\n      type: Input\n    }],\n    frozenValue: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    tableStyle: [{\n      type: Input\n    }],\n    tableStyleClass: [{\n      type: Input\n    }],\n    paginator: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    pageLinks: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    rowsPerPageOptions: [{\n      type: Input\n    }],\n    alwaysShowPaginator: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    paginatorPosition: [{\n      type: Input\n    }],\n    paginatorStyleClass: [{\n      type: Input\n    }],\n    paginatorDropdownAppendTo: [{\n      type: Input\n    }],\n    paginatorDropdownScrollHeight: [{\n      type: Input\n    }],\n    currentPageReportTemplate: [{\n      type: Input\n    }],\n    showCurrentPageReport: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showJumpToPageDropdown: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showJumpToPageInput: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showFirstLastIcon: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showPageLinks: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    defaultSortOrder: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    sortMode: [{\n      type: Input\n    }],\n    resetPageOnSort: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    selectionMode: [{\n      type: Input\n    }],\n    selectionPageOnly: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    contextMenuSelection: [{\n      type: Input\n    }],\n    contextMenuSelectionChange: [{\n      type: Output\n    }],\n    contextMenuSelectionMode: [{\n      type: Input\n    }],\n    dataKey: [{\n      type: Input\n    }],\n    metaKeySelection: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    rowSelectable: [{\n      type: Input\n    }],\n    rowTrackBy: [{\n      type: Input\n    }],\n    lazy: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    lazyLoadOnInit: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    compareSelectionBy: [{\n      type: Input\n    }],\n    csvSeparator: [{\n      type: Input\n    }],\n    exportFilename: [{\n      type: Input\n    }],\n    filters: [{\n      type: Input\n    }],\n    globalFilterFields: [{\n      type: Input\n    }],\n    filterDelay: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    filterLocale: [{\n      type: Input\n    }],\n    expandedRowKeys: [{\n      type: Input\n    }],\n    editingRowKeys: [{\n      type: Input\n    }],\n    rowExpandMode: [{\n      type: Input\n    }],\n    scrollable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    scrollDirection: [{\n      type: Input\n    }],\n    rowGroupMode: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: Input\n    }],\n    virtualScroll: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    virtualScrollItemSize: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    virtualScrollOptions: [{\n      type: Input\n    }],\n    virtualScrollDelay: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    frozenWidth: [{\n      type: Input\n    }],\n    responsive: [{\n      type: Input\n    }],\n    contextMenu: [{\n      type: Input\n    }],\n    resizableColumns: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    columnResizeMode: [{\n      type: Input\n    }],\n    reorderableColumns: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    loading: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    loadingIcon: [{\n      type: Input\n    }],\n    showLoader: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    rowHover: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    customSort: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showInitialSortBadge: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    autoLayout: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    exportFunction: [{\n      type: Input\n    }],\n    exportHeader: [{\n      type: Input\n    }],\n    stateKey: [{\n      type: Input\n    }],\n    stateStorage: [{\n      type: Input\n    }],\n    editMode: [{\n      type: Input\n    }],\n    groupRowsBy: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    showGridlines: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    stripedRows: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    groupRowsByOrder: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    responsiveLayout: [{\n      type: Input\n    }],\n    breakpoint: [{\n      type: Input\n    }],\n    paginatorLocale: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    first: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    totalRecords: [{\n      type: Input\n    }],\n    sortField: [{\n      type: Input\n    }],\n    sortOrder: [{\n      type: Input\n    }],\n    multiSortMeta: [{\n      type: Input\n    }],\n    selection: [{\n      type: Input\n    }],\n    virtualRowHeight: [{\n      type: Input\n    }],\n    selectAll: [{\n      type: Input\n    }],\n    selectAllChange: [{\n      type: Output\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    onRowSelect: [{\n      type: Output\n    }],\n    onRowUnselect: [{\n      type: Output\n    }],\n    onPage: [{\n      type: Output\n    }],\n    onSort: [{\n      type: Output\n    }],\n    onFilter: [{\n      type: Output\n    }],\n    onLazyLoad: [{\n      type: Output\n    }],\n    onRowExpand: [{\n      type: Output\n    }],\n    onRowCollapse: [{\n      type: Output\n    }],\n    onContextMenuSelect: [{\n      type: Output\n    }],\n    onColResize: [{\n      type: Output\n    }],\n    onColReorder: [{\n      type: Output\n    }],\n    onRowReorder: [{\n      type: Output\n    }],\n    onEditInit: [{\n      type: Output\n    }],\n    onEditComplete: [{\n      type: Output\n    }],\n    onEditCancel: [{\n      type: Output\n    }],\n    onHeaderCheckboxToggle: [{\n      type: Output\n    }],\n    sortFunction: [{\n      type: Output\n    }],\n    firstChange: [{\n      type: Output\n    }],\n    rowsChange: [{\n      type: Output\n    }],\n    onStateSave: [{\n      type: Output\n    }],\n    onStateRestore: [{\n      type: Output\n    }],\n    containerViewChild: [{\n      type: ViewChild,\n      args: ['container']\n    }],\n    resizeHelperViewChild: [{\n      type: ViewChild,\n      args: ['resizeHelper']\n    }],\n    reorderIndicatorUpViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorUp']\n    }],\n    reorderIndicatorDownViewChild: [{\n      type: ViewChild,\n      args: ['reorderIndicatorDown']\n    }],\n    wrapperViewChild: [{\n      type: ViewChild,\n      args: ['wrapper']\n    }],\n    tableViewChild: [{\n      type: ViewChild,\n      args: ['table']\n    }],\n    tableHeaderViewChild: [{\n      type: ViewChild,\n      args: ['thead']\n    }],\n    tableFooterViewChild: [{\n      type: ViewChild,\n      args: ['tfoot']\n    }],\n    scroller: [{\n      type: ViewChild,\n      args: ['scroller']\n    }],\n    _templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    _headerTemplate: [{\n      type: ContentChild,\n      args: ['header', {\n        descendants: false\n      }]\n    }],\n    _headerGroupedTemplate: [{\n      type: ContentChild,\n      args: ['headergrouped', {\n        descendants: false\n      }]\n    }],\n    _bodyTemplate: [{\n      type: ContentChild,\n      args: ['body', {\n        descendants: false\n      }]\n    }],\n    _loadingBodyTemplate: [{\n      type: ContentChild,\n      args: ['loadingbody', {\n        descendants: false\n      }]\n    }],\n    _captionTemplate: [{\n      type: ContentChild,\n      args: ['caption', {\n        descendants: false\n      }]\n    }],\n    _footerTemplate: [{\n      type: ContentChild,\n      args: ['footer', {\n        descendants: false\n      }]\n    }],\n    _footerGroupedTemplate: [{\n      type: ContentChild,\n      args: ['footergrouped', {\n        descendants: false\n      }]\n    }],\n    _summaryTemplate: [{\n      type: ContentChild,\n      args: ['summary', {\n        descendants: false\n      }]\n    }],\n    _colGroupTemplate: [{\n      type: ContentChild,\n      args: ['colgroup', {\n        descendants: false\n      }]\n    }],\n    _expandedRowTemplate: [{\n      type: ContentChild,\n      args: ['expandedrow', {\n        descendants: false\n      }]\n    }],\n    _groupHeaderTemplate: [{\n      type: ContentChild,\n      args: ['groupheader', {\n        descendants: false\n      }]\n    }],\n    _groupFooterTemplate: [{\n      type: ContentChild,\n      args: ['groupfooter', {\n        descendants: false\n      }]\n    }],\n    _frozenExpandedRowTemplate: [{\n      type: ContentChild,\n      args: ['frozenexpandedrow', {\n        descendants: false\n      }]\n    }],\n    _frozenHeaderTemplate: [{\n      type: ContentChild,\n      args: ['frozenheader', {\n        descendants: false\n      }]\n    }],\n    _frozenBodyTemplate: [{\n      type: ContentChild,\n      args: ['frozenbody', {\n        descendants: false\n      }]\n    }],\n    _frozenFooterTemplate: [{\n      type: ContentChild,\n      args: ['frozenfooter', {\n        descendants: false\n      }]\n    }],\n    _frozenColGroupTemplate: [{\n      type: ContentChild,\n      args: ['frozencolgroup', {\n        descendants: false\n      }]\n    }],\n    _emptyMessageTemplate: [{\n      type: ContentChild,\n      args: ['emptymessage', {\n        descendants: false\n      }]\n    }],\n    _paginatorLeftTemplate: [{\n      type: ContentChild,\n      args: ['paginatorleft', {\n        descendants: false\n      }]\n    }],\n    _paginatorRightTemplate: [{\n      type: ContentChild,\n      args: ['paginatorright', {\n        descendants: false\n      }]\n    }],\n    _paginatorDropdownItemTemplate: [{\n      type: ContentChild,\n      args: ['paginatordropdownitem', {\n        descendants: false\n      }]\n    }],\n    _loadingIconTemplate: [{\n      type: ContentChild,\n      args: ['loadingicon', {\n        descendants: false\n      }]\n    }],\n    _reorderIndicatorUpIconTemplate: [{\n      type: ContentChild,\n      args: ['reorderindicatorupicon', {\n        descendants: false\n      }]\n    }],\n    _reorderIndicatorDownIconTemplate: [{\n      type: ContentChild,\n      args: ['reorderindicatordownicon', {\n        descendants: false\n      }]\n    }],\n    _sortIconTemplate: [{\n      type: ContentChild,\n      args: ['sorticon', {\n        descendants: false\n      }]\n    }],\n    _checkboxIconTemplate: [{\n      type: ContentChild,\n      args: ['checkboxicon', {\n        descendants: false\n      }]\n    }],\n    _headerCheckboxIconTemplate: [{\n      type: ContentChild,\n      args: ['headercheckboxicon', {\n        descendants: false\n      }]\n    }],\n    _paginatorDropdownIconTemplate: [{\n      type: ContentChild,\n      args: ['paginatordropdownicon', {\n        descendants: false\n      }]\n    }],\n    _paginatorFirstPageLinkIconTemplate: [{\n      type: ContentChild,\n      args: ['paginatorfirstpagelinkicon', {\n        descendants: false\n      }]\n    }],\n    _paginatorLastPageLinkIconTemplate: [{\n      type: ContentChild,\n      args: ['paginatorlastpagelinkicon', {\n        descendants: false\n      }]\n    }],\n    _paginatorPreviousPageLinkIconTemplate: [{\n      type: ContentChild,\n      args: ['paginatorpreviouspagelinkicon', {\n        descendants: false\n      }]\n    }],\n    _paginatorNextPageLinkIconTemplate: [{\n      type: ContentChild,\n      args: ['paginatornextpagelinkicon', {\n        descendants: false\n      }]\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(Table, {\n    className: \"Table\"\n  });\n})();\nclass TableBody {\n  dt;\n  tableService;\n  cd;\n  el;\n  columns;\n  template;\n  get value() {\n    return this._value;\n  }\n  set value(val) {\n    this._value = val;\n    if (this.frozenRows) {\n      this.updateFrozenRowStickyPosition();\n    }\n    if (this.dt.scrollable && this.dt.rowGroupMode === 'subheader') {\n      this.updateFrozenRowGroupHeaderStickyPosition();\n    }\n  }\n  frozen;\n  frozenRows;\n  scrollerOptions;\n  subscription;\n  _value;\n  ngAfterViewInit() {\n    if (this.frozenRows) {\n      this.updateFrozenRowStickyPosition();\n    }\n    if (this.dt.scrollable && this.dt.rowGroupMode === 'subheader') {\n      this.updateFrozenRowGroupHeaderStickyPosition();\n    }\n  }\n  constructor(dt, tableService, cd, el) {\n    this.dt = dt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.el = el;\n    this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n      if (this.dt.virtualScroll) {\n        this.cd.detectChanges();\n      }\n    });\n  }\n  shouldRenderRowGroupHeader(value, rowData, i) {\n    let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);\n    let prevRowData = value[i - (1 + this.dt._first)];\n    if (prevRowData) {\n      let previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, this.dt.groupRowsBy);\n      return currentRowFieldData !== previousRowFieldData;\n    } else {\n      return true;\n    }\n  }\n  shouldRenderRowGroupFooter(value, rowData, i) {\n    let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);\n    let nextRowData = value[i + (1 + this.dt._first)];\n    if (nextRowData) {\n      let nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, this.dt.groupRowsBy);\n      return currentRowFieldData !== nextRowFieldData;\n    } else {\n      return true;\n    }\n  }\n  shouldRenderRowspan(value, rowData, i) {\n    let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);\n    let prevRowData = value[i - 1];\n    if (prevRowData) {\n      let previousRowFieldData = ObjectUtils.resolveFieldData(prevRowData, this.dt.groupRowsBy);\n      return currentRowFieldData !== previousRowFieldData;\n    } else {\n      return true;\n    }\n  }\n  calculateRowGroupSize(value, rowData, index) {\n    let currentRowFieldData = ObjectUtils.resolveFieldData(rowData, this.dt.groupRowsBy);\n    let nextRowFieldData = currentRowFieldData;\n    let groupRowSpan = 0;\n    while (currentRowFieldData === nextRowFieldData) {\n      groupRowSpan++;\n      let nextRowData = value[++index];\n      if (nextRowData) {\n        nextRowFieldData = ObjectUtils.resolveFieldData(nextRowData, this.dt.groupRowsBy);\n      } else {\n        break;\n      }\n    }\n    return groupRowSpan === 1 ? null : groupRowSpan;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  updateFrozenRowStickyPosition() {\n    this.el.nativeElement.style.top = DomHandler.getOuterHeight(this.el.nativeElement.previousElementSibling) + 'px';\n  }\n  updateFrozenRowGroupHeaderStickyPosition() {\n    if (this.el.nativeElement.previousElementSibling) {\n      let tableHeaderHeight = DomHandler.getOuterHeight(this.el.nativeElement.previousElementSibling);\n      this.dt.rowGroupHeaderStyleObject.top = tableHeaderHeight + 'px';\n    }\n  }\n  getScrollerOption(option, options) {\n    if (this.dt.virtualScroll) {\n      options = options || this.scrollerOptions;\n      return options ? options[option] : null;\n    }\n    return null;\n  }\n  getRowIndex(rowIndex) {\n    const index = this.dt.paginator ? this.dt.first + rowIndex : rowIndex;\n    const getItemOptions = this.getScrollerOption('getItemOptions');\n    return getItemOptions ? getItemOptions(index).index : index;\n  }\n  static ɵfac = function TableBody_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TableBody)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(TableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TableBody,\n    selectors: [[\"\", \"pTableBody\", \"\"]],\n    inputs: {\n      columns: [0, \"pTableBody\", \"columns\"],\n      template: [0, \"pTableBodyTemplate\", \"template\"],\n      value: \"value\",\n      frozen: [2, \"frozen\", \"frozen\", booleanAttribute],\n      frozenRows: [2, \"frozenRows\", \"frozenRows\", booleanAttribute],\n      scrollerOptions: \"scrollerOptions\"\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    attrs: _c45,\n    decls: 5,\n    vars: 5,\n    consts: [[4, \"ngIf\"], [\"ngFor\", \"\", 3, \"ngForOf\", \"ngForTrackBy\"], [\"role\", \"row\", 4, \"ngIf\"], [\"role\", \"row\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TableBody_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TableBody_ng_container_0_Template, 2, 2, \"ng-container\", 0)(1, TableBody_ng_container_1_Template, 2, 2, \"ng-container\", 0)(2, TableBody_ng_container_2_Template, 2, 2, \"ng-container\", 0)(3, TableBody_ng_container_3_Template, 2, 5, \"ng-container\", 0)(4, TableBody_ng_container_4_Template, 2, 5, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.dt.expandedRowTemplate && !ctx.dt._expandedRowTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", (ctx.dt.expandedRowTemplate || ctx.dt._expandedRowTemplate) && !(ctx.frozen && (ctx.dt.frozenExpandedRowTemplate || ctx.dt._frozenExpandedRowTemplate)));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", (ctx.dt.frozenExpandedRowTemplate || ctx.dt._frozenExpandedRowTemplate) && ctx.frozen);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.dt.loading);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.dt.isEmpty() && !ctx.dt.loading);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TableBody, [{\n    type: Component,\n    args: [{\n      selector: '[pTableBody]',\n      template: `\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && !dt._expandedRowTemplate\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"value\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngIf=\"(dt.groupHeaderTemplate || dt._groupHeaderTemplate) && !dt.virtualScroll && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupHeader(value, rowData, rowIndex)\" role=\"row\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            dt.groupHeaderTemplate || dt._groupHeaderTemplate;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                                frozen: frozen\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"dt.rowGroupMode !== 'rowspan'\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            rowData ? template : dt.loadingBodyTemplate || dt._loadingBodyTemplate;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                                frozen: frozen\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"dt.rowGroupMode === 'rowspan'\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            rowData ? template : dt.loadingBodyTemplate || dt._loadingBodyTemplate;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                                frozen: frozen,\n                                rowgroup: shouldRenderRowspan(value, rowData, rowIndex),\n                                rowspan: calculateRowGroupSize(value, rowData, rowIndex)\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"(dt.groupFooterTemplate || dt._groupFooterTemplate) && !dt.virtualScroll && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupFooter(value, rowData, rowIndex)\" role=\"row\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            dt.groupFooterTemplate || dt._groupFooterTemplate;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                                frozen: frozen\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"(dt.expandedRowTemplate || dt._expandedRowTemplate) && !(frozen && (dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate))\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"value\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container *ngIf=\"!(dt.groupHeaderTemplate && dt._groupHeaderTemplate)\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            template;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                expanded: dt.isRowExpanded(rowData),\n                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                                frozen: frozen\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"(dt.groupHeaderTemplate || dt._groupHeaderTemplate) && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupHeader(value, rowData, getRowIndex(rowIndex))\" role=\"row\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            dt.groupHeaderTemplate || dt._groupHeaderTemplate;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                expanded: dt.isRowExpanded(rowData),\n                                editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                                frozen: frozen\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            dt.expandedRowTemplate || dt._expandedRowTemplate;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                frozen: frozen\n                            }\n                        \"\n                    ></ng-container>\n                    <ng-container *ngIf=\"(dt.groupFooterTemplate || dt._groupFooterTemplate) && dt.rowGroupMode === 'subheader' && shouldRenderRowGroupFooter(value, rowData, getRowIndex(rowIndex))\" role=\"row\">\n                        <ng-container\n                            *ngTemplateOutlet=\"\n                                dt.groupFooterTemplate || dt._groupFooterTemplate;\n                                context: {\n                                    $implicit: rowData,\n                                    rowIndex: getRowIndex(rowIndex),\n                                    columns: columns,\n                                    expanded: dt.isRowExpanded(rowData),\n                                    editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                                    frozen: frozen\n                                }\n                            \"\n                        ></ng-container>\n                    </ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"(dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate) && frozen\">\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"value\" [ngForTrackBy]=\"dt.rowTrackBy\">\n                <ng-container\n                    *ngTemplateOutlet=\"\n                        template;\n                        context: {\n                            $implicit: rowData,\n                            rowIndex: getRowIndex(rowIndex),\n                            columns: columns,\n                            expanded: dt.isRowExpanded(rowData),\n                            editing: dt.editMode === 'row' && dt.isRowEditing(rowData),\n                            frozen: frozen\n                        }\n                    \"\n                ></ng-container>\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\n                    <ng-container\n                        *ngTemplateOutlet=\"\n                            dt.frozenExpandedRowTemplate || dt._frozenExpandedRowTemplate;\n                            context: {\n                                $implicit: rowData,\n                                rowIndex: getRowIndex(rowIndex),\n                                columns: columns,\n                                frozen: frozen\n                            }\n                        \"\n                    ></ng-container>\n                </ng-container>\n            </ng-template>\n        </ng-container>\n        <ng-container *ngIf=\"dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate || dt._loadingBodyTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate || dt._emptyMessageTemplate; context: { $implicit: columns, frozen: frozen }\"></ng-container>\n        </ng-container>\n    `,\n      changeDetection: ChangeDetectionStrategy.Default,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: TableService\n  }, {\n    type: i0.ChangeDetectorRef\n  }, {\n    type: i0.ElementRef\n  }], {\n    columns: [{\n      type: Input,\n      args: ['pTableBody']\n    }],\n    template: [{\n      type: Input,\n      args: ['pTableBodyTemplate']\n    }],\n    value: [{\n      type: Input\n    }],\n    frozen: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    frozenRows: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    scrollerOptions: [{\n      type: Input\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(TableBody, {\n    className: \"TableBody\"\n  });\n})();\nclass RowGroupHeader {\n  dt;\n  constructor(dt) {\n    this.dt = dt;\n  }\n  get getFrozenRowGroupHeaderStickyPosition() {\n    return this.dt.rowGroupHeaderStyleObject ? this.dt.rowGroupHeaderStyleObject.top : '';\n  }\n  static ɵfac = function RowGroupHeader_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RowGroupHeader)(i0.ɵɵdirectiveInject(Table));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: RowGroupHeader,\n    selectors: [[\"\", \"pRowGroupHeader\", \"\"]],\n    hostAttrs: [1, \"p-datatable-row-group-header\"],\n    hostVars: 2,\n    hostBindings: function RowGroupHeader_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"top\", ctx.getFrozenRowGroupHeaderStickyPosition);\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowGroupHeader, [{\n    type: Directive,\n    args: [{\n      selector: '[pRowGroupHeader]',\n      host: {\n        class: 'p-datatable-row-group-header',\n        '[style.top]': 'getFrozenRowGroupHeaderStickyPosition'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }], null);\n})();\nclass FrozenColumn {\n  el;\n  zone;\n  get frozen() {\n    return this._frozen;\n  }\n  set frozen(val) {\n    this._frozen = val;\n    Promise.resolve(null).then(() => this.updateStickyPosition());\n  }\n  alignFrozen = 'left';\n  constructor(el, zone) {\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        this.recalculateColumns();\n      }, 1000);\n    });\n  }\n  recalculateColumns() {\n    const siblings = DomHandler.siblings(this.el.nativeElement);\n    const index = DomHandler.index(this.el.nativeElement);\n    const time = (siblings.length - index + 1) * 50;\n    setTimeout(() => {\n      this.updateStickyPosition();\n    }, time);\n  }\n  _frozen = true;\n  updateStickyPosition() {\n    if (this._frozen) {\n      if (this.alignFrozen === 'right') {\n        let right = 0;\n        let next = this.el.nativeElement.nextElementSibling;\n        if (next) {\n          right = DomHandler.getOuterWidth(next) + (parseFloat(next.style.right) || 0);\n        }\n        this.el.nativeElement.style.right = right + 'px';\n      } else {\n        let left = 0;\n        let prev = this.el.nativeElement.previousElementSibling;\n        if (prev) {\n          left = DomHandler.getOuterWidth(prev) + (parseFloat(prev.style.left) || 0);\n        }\n        this.el.nativeElement.style.left = left + 'px';\n      }\n      const filterRow = this.el.nativeElement?.parentElement?.nextElementSibling;\n      if (filterRow) {\n        let index = DomHandler.index(this.el.nativeElement);\n        if (filterRow.children && filterRow.children[index]) {\n          filterRow.children[index].style.left = this.el.nativeElement.style.left;\n          filterRow.children[index].style.right = this.el.nativeElement.style.right;\n        }\n      }\n    }\n  }\n  static ɵfac = function FrozenColumn_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FrozenColumn)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FrozenColumn,\n    selectors: [[\"\", \"pFrozenColumn\", \"\"]],\n    hostVars: 4,\n    hostBindings: function FrozenColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"resize\", function FrozenColumn_resize_HostBindingHandler($event) {\n          return ctx.recalculateColumns($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-datatable-frozen-column\", ctx.frozen)(\"p-datatable-frozen-column-left\", ctx.alignFrozen === \"left\");\n      }\n    },\n    inputs: {\n      frozen: \"frozen\",\n      alignFrozen: \"alignFrozen\"\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FrozenColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[pFrozenColumn]',\n      host: {\n        '[class.p-datatable-frozen-column]': 'frozen',\n        '[class.p-datatable-frozen-column-left]': 'alignFrozen === \"left\"'\n      }\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    frozen: [{\n      type: Input\n    }],\n    alignFrozen: [{\n      type: Input\n    }],\n    recalculateColumns: [{\n      type: HostListener,\n      args: ['window:resize', ['$event']]\n    }]\n  });\n})();\nclass SortableColumn {\n  dt;\n  field;\n  pSortableColumnDisabled;\n  sorted;\n  sortOrder;\n  subscription;\n  constructor(dt) {\n    this.dt = dt;\n    if (this.isEnabled()) {\n      this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n        this.updateSortState();\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n  updateSortState() {\n    let sorted = false;\n    let sortOrder = 0;\n    if (this.dt.sortMode === 'single') {\n      sorted = this.dt.isSorted(this.field);\n      sortOrder = this.dt.sortOrder;\n    } else if (this.dt.sortMode === 'multiple') {\n      const sortMeta = this.dt.getSortMeta(this.field);\n      sorted = !!sortMeta;\n      sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n    this.sorted = sorted;\n    this.sortOrder = sorted ? sortOrder === 1 ? 'ascending' : 'descending' : 'none';\n  }\n  onClick(event) {\n    if (this.isEnabled() && !this.isFilterElement(event.target)) {\n      this.updateSortState();\n      this.dt.sort({\n        originalEvent: event,\n        field: this.field\n      });\n      DomHandler.clearSelection();\n    }\n  }\n  onEnterKey(event) {\n    this.onClick(event);\n    event.preventDefault();\n  }\n  isEnabled() {\n    return this.pSortableColumnDisabled !== true;\n  }\n  isFilterElement(element) {\n    return this.isFilterElementIconOrButton(element) || this.isFilterElementIconOrButton(element?.parentElement?.parentElement);\n  }\n  isFilterElementIconOrButton(element) {\n    return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function SortableColumn_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SortableColumn)(i0.ɵɵdirectiveInject(Table));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SortableColumn,\n    selectors: [[\"\", \"pSortableColumn\", \"\"]],\n    hostVars: 7,\n    hostBindings: function SortableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function SortableColumn_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown.space\", function SortableColumn_keydown_space_HostBindingHandler($event) {\n          return ctx.onEnterKey($event);\n        })(\"keydown.enter\", function SortableColumn_keydown_enter_HostBindingHandler($event) {\n          return ctx.onEnterKey($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? \"0\" : null)(\"role\", \"columnheader\")(\"aria-sort\", ctx.sortOrder);\n        i0.ɵɵclassProp(\"p-datatable-sortable-column\", ctx.isEnabled())(\"p-datatable-column-sorted\", ctx.sorted);\n      }\n    },\n    inputs: {\n      field: [0, \"pSortableColumn\", \"field\"],\n      pSortableColumnDisabled: [2, \"pSortableColumnDisabled\", \"pSortableColumnDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SortableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[pSortableColumn]',\n      host: {\n        '[class.p-datatable-sortable-column]': 'isEnabled()',\n        '[class.p-datatable-column-sorted]': 'sorted',\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n        '[attr.role]': '\"columnheader\"',\n        '[attr.aria-sort]': 'sortOrder'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }], {\n    field: [{\n      type: Input,\n      args: ['pSortableColumn']\n    }],\n    pSortableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKey: [{\n      type: HostListener,\n      args: ['keydown.space', ['$event']]\n    }, {\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }]\n  });\n})();\nclass SortIcon {\n  dt;\n  cd;\n  field;\n  subscription;\n  sortOrder;\n  constructor(dt, cd) {\n    this.dt = dt;\n    this.cd = cd;\n    this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\n      this.updateSortState();\n    });\n  }\n  ngOnInit() {\n    this.updateSortState();\n  }\n  onClick(event) {\n    event.preventDefault();\n  }\n  updateSortState() {\n    if (this.dt.sortMode === 'single') {\n      this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\n    } else if (this.dt.sortMode === 'multiple') {\n      let sortMeta = this.dt.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n    this.cd.markForCheck();\n  }\n  getMultiSortMetaIndex() {\n    let multiSortMeta = this.dt._multiSortMeta;\n    let index = -1;\n    if (multiSortMeta && this.dt.sortMode === 'multiple' && this.dt.showInitialSortBadge && multiSortMeta.length > 1) {\n      for (let i = 0; i < multiSortMeta.length; i++) {\n        let meta = multiSortMeta[i];\n        if (meta.field === this.field || meta.field === this.field) {\n          index = i;\n          break;\n        }\n      }\n    }\n    return index;\n  }\n  getBadgeValue() {\n    let index = this.getMultiSortMetaIndex();\n    return this.dt.groupRowsBy && index > -1 ? index : index + 1;\n  }\n  isMultiSorted() {\n    return this.dt.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function SortIcon_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SortIcon)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SortIcon,\n    selectors: [[\"p-sortIcon\"]],\n    inputs: {\n      field: \"field\"\n    },\n    decls: 3,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"class\", \"p-sortable-column-icon\", 4, \"ngIf\"], [\"class\", \"p-sortable-column-badge\", 4, \"ngIf\"], [3, \"styleClass\", 4, \"ngIf\"], [3, \"styleClass\"], [1, \"p-sortable-column-icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"p-sortable-column-badge\"]],\n    template: function SortIcon_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SortIcon_ng_container_0_Template, 4, 3, \"ng-container\", 0)(1, SortIcon_span_1_Template, 2, 4, \"span\", 1)(2, SortIcon_span_2_Template, 2, 1, \"span\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !(ctx.dt.sortIconTemplate && ctx.dt._sortIconTemplate));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.dt.sortIconTemplate || ctx.dt._sortIconTemplate);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.isMultiSorted());\n      }\n    },\n    dependencies: () => [i1.NgIf, i1.NgTemplateOutlet, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SortIcon, [{\n    type: Component,\n    args: [{\n      selector: 'p-sortIcon',\n      template: `\n        <ng-container *ngIf=\"!(dt.sortIconTemplate && dt._sortIconTemplate)\">\n            <SortAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 0\" />\n            <SortAmountUpAltIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === 1\" />\n            <SortAmountDownIcon [styleClass]=\"'p-sortable-column-icon'\" *ngIf=\"sortOrder === -1\" />\n        </ng-container>\n        <span *ngIf=\"dt.sortIconTemplate || dt._sortIconTemplate\" class=\"p-sortable-column-icon\">\n            <ng-template *ngTemplateOutlet=\"dt.sortIconTemplate || dt._sortIconTemplate; context: { $implicit: sortOrder }\"></ng-template>\n        </span>\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    field: [{\n      type: Input\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(SortIcon, {\n    className: \"SortIcon\"\n  });\n})();\nclass SelectableRow {\n  dt;\n  tableService;\n  el;\n  data;\n  index;\n  pSelectableRowDisabled;\n  selected;\n  subscription;\n  constructor(dt, tableService, el) {\n    this.dt = dt;\n    this.tableService = tableService;\n    this.el = el;\n    if (this.isEnabled()) {\n      this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.dt.isSelected(this.data);\n      });\n    }\n  }\n  setRowTabIndex() {\n    if (this.dt.selectionMode === 'single' || this.dt.selectionMode === 'multiple') {\n      return !this.dt.selection ? 0 : this.dt.anchorRowIndex === this.index ? 0 : -1;\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.dt.isSelected(this.data);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.dt.handleRowClick({\n        originalEvent: event,\n        rowData: this.data,\n        rowIndex: this.index\n      });\n    }\n  }\n  onTouchEnd(event) {\n    if (this.isEnabled()) {\n      this.dt.handleRowTouchEnd(event);\n    }\n  }\n  onKeyDown(event) {\n    switch (event.code) {\n      case 'ArrowDown':\n        this.onArrowDownKey(event);\n        break;\n      case 'ArrowUp':\n        this.onArrowUpKey(event);\n        break;\n      case 'Home':\n        this.onHomeKey(event);\n        break;\n      case 'End':\n        this.onEndKey(event);\n        break;\n      case 'Space':\n        this.onSpaceKey(event);\n        break;\n      case 'Enter':\n        this.onEnterKey(event);\n        break;\n      default:\n        if (event.code === 'KeyA' && (event.metaKey || event.ctrlKey) && this.dt.selectionMode === 'multiple') {\n          const data = this.dt.dataToRender(this.dt.processedData);\n          this.dt.selection = [...data];\n          this.dt.selectRange(event, data.length - 1);\n          event.preventDefault();\n        }\n        break;\n    }\n  }\n  onArrowDownKey(event) {\n    if (!this.isEnabled()) {\n      return;\n    }\n    const row = event.currentTarget;\n    const nextRow = this.findNextSelectableRow(row);\n    if (nextRow) {\n      nextRow.focus();\n    }\n    event.preventDefault();\n  }\n  onArrowUpKey(event) {\n    if (!this.isEnabled()) {\n      return;\n    }\n    const row = event.currentTarget;\n    const prevRow = this.findPrevSelectableRow(row);\n    if (prevRow) {\n      prevRow.focus();\n    }\n    event.preventDefault();\n  }\n  onEnterKey(event) {\n    if (!this.isEnabled()) {\n      return;\n    }\n    this.dt.handleRowClick({\n      originalEvent: event,\n      rowData: this.data,\n      rowIndex: this.index\n    });\n  }\n  onEndKey(event) {\n    const lastRow = this.findLastSelectableRow();\n    lastRow && this.focusRowChange(this.el.nativeElement, lastRow);\n    if (event.ctrlKey && event.shiftKey) {\n      const data = this.dt.dataToRender(this.dt.rows);\n      const lastSelectableRowIndex = DomHandler.getAttribute(lastRow, 'index');\n      this.dt.anchorRowIndex = lastSelectableRowIndex;\n      this.dt.selection = data.slice(this.index, data.length);\n      this.dt.selectRange(event, this.index);\n    }\n    event.preventDefault();\n  }\n  onHomeKey(event) {\n    const firstRow = this.findFirstSelectableRow();\n    firstRow && this.focusRowChange(this.el.nativeElement, firstRow);\n    if (event.ctrlKey && event.shiftKey) {\n      const data = this.dt.dataToRender(this.dt.rows);\n      const firstSelectableRowIndex = DomHandler.getAttribute(firstRow, 'index');\n      this.dt.anchorRowIndex = this.dt.anchorRowIndex || firstSelectableRowIndex;\n      this.dt.selection = data.slice(0, this.index + 1);\n      this.dt.selectRange(event, this.index);\n    }\n    event.preventDefault();\n  }\n  onSpaceKey(event) {\n    const isInput = event.target instanceof HTMLInputElement || event.target instanceof HTMLSelectElement || event.target instanceof HTMLTextAreaElement;\n    if (isInput) {\n      return;\n    } else {\n      this.onEnterKey(event);\n      if (event.shiftKey && this.dt.selection !== null) {\n        const data = this.dt.dataToRender(this.dt.rows);\n        let index;\n        if (ObjectUtils.isNotEmpty(this.dt.selection) && this.dt.selection.length > 0) {\n          let firstSelectedRowIndex, lastSelectedRowIndex;\n          firstSelectedRowIndex = ObjectUtils.findIndexInList(this.dt.selection[0], data);\n          lastSelectedRowIndex = ObjectUtils.findIndexInList(this.dt.selection[this.dt.selection.length - 1], data);\n          index = this.index <= firstSelectedRowIndex ? lastSelectedRowIndex : firstSelectedRowIndex;\n        } else {\n          index = ObjectUtils.findIndexInList(this.dt.selection, data);\n        }\n        this.dt.anchorRowIndex = index;\n        this.dt.selection = index !== this.index ? data.slice(Math.min(index, this.index), Math.max(index, this.index) + 1) : [this.data];\n        this.dt.selectRange(event, this.index);\n      }\n      event.preventDefault();\n    }\n  }\n  focusRowChange(firstFocusableRow, currentFocusedRow) {\n    firstFocusableRow.tabIndex = '-1';\n    currentFocusedRow.tabIndex = '0';\n    DomHandler.focus(currentFocusedRow);\n  }\n  findLastSelectableRow() {\n    const rows = DomHandler.find(this.dt.el.nativeElement, '.p-datatable-selectable-row');\n    return rows ? rows[rows.length - 1] : null;\n  }\n  findFirstSelectableRow() {\n    const firstRow = DomHandler.findSingle(this.dt.el.nativeElement, '.p-datatable-selectable-row');\n    return firstRow;\n  }\n  findNextSelectableRow(row) {\n    let nextRow = row.nextElementSibling;\n    if (nextRow) {\n      if (DomHandler.hasClass(nextRow, 'p-selectable-row')) return nextRow;else return this.findNextSelectableRow(nextRow);\n    } else {\n      return null;\n    }\n  }\n  findPrevSelectableRow(row) {\n    let prevRow = row.previousElementSibling;\n    if (prevRow) {\n      if (DomHandler.hasClass(prevRow, 'p-selectable-row')) return prevRow;else return this.findPrevSelectableRow(prevRow);\n    } else {\n      return null;\n    }\n  }\n  isEnabled() {\n    return this.pSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function SelectableRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SelectableRow)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(TableService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SelectableRow,\n    selectors: [[\"\", \"pSelectableRow\", \"\"]],\n    hostVars: 6,\n    hostBindings: function SelectableRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function SelectableRow_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"touchend\", function SelectableRow_touchend_HostBindingHandler($event) {\n          return ctx.onTouchEnd($event);\n        })(\"keydown\", function SelectableRow_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.setRowTabIndex())(\"data-p-selectable-row\", true);\n        i0.ɵɵclassProp(\"p-datatable-selectable-row\", ctx.isEnabled())(\"p-datatable-row-selected\", ctx.selected);\n      }\n    },\n    inputs: {\n      data: [0, \"pSelectableRow\", \"data\"],\n      index: [0, \"pSelectableRowIndex\", \"index\"],\n      pSelectableRowDisabled: [2, \"pSelectableRowDisabled\", \"pSelectableRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[pSelectableRow]',\n      host: {\n        '[class.p-datatable-selectable-row]': 'isEnabled()',\n        '[class.p-datatable-row-selected]': 'selected',\n        '[attr.tabindex]': 'setRowTabIndex()',\n        '[attr.data-p-selectable-row]': 'true'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: TableService\n  }, {\n    type: i0.ElementRef\n  }], {\n    data: [{\n      type: Input,\n      args: ['pSelectableRow']\n    }],\n    index: [{\n      type: Input,\n      args: ['pSelectableRowIndex']\n    }],\n    pSelectableRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onTouchEnd: [{\n      type: HostListener,\n      args: ['touchend', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\nclass SelectableRowDblClick {\n  dt;\n  tableService;\n  data;\n  index;\n  pSelectableRowDisabled;\n  selected;\n  subscription;\n  constructor(dt, tableService) {\n    this.dt = dt;\n    this.tableService = tableService;\n    if (this.isEnabled()) {\n      this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n        this.selected = this.dt.isSelected(this.data);\n      });\n    }\n  }\n  ngOnInit() {\n    if (this.isEnabled()) {\n      this.selected = this.dt.isSelected(this.data);\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.dt.handleRowClick({\n        originalEvent: event,\n        rowData: this.data,\n        rowIndex: this.index\n      });\n    }\n  }\n  isEnabled() {\n    return this.pSelectableRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function SelectableRowDblClick_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SelectableRowDblClick)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(TableService));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SelectableRowDblClick,\n    selectors: [[\"\", \"pSelectableRowDblClick\", \"\"]],\n    hostVars: 4,\n    hostBindings: function SelectableRowDblClick_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"dblclick\", function SelectableRowDblClick_dblclick_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"p-selectable-row\", ctx.isEnabled())(\"p-highlight\", ctx.selected);\n      }\n    },\n    inputs: {\n      data: [0, \"pSelectableRowDblClick\", \"data\"],\n      index: [0, \"pSelectableRowIndex\", \"index\"],\n      pSelectableRowDisabled: [2, \"pSelectableRowDisabled\", \"pSelectableRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SelectableRowDblClick, [{\n    type: Directive,\n    args: [{\n      selector: '[pSelectableRowDblClick]',\n      host: {\n        '[class.p-selectable-row]': 'isEnabled()',\n        '[class.p-highlight]': 'selected'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: TableService\n  }], {\n    data: [{\n      type: Input,\n      args: ['pSelectableRowDblClick']\n    }],\n    index: [{\n      type: Input,\n      args: ['pSelectableRowIndex']\n    }],\n    pSelectableRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }]\n  });\n})();\nclass ContextMenuRow {\n  dt;\n  tableService;\n  el;\n  data;\n  index;\n  pContextMenuRowDisabled;\n  selected;\n  subscription;\n  constructor(dt, tableService, el) {\n    this.dt = dt;\n    this.tableService = tableService;\n    this.el = el;\n    if (this.isEnabled()) {\n      this.subscription = this.dt.tableService.contextMenuSource$.subscribe(data => {\n        this.selected = this.dt.equals(this.data, data);\n      });\n    }\n  }\n  onContextMenu(event) {\n    if (this.isEnabled()) {\n      this.dt.handleRowRightClick({\n        originalEvent: event,\n        rowData: this.data,\n        rowIndex: this.index\n      });\n      this.el.nativeElement.focus();\n      event.preventDefault();\n    }\n  }\n  isEnabled() {\n    return this.pContextMenuRowDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function ContextMenuRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ContextMenuRow)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(TableService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ContextMenuRow,\n    selectors: [[\"\", \"pContextMenuRow\", \"\"]],\n    hostVars: 3,\n    hostBindings: function ContextMenuRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"contextmenu\", function ContextMenuRow_contextmenu_HostBindingHandler($event) {\n          return ctx.onContextMenu($event);\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.isEnabled() ? 0 : undefined);\n        i0.ɵɵclassProp(\"p-highlight-contextmenu\", ctx.selected);\n      }\n    },\n    inputs: {\n      data: [0, \"pContextMenuRow\", \"data\"],\n      index: [0, \"pContextMenuRowIndex\", \"index\"],\n      pContextMenuRowDisabled: [2, \"pContextMenuRowDisabled\", \"pContextMenuRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ContextMenuRow, [{\n    type: Directive,\n    args: [{\n      selector: '[pContextMenuRow]',\n      host: {\n        '[class.p-highlight-contextmenu]': 'selected',\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: TableService\n  }, {\n    type: i0.ElementRef\n  }], {\n    data: [{\n      type: Input,\n      args: ['pContextMenuRow']\n    }],\n    index: [{\n      type: Input,\n      args: ['pContextMenuRowIndex']\n    }],\n    pContextMenuRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onContextMenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\nclass RowToggler {\n  dt;\n  data;\n  pRowTogglerDisabled;\n  constructor(dt) {\n    this.dt = dt;\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.dt.toggleRow(this.data, event);\n      event.preventDefault();\n    }\n  }\n  isEnabled() {\n    return this.pRowTogglerDisabled !== true;\n  }\n  static ɵfac = function RowToggler_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || RowToggler)(i0.ɵɵdirectiveInject(Table));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: RowToggler,\n    selectors: [[\"\", \"pRowToggler\", \"\"]],\n    hostBindings: function RowToggler_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function RowToggler_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    },\n    inputs: {\n      data: [0, \"pRowToggler\", \"data\"],\n      pRowTogglerDisabled: [2, \"pRowTogglerDisabled\", \"pRowTogglerDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RowToggler, [{\n    type: Directive,\n    args: [{\n      selector: '[pRowToggler]'\n    }]\n  }], () => [{\n    type: Table\n  }], {\n    data: [{\n      type: Input,\n      args: ['pRowToggler']\n    }],\n    pRowTogglerDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\nclass ResizableColumn {\n  document;\n  platformId;\n  renderer;\n  dt;\n  el;\n  zone;\n  pResizableColumnDisabled;\n  resizer;\n  resizerMouseDownListener;\n  resizerTouchStartListener;\n  resizerTouchMoveListener;\n  resizerTouchEndListener;\n  documentMouseMoveListener;\n  documentMouseUpListener;\n  constructor(document, platformId, renderer, dt, el, zone) {\n    this.document = document;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.dt = dt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (this.isEnabled()) {\n        DomHandler.addClass(this.el.nativeElement, 'p-datatable-resizable-column');\n        this.resizer = this.renderer.createElement('span');\n        this.renderer.addClass(this.resizer, 'p-datatable-column-resizer');\n        this.renderer.appendChild(this.el.nativeElement, this.resizer);\n        this.zone.runOutsideAngular(() => {\n          this.resizerMouseDownListener = this.renderer.listen(this.resizer, 'mousedown', this.onMouseDown.bind(this));\n          this.resizerTouchStartListener = this.renderer.listen(this.resizer, 'touchstart', this.onTouchStart.bind(this));\n        });\n      }\n    }\n  }\n  bindDocumentEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.documentMouseMoveListener = this.renderer.listen(this.document, 'mousemove', this.onDocumentMouseMove.bind(this));\n      this.documentMouseUpListener = this.renderer.listen(this.document, 'mouseup', this.onDocumentMouseUp.bind(this));\n      this.resizerTouchMoveListener = this.renderer.listen(this.resizer, 'touchmove', this.onTouchMove.bind(this));\n      this.resizerTouchEndListener = this.renderer.listen(this.resizer, 'touchend', this.onTouchEnd.bind(this));\n    });\n  }\n  unbindDocumentEvents() {\n    if (this.documentMouseMoveListener) {\n      this.documentMouseMoveListener();\n      this.documentMouseMoveListener = null;\n    }\n    if (this.documentMouseUpListener) {\n      this.documentMouseUpListener();\n      this.documentMouseUpListener = null;\n    }\n    if (this.resizerTouchMoveListener) {\n      this.resizerTouchMoveListener();\n      this.resizerTouchMoveListener = null;\n    }\n    if (this.resizerTouchEndListener) {\n      this.resizerTouchEndListener();\n      this.resizerTouchEndListener = null;\n    }\n  }\n  onMouseDown(event) {\n    this.dt.onColumnResizeBegin(event);\n    this.bindDocumentEvents();\n  }\n  onTouchStart(event) {\n    this.dt.onColumnResizeBegin(event);\n    this.bindDocumentEvents();\n  }\n  onTouchMove(event) {\n    this.dt.onColumnResize(event);\n  }\n  onDocumentMouseMove(event) {\n    this.dt.onColumnResize(event);\n  }\n  onDocumentMouseUp(event) {\n    this.dt.onColumnResizeEnd();\n    this.unbindDocumentEvents();\n  }\n  onTouchEnd(event) {\n    this.dt.onColumnResizeEnd();\n    this.unbindDocumentEvents();\n  }\n  isEnabled() {\n    return this.pResizableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.resizerMouseDownListener) {\n      this.resizerMouseDownListener();\n      this.resizerMouseDownListener = null;\n    }\n    this.unbindDocumentEvents();\n  }\n  static ɵfac = function ResizableColumn_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ResizableColumn)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ResizableColumn,\n    selectors: [[\"\", \"pResizableColumn\", \"\"]],\n    hostAttrs: [1, \"p-datatable-resizable-column\"],\n    inputs: {\n      pResizableColumnDisabled: [2, \"pResizableColumnDisabled\", \"pResizableColumnDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResizableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[pResizableColumn]',\n      host: {\n        class: 'p-datatable-resizable-column'\n      }\n    }]\n  }], () => [{\n    type: Document,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: Table\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    pResizableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass ReorderableColumn {\n  platformId;\n  renderer;\n  dt;\n  el;\n  zone;\n  pReorderableColumnDisabled;\n  dragStartListener;\n  dragOverListener;\n  dragEnterListener;\n  dragLeaveListener;\n  mouseDownListener;\n  constructor(platformId, renderer, dt, el, zone) {\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.dt = dt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.bindEvents();\n    }\n  }\n  bindEvents() {\n    if (isPlatformBrowser(this.platformId)) {\n      this.zone.runOutsideAngular(() => {\n        this.mouseDownListener = this.renderer.listen(this.el.nativeElement, 'mousedown', this.onMouseDown.bind(this));\n        this.dragStartListener = this.renderer.listen(this.el.nativeElement, 'dragstart', this.onDragStart.bind(this));\n        this.dragOverListener = this.renderer.listen(this.el.nativeElement, 'dragover', this.onDragOver.bind(this));\n        this.dragEnterListener = this.renderer.listen(this.el.nativeElement, 'dragenter', this.onDragEnter.bind(this));\n        this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, 'dragleave', this.onDragLeave.bind(this));\n      });\n    }\n  }\n  unbindEvents() {\n    if (this.mouseDownListener) {\n      this.mouseDownListener();\n      this.mouseDownListener = null;\n    }\n    if (this.dragStartListener) {\n      this.dragStartListener();\n      this.dragStartListener = null;\n    }\n    if (this.dragOverListener) {\n      this.dragOverListener();\n      this.dragOverListener = null;\n    }\n    if (this.dragEnterListener) {\n      this.dragEnterListener();\n      this.dragEnterListener = null;\n    }\n    if (this.dragLeaveListener) {\n      this.dragLeaveListener();\n      this.dragLeaveListener = null;\n    }\n  }\n  onMouseDown(event) {\n    if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-datatable-column-resizer')) this.el.nativeElement.draggable = false;else this.el.nativeElement.draggable = true;\n  }\n  onDragStart(event) {\n    this.dt.onColumnDragStart(event, this.el.nativeElement);\n  }\n  onDragOver(event) {\n    event.preventDefault();\n  }\n  onDragEnter(event) {\n    this.dt.onColumnDragEnter(event, this.el.nativeElement);\n  }\n  onDragLeave(event) {\n    this.dt.onColumnDragLeave(event);\n  }\n  onDrop(event) {\n    if (this.isEnabled()) {\n      this.dt.onColumnDrop(event, this.el.nativeElement);\n    }\n  }\n  isEnabled() {\n    return this.pReorderableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n  }\n  static ɵfac = function ReorderableColumn_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ReorderableColumn)(i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ReorderableColumn,\n    selectors: [[\"\", \"pReorderableColumn\", \"\"]],\n    hostAttrs: [1, \"p-datatable-reorderable-column\"],\n    hostBindings: function ReorderableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"drop\", function ReorderableColumn_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      pReorderableColumnDisabled: [2, \"pReorderableColumnDisabled\", \"pReorderableColumnDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReorderableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[pReorderableColumn]',\n      host: {\n        class: 'p-datatable-reorderable-column'\n      }\n    }]\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.Renderer2\n  }, {\n    type: Table\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    pReorderableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\nclass EditableColumn {\n  dt;\n  el;\n  zone;\n  data;\n  field;\n  rowIndex;\n  pEditableColumnDisabled;\n  pFocusCellSelector;\n  overlayEventListener;\n  constructor(dt, el, zone) {\n    this.dt = dt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngOnChanges(changes) {\n    if (this.el.nativeElement && !changes.data?.firstChange) {\n      this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);\n    }\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\n    }\n  }\n  onClick(event) {\n    if (this.isEnabled()) {\n      this.dt.selfClick = true;\n      if (this.dt.editingCell) {\n        if (this.dt.editingCell !== this.el.nativeElement) {\n          if (!this.dt.isEditingCellValid()) {\n            return;\n          }\n          this.closeEditingCell(true, event);\n          this.openCell();\n        }\n      } else {\n        this.openCell();\n      }\n    }\n  }\n  openCell() {\n    this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);\n    DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\n    this.dt.onEditInit.emit({\n      field: this.field,\n      data: this.data,\n      index: this.rowIndex\n    });\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\n        let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\n        if (focusableElement) {\n          focusableElement.focus();\n        }\n      }, 50);\n    });\n    this.overlayEventListener = e => {\n      if (this.el && this.el.nativeElement.contains(e.target)) {\n        this.dt.selfClick = true;\n      }\n    };\n    this.dt.overlaySubscription = this.dt.overlayService.clickObservable.subscribe(this.overlayEventListener);\n  }\n  closeEditingCell(completed, event) {\n    const eventData = {\n      field: this.dt.editingCellField,\n      data: this.dt.editingCellData,\n      originalEvent: event,\n      index: this.dt.editingCellRowIndex\n    };\n    if (completed) {\n      this.dt.onEditComplete.emit(eventData);\n    } else {\n      this.dt.onEditCancel.emit(eventData);\n      this.dt.value.forEach(element => {\n        if (element[this.dt.editingCellField] === this.data) {\n          element[this.dt.editingCellField] = this.dt.editingCellData;\n        }\n      });\n    }\n    DomHandler.removeClass(this.dt.editingCell, 'p-cell-editing');\n    this.dt.editingCell = null;\n    this.dt.editingCellData = null;\n    this.dt.editingCellField = null;\n    this.dt.unbindDocumentEditListener();\n    if (this.dt.overlaySubscription) {\n      this.dt.overlaySubscription.unsubscribe();\n    }\n  }\n  onEnterKeyDown(event) {\n    if (this.isEnabled() && !event.shiftKey) {\n      if (this.dt.isEditingCellValid()) {\n        this.closeEditingCell(true, event);\n      }\n      event.preventDefault();\n    }\n  }\n  onTabKeyDown(event) {\n    if (this.isEnabled()) {\n      if (this.dt.isEditingCellValid()) {\n        this.closeEditingCell(true, event);\n      }\n      event.preventDefault();\n    }\n  }\n  onEscapeKeyDown(event) {\n    if (this.isEnabled()) {\n      if (this.dt.isEditingCellValid()) {\n        this.closeEditingCell(false, event);\n      }\n      event.preventDefault();\n    }\n  }\n  onShiftKeyDown(event) {\n    if (this.isEnabled()) {\n      if (event.shiftKey) this.moveToPreviousCell(event);else {\n        this.moveToNextCell(event);\n      }\n    }\n  }\n  onArrowDown(event) {\n    if (this.isEnabled()) {\n      let currentCell = this.findCell(event.target);\n      if (currentCell) {\n        let cellIndex = DomHandler.index(currentCell);\n        let targetCell = this.findNextEditableColumnByIndex(currentCell, cellIndex);\n        if (targetCell) {\n          if (this.dt.isEditingCellValid()) {\n            this.closeEditingCell(true, event);\n          }\n          DomHandler.invokeElementMethod(event.target, 'blur');\n          DomHandler.invokeElementMethod(targetCell, 'click');\n        }\n        event.preventDefault();\n      }\n    }\n  }\n  onArrowUp(event) {\n    if (this.isEnabled()) {\n      let currentCell = this.findCell(event.target);\n      if (currentCell) {\n        let cellIndex = DomHandler.index(currentCell);\n        let targetCell = this.findPrevEditableColumnByIndex(currentCell, cellIndex);\n        if (targetCell) {\n          if (this.dt.isEditingCellValid()) {\n            this.closeEditingCell(true, event);\n          }\n          DomHandler.invokeElementMethod(event.target, 'blur');\n          DomHandler.invokeElementMethod(targetCell, 'click');\n        }\n        event.preventDefault();\n      }\n    }\n  }\n  onArrowLeft(event) {\n    if (this.isEnabled()) {\n      this.moveToPreviousCell(event);\n    }\n  }\n  onArrowRight(event) {\n    if (this.isEnabled()) {\n      this.moveToNextCell(event);\n    }\n  }\n  findCell(element) {\n    if (element) {\n      let cell = element;\n      while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\n        cell = cell.parentElement;\n      }\n      return cell;\n    } else {\n      return null;\n    }\n  }\n  moveToPreviousCell(event) {\n    let currentCell = this.findCell(event.target);\n    if (currentCell) {\n      let targetCell = this.findPreviousEditableColumn(currentCell);\n      if (targetCell) {\n        if (this.dt.isEditingCellValid()) {\n          this.closeEditingCell(true, event);\n        }\n        DomHandler.invokeElementMethod(event.target, 'blur');\n        DomHandler.invokeElementMethod(targetCell, 'click');\n        event.preventDefault();\n      }\n    }\n  }\n  moveToNextCell(event) {\n    let currentCell = this.findCell(event.target);\n    if (currentCell) {\n      let targetCell = this.findNextEditableColumn(currentCell);\n      if (targetCell) {\n        if (this.dt.isEditingCellValid()) {\n          this.closeEditingCell(true, event);\n        }\n        DomHandler.invokeElementMethod(event.target, 'blur');\n        DomHandler.invokeElementMethod(targetCell, 'click');\n        event.preventDefault();\n      } else {\n        if (this.dt.isEditingCellValid()) {\n          this.closeEditingCell(true, event);\n        }\n      }\n    }\n  }\n  findPreviousEditableColumn(cell) {\n    let prevCell = cell.previousElementSibling;\n    if (!prevCell) {\n      let previousRow = cell.parentElement?.previousElementSibling;\n      if (previousRow) {\n        prevCell = previousRow.lastElementChild;\n      }\n    }\n    if (prevCell) {\n      if (DomHandler.hasClass(prevCell, 'p-editable-column')) return prevCell;else return this.findPreviousEditableColumn(prevCell);\n    } else {\n      return null;\n    }\n  }\n  findNextEditableColumn(cell) {\n    let nextCell = cell.nextElementSibling;\n    if (!nextCell) {\n      let nextRow = cell.parentElement?.nextElementSibling;\n      if (nextRow) {\n        nextCell = nextRow.firstElementChild;\n      }\n    }\n    if (nextCell) {\n      if (DomHandler.hasClass(nextCell, 'p-editable-column')) return nextCell;else return this.findNextEditableColumn(nextCell);\n    } else {\n      return null;\n    }\n  }\n  findNextEditableColumnByIndex(cell, index) {\n    let nextRow = cell.parentElement?.nextElementSibling;\n    if (nextRow) {\n      let nextCell = nextRow.children[index];\n      if (nextCell && DomHandler.hasClass(nextCell, 'p-editable-column')) {\n        return nextCell;\n      }\n      return null;\n    } else {\n      return null;\n    }\n  }\n  findPrevEditableColumnByIndex(cell, index) {\n    let prevRow = cell.parentElement?.previousElementSibling;\n    if (prevRow) {\n      let prevCell = prevRow.children[index];\n      if (prevCell && DomHandler.hasClass(prevCell, 'p-editable-column')) {\n        return prevCell;\n      }\n      return null;\n    } else {\n      return null;\n    }\n  }\n  isEnabled() {\n    return this.pEditableColumnDisabled !== true;\n  }\n  ngOnDestroy() {\n    if (this.dt.overlaySubscription) {\n      this.dt.overlaySubscription.unsubscribe();\n    }\n  }\n  static ɵfac = function EditableColumn_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || EditableColumn)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: EditableColumn,\n    selectors: [[\"\", \"pEditableColumn\", \"\"]],\n    hostBindings: function EditableColumn_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function EditableColumn_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        })(\"keydown.enter\", function EditableColumn_keydown_enter_HostBindingHandler($event) {\n          return ctx.onEnterKeyDown($event);\n        })(\"keydown.tab\", function EditableColumn_keydown_tab_HostBindingHandler($event) {\n          return ctx.onShiftKeyDown($event);\n        })(\"keydown.escape\", function EditableColumn_keydown_escape_HostBindingHandler($event) {\n          return ctx.onEscapeKeyDown($event);\n        })(\"keydown.shift.tab\", function EditableColumn_keydown_shift_tab_HostBindingHandler($event) {\n          return ctx.onShiftKeyDown($event);\n        })(\"keydown.meta.tab\", function EditableColumn_keydown_meta_tab_HostBindingHandler($event) {\n          return ctx.onShiftKeyDown($event);\n        })(\"keydown.arrowdown\", function EditableColumn_keydown_arrowdown_HostBindingHandler($event) {\n          return ctx.onArrowDown($event);\n        })(\"keydown.arrowup\", function EditableColumn_keydown_arrowup_HostBindingHandler($event) {\n          return ctx.onArrowUp($event);\n        })(\"keydown.arrowleft\", function EditableColumn_keydown_arrowleft_HostBindingHandler($event) {\n          return ctx.onArrowLeft($event);\n        })(\"keydown.arrowright\", function EditableColumn_keydown_arrowright_HostBindingHandler($event) {\n          return ctx.onArrowRight($event);\n        });\n      }\n    },\n    inputs: {\n      data: [0, \"pEditableColumn\", \"data\"],\n      field: [0, \"pEditableColumnField\", \"field\"],\n      rowIndex: [0, \"pEditableColumnRowIndex\", \"rowIndex\"],\n      pEditableColumnDisabled: [2, \"pEditableColumnDisabled\", \"pEditableColumnDisabled\", booleanAttribute],\n      pFocusCellSelector: \"pFocusCellSelector\"\n    },\n    features: [i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EditableColumn, [{\n    type: Directive,\n    args: [{\n      selector: '[pEditableColumn]'\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    data: [{\n      type: Input,\n      args: ['pEditableColumn']\n    }],\n    field: [{\n      type: Input,\n      args: ['pEditableColumnField']\n    }],\n    rowIndex: [{\n      type: Input,\n      args: ['pEditableColumnRowIndex']\n    }],\n    pEditableColumnDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    pFocusCellSelector: [{\n      type: Input\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onEnterKeyDown: [{\n      type: HostListener,\n      args: ['keydown.enter', ['$event']]\n    }],\n    onTabKeyDown: [{\n      type: HostListener,\n      args: ['keydown.tab', ['$event']]\n    }],\n    onEscapeKeyDown: [{\n      type: HostListener,\n      args: ['keydown.escape', ['$event']]\n    }],\n    onShiftKeyDown: [{\n      type: HostListener,\n      args: ['keydown.tab', ['$event']]\n    }, {\n      type: HostListener,\n      args: ['keydown.shift.tab', ['$event']]\n    }, {\n      type: HostListener,\n      args: ['keydown.meta.tab', ['$event']]\n    }],\n    onArrowDown: [{\n      type: HostListener,\n      args: ['keydown.arrowdown', ['$event']]\n    }],\n    onArrowUp: [{\n      type: HostListener,\n      args: ['keydown.arrowup', ['$event']]\n    }],\n    onArrowLeft: [{\n      type: HostListener,\n      args: ['keydown.arrowleft', ['$event']]\n    }],\n    onArrowRight: [{\n      type: HostListener,\n      args: ['keydown.arrowright', ['$event']]\n    }]\n  });\n})();\nclass EditableRow {\n  el;\n  data;\n  pEditableRowDisabled;\n  constructor(el) {\n    this.el = el;\n  }\n  isEnabled() {\n    return this.pEditableRowDisabled !== true;\n  }\n  static ɵfac = function EditableRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || EditableRow)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: EditableRow,\n    selectors: [[\"\", \"pEditableRow\", \"\"]],\n    inputs: {\n      data: [0, \"pEditableRow\", \"data\"],\n      pEditableRowDisabled: [2, \"pEditableRowDisabled\", \"pEditableRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EditableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[pEditableRow]'\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], {\n    data: [{\n      type: Input,\n      args: ['pEditableRow']\n    }],\n    pEditableRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\nclass InitEditableRow {\n  dt;\n  editableRow;\n  constructor(dt, editableRow) {\n    this.dt = dt;\n    this.editableRow = editableRow;\n  }\n  onClick(event) {\n    this.dt.initRowEdit(this.editableRow.data);\n    event.preventDefault();\n  }\n  static ɵfac = function InitEditableRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || InitEditableRow)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(EditableRow));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: InitEditableRow,\n    selectors: [[\"\", \"pInitEditableRow\", \"\"]],\n    hostAttrs: [1, \"p-datatable-row-editor-init\"],\n    hostBindings: function InitEditableRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function InitEditableRow_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InitEditableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[pInitEditableRow]',\n      host: {\n        class: 'p-datatable-row-editor-init'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: EditableRow\n  }], {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\nclass SaveEditableRow {\n  dt;\n  editableRow;\n  constructor(dt, editableRow) {\n    this.dt = dt;\n    this.editableRow = editableRow;\n  }\n  onClick(event) {\n    this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\n    event.preventDefault();\n  }\n  static ɵfac = function SaveEditableRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SaveEditableRow)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(EditableRow));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SaveEditableRow,\n    selectors: [[\"\", \"pSaveEditableRow\", \"\"]],\n    hostAttrs: [1, \"p-datatable-row-editor-save\"],\n    hostBindings: function SaveEditableRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function SaveEditableRow_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SaveEditableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[pSaveEditableRow]',\n      host: {\n        class: 'p-datatable-row-editor-save'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: EditableRow\n  }], {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\nclass CancelEditableRow {\n  dt;\n  editableRow;\n  constructor(dt, editableRow) {\n    this.dt = dt;\n    this.editableRow = editableRow;\n  }\n  onClick(event) {\n    this.dt.cancelRowEdit(this.editableRow.data);\n    event.preventDefault();\n  }\n  static ɵfac = function CancelEditableRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CancelEditableRow)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(EditableRow));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: CancelEditableRow,\n    selectors: [[\"\", \"pCancelEditableRow\", \"\"]],\n    hostAttrs: [1, \"p-datatable-row-editor-cancel\"],\n    hostBindings: function CancelEditableRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function CancelEditableRow_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        });\n      }\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CancelEditableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[pCancelEditableRow]',\n      host: {\n        class: 'p-datatable-row-editor-cancel'\n      }\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: EditableRow\n  }], {\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\nclass CellEditor {\n  dt;\n  editableColumn;\n  editableRow;\n  _templates;\n  _inputTemplate;\n  _outputTemplate;\n  inputTemplate;\n  outputTemplate;\n  constructor(dt, editableColumn, editableRow) {\n    this.dt = dt;\n    this.editableColumn = editableColumn;\n    this.editableRow = editableRow;\n  }\n  ngAfterContentInit() {\n    this._templates.forEach(item => {\n      switch (item.getType()) {\n        case 'input':\n          this.inputTemplate = item.template;\n          break;\n        case 'output':\n          this.outputTemplate = item.template;\n          break;\n      }\n    });\n  }\n  get editing() {\n    return this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement || this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data);\n  }\n  static ɵfac = function CellEditor_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || CellEditor)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(EditableColumn, 8), i0.ɵɵdirectiveInject(EditableRow, 8));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CellEditor,\n    selectors: [[\"p-cellEditor\"]],\n    contentQueries: function CellEditor_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c51, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c52, 5);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._inputTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._outputTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._templates = _t);\n      }\n    },\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\"]],\n    template: function CellEditor_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CellEditor_ng_container_0_Template, 2, 1, \"ng-container\", 0)(1, CellEditor_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.editing);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", !ctx.editing);\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CellEditor, [{\n    type: Component,\n    args: [{\n      selector: 'p-cellEditor',\n      template: `\n        <ng-container *ngIf=\"editing\">\n            <ng-container *ngTemplateOutlet=\"inputTemplate || _inputTemplate\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"!editing\">\n            <ng-container *ngTemplateOutlet=\"outputTemplate || _outputTemplate\"></ng-container>\n        </ng-container>\n    `,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: EditableColumn,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: EditableRow,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    _templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    _inputTemplate: [{\n      type: ContentChild,\n      args: ['input']\n    }],\n    _outputTemplate: [{\n      type: ContentChild,\n      args: ['output']\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(CellEditor, {\n    className: \"CellEditor\"\n  });\n})();\nclass TableRadioButton {\n  dt;\n  cd;\n  disabled;\n  value;\n  index;\n  inputId;\n  name;\n  ariaLabel;\n  inputViewChild;\n  checked;\n  focused;\n  subscription;\n  constructor(dt, cd) {\n    this.dt = dt;\n    this.cd = cd;\n    this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.dt.isSelected(this.value);\n      this.ariaLabel = this.ariaLabel || this.dt.config.translation.aria ? this.checked ? this.dt.config.translation.aria.selectRow : this.dt.config.translation.aria.unselectRow : undefined;\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.dt.isSelected(this.value);\n  }\n  onClick(event) {\n    if (!this.disabled) {\n      this.dt.toggleRowWithRadio({\n        originalEvent: event.originalEvent,\n        rowIndex: this.index\n      }, this.value);\n      this.inputViewChild?.inputViewChild.nativeElement?.focus();\n    }\n    DomHandler.clearSelection();\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TableRadioButton_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TableRadioButton)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TableRadioButton,\n    selectors: [[\"p-tableRadioButton\"]],\n    viewQuery: function TableRadioButton_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c53, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputViewChild = _t.first);\n      }\n    },\n    inputs: {\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      value: \"value\",\n      index: [2, \"index\", \"index\", numberAttribute],\n      inputId: \"inputId\",\n      name: \"name\",\n      ariaLabel: \"ariaLabel\"\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    decls: 2,\n    vars: 7,\n    consts: [[\"rb\", \"\"], [3, \"ngModelChange\", \"onClick\", \"ngModel\", \"disabled\", \"inputId\", \"name\", \"ariaLabel\", \"binary\", \"value\"]],\n    template: function TableRadioButton_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r1 = i0.ɵɵgetCurrentView();\n        i0.ɵɵelementStart(0, \"p-radioButton\", 1, 0);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function TableRadioButton_Template_p_radioButton_ngModelChange_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          i0.ɵɵtwoWayBindingSet(ctx.checked, $event) || (ctx.checked = $event);\n          return i0.ɵɵresetView($event);\n        });\n        i0.ɵɵlistener(\"onClick\", function TableRadioButton_Template_p_radioButton_onClick_0_listener($event) {\n          i0.ɵɵrestoreView(_r1);\n          return i0.ɵɵresetView(ctx.onClick($event));\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.checked);\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"inputId\", ctx.inputId)(\"name\", ctx.name)(\"ariaLabel\", ctx.ariaLabel)(\"binary\", true)(\"value\", ctx.value);\n      }\n    },\n    dependencies: [i5.NgControlStatus, i5.NgModel, i6.RadioButton],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TableRadioButton, [{\n    type: Component,\n    args: [{\n      selector: 'p-tableRadioButton',\n      template: ` <p-radioButton #rb [(ngModel)]=\"checked\" [disabled]=\"disabled\" [inputId]=\"inputId\" [name]=\"name\" [ariaLabel]=\"ariaLabel\" [binary]=\"true\" [value]=\"value\" (onClick)=\"onClick($event)\" /> `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    value: [{\n      type: Input\n    }],\n    index: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    inputId: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    inputViewChild: [{\n      type: ViewChild,\n      args: ['rb']\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(TableRadioButton, {\n    className: \"TableRadioButton\"\n  });\n})();\nclass TableCheckbox {\n  dt;\n  tableService;\n  cd;\n  disabled;\n  value;\n  index;\n  inputId;\n  name;\n  required;\n  ariaLabel;\n  checked;\n  focused;\n  subscription;\n  constructor(dt, tableService, cd) {\n    this.dt = dt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.dt.isSelected(this.value) && !this.disabled;\n      this.ariaLabel = this.ariaLabel || this.dt.config.translation.aria ? this.checked ? this.dt.config.translation.aria.selectRow : this.dt.config.translation.aria.unselectRow : undefined;\n      this.cd.markForCheck();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.dt.isSelected(this.value);\n  }\n  onClick(event) {\n    if (!this.disabled) {\n      this.dt.toggleRowWithCheckbox({\n        originalEvent: event,\n        rowIndex: this.index\n      }, this.value);\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  static ɵfac = function TableCheckbox_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TableCheckbox)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(TableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TableCheckbox,\n    selectors: [[\"p-tableCheckbox\"]],\n    inputs: {\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      value: \"value\",\n      index: [2, \"index\", \"index\", numberAttribute],\n      inputId: \"inputId\",\n      name: \"name\",\n      required: [2, \"required\", \"required\", booleanAttribute],\n      ariaLabel: \"ariaLabel\"\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    decls: 2,\n    vars: 5,\n    consts: [[3, \"ngModelChange\", \"onChange\", \"ngModel\", \"binary\", \"disabled\", \"ariaLabel\"], [4, \"ngIf\"], [\"pTemplate\", \"icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TableCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-checkbox\", 0);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function TableCheckbox_Template_p_checkbox_ngModelChange_0_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.checked, $event) || (ctx.checked = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"onChange\", function TableCheckbox_Template_p_checkbox_onChange_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        i0.ɵɵtemplate(1, TableCheckbox_ng_container_1_Template, 2, 0, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.checked);\n        i0.ɵɵproperty(\"binary\", true)(\"disabled\", ctx.disabled)(\"ariaLabel\", ctx.ariaLabel);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.dt.checkboxIconTemplate || ctx.dt._checkboxIconTemplate);\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgTemplateOutlet, i3.PrimeTemplate, i5.NgControlStatus, i5.NgModel, i7.Checkbox],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TableCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-tableCheckbox',\n      template: `\n        <p-checkbox [(ngModel)]=\"checked\" [binary]=\"true\" (onChange)=\"onClick($event)\" [disabled]=\"disabled\" [ariaLabel]=\"ariaLabel\">\n            <ng-container *ngIf=\"dt.checkboxIconTemplate || dt._checkboxIconTemplate\">\n                <ng-template pTemplate=\"icon\">\n                    <ng-template *ngTemplateOutlet=\"dt.checkboxIconTemplate || dt._checkboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </ng-template>\n            </ng-container>\n        </p-checkbox>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: TableService\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    value: [{\n      type: Input\n    }],\n    index: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    inputId: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    required: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    ariaLabel: [{\n      type: Input\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(TableCheckbox, {\n    className: \"TableCheckbox\"\n  });\n})();\nclass TableHeaderCheckbox {\n  dt;\n  tableService;\n  cd;\n  disabled;\n  inputId;\n  name;\n  ariaLabel;\n  checked;\n  focused;\n  selectionChangeSubscription;\n  valueChangeSubscription;\n  constructor(dt, tableService, cd) {\n    this.dt = dt;\n    this.tableService = tableService;\n    this.cd = cd;\n    this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n      this.ariaLabel = this.ariaLabel || this.dt.config.translation.aria ? this.checked ? this.dt.config.translation.aria.selectAll : this.dt.config.translation.aria.unselectAll : undefined;\n    });\n    this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\n      this.checked = this.updateCheckedState();\n    });\n  }\n  ngOnInit() {\n    this.checked = this.updateCheckedState();\n  }\n  onClick(event) {\n    if (!this.disabled) {\n      if (this.dt.value && this.dt.value.length > 0) {\n        this.dt.toggleRowsWithCheckbox(event, this.checked);\n      }\n    }\n    DomHandler.clearSelection();\n  }\n  onFocus() {\n    this.focused = true;\n  }\n  onBlur() {\n    this.focused = false;\n  }\n  isDisabled() {\n    return this.disabled || !this.dt.value || !this.dt.value.length;\n  }\n  ngOnDestroy() {\n    if (this.selectionChangeSubscription) {\n      this.selectionChangeSubscription.unsubscribe();\n    }\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe();\n    }\n  }\n  updateCheckedState() {\n    this.cd.markForCheck();\n    if (this.dt._selectAll !== null) {\n      return this.dt._selectAll;\n    } else {\n      const data = this.dt.selectionPageOnly ? this.dt.dataToRender(this.dt.processedData) : this.dt.processedData;\n      const val = this.dt.frozenValue ? [...this.dt.frozenValue, ...data] : data;\n      const selectableVal = this.dt.rowSelectable ? val.filter((data, index) => this.dt.rowSelectable({\n        data,\n        index\n      })) : val;\n      return ObjectUtils.isNotEmpty(selectableVal) && ObjectUtils.isNotEmpty(this.dt.selection) && selectableVal.every(v => this.dt.selection.some(s => this.dt.equals(v, s)));\n    }\n  }\n  static ɵfac = function TableHeaderCheckbox_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TableHeaderCheckbox)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(TableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TableHeaderCheckbox,\n    selectors: [[\"p-tableHeaderCheckbox\"]],\n    inputs: {\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      inputId: \"inputId\",\n      name: \"name\",\n      ariaLabel: \"ariaLabel\"\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    decls: 2,\n    vars: 5,\n    consts: [[3, \"ngModelChange\", \"onChange\", \"ngModel\", \"binary\", \"disabled\", \"ariaLabel\"], [4, \"ngIf\"], [\"pTemplate\", \"icon\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function TableHeaderCheckbox_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-checkbox\", 0);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function TableHeaderCheckbox_Template_p_checkbox_ngModelChange_0_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.checked, $event) || (ctx.checked = $event);\n          return $event;\n        });\n        i0.ɵɵlistener(\"onChange\", function TableHeaderCheckbox_Template_p_checkbox_onChange_0_listener($event) {\n          return ctx.onClick($event);\n        });\n        i0.ɵɵtemplate(1, TableHeaderCheckbox_ng_container_1_Template, 2, 0, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.checked);\n        i0.ɵɵproperty(\"binary\", true)(\"disabled\", ctx.isDisabled())(\"ariaLabel\", ctx.ariaLabel);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.dt.headerCheckboxIconTemplate || ctx.dt._headerCheckboxIconTemplate);\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgTemplateOutlet, i3.PrimeTemplate, i5.NgControlStatus, i5.NgModel, i7.Checkbox],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TableHeaderCheckbox, [{\n    type: Component,\n    args: [{\n      selector: 'p-tableHeaderCheckbox',\n      template: `\n        <p-checkbox [(ngModel)]=\"checked\" (onChange)=\"onClick($event)\" [binary]=\"true\" [disabled]=\"isDisabled()\" [ariaLabel]=\"ariaLabel\">\n            <ng-container *ngIf=\"dt.headerCheckboxIconTemplate || dt._headerCheckboxIconTemplate\">\n                <ng-template pTemplate=\"icon\">\n                    <ng-template *ngTemplateOutlet=\"dt.headerCheckboxIconTemplate || dt._headerCheckboxIconTemplate; context: { $implicit: checked }\"></ng-template>\n                </ng-template>\n            </ng-container>\n        </p-checkbox>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: TableService\n  }, {\n    type: i0.ChangeDetectorRef\n  }], {\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    inputId: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(TableHeaderCheckbox, {\n    className: \"TableHeaderCheckbox\"\n  });\n})();\nclass ReorderableRowHandle {\n  el;\n  constructor(el) {\n    this.el = el;\n  }\n  ngAfterViewInit() {\n    // DomHandler.addClass(this.el.nativeElement, 'p-datatable-reorderable-row-handle');\n  }\n  static ɵfac = function ReorderableRowHandle_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ReorderableRowHandle)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ReorderableRowHandle,\n    selectors: [[\"\", \"pReorderableRowHandle\", \"\"]],\n    hostAttrs: [1, \"p-datatable-reorderable-row-handle\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReorderableRowHandle, [{\n    type: Directive,\n    args: [{\n      selector: '[pReorderableRowHandle]',\n      host: {\n        class: 'p-datatable-reorderable-row-handle'\n      }\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], null);\n})();\nclass ReorderableRow {\n  renderer;\n  dt;\n  el;\n  zone;\n  index;\n  pReorderableRowDisabled;\n  mouseDownListener;\n  dragStartListener;\n  dragEndListener;\n  dragOverListener;\n  dragLeaveListener;\n  dropListener;\n  constructor(renderer, dt, el, zone) {\n    this.renderer = renderer;\n    this.dt = dt;\n    this.el = el;\n    this.zone = zone;\n  }\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.el.nativeElement.droppable = true;\n      this.bindEvents();\n    }\n  }\n  bindEvents() {\n    this.zone.runOutsideAngular(() => {\n      this.mouseDownListener = this.renderer.listen(this.el.nativeElement, 'mousedown', this.onMouseDown.bind(this));\n      this.dragStartListener = this.renderer.listen(this.el.nativeElement, 'dragstart', this.onDragStart.bind(this));\n      this.dragEndListener = this.renderer.listen(this.el.nativeElement, 'dragend', this.onDragEnd.bind(this));\n      this.dragOverListener = this.renderer.listen(this.el.nativeElement, 'dragover', this.onDragOver.bind(this));\n      this.dragLeaveListener = this.renderer.listen(this.el.nativeElement, 'dragleave', this.onDragLeave.bind(this));\n    });\n  }\n  unbindEvents() {\n    if (this.mouseDownListener) {\n      this.mouseDownListener();\n      this.mouseDownListener = null;\n    }\n    if (this.dragStartListener) {\n      this.dragStartListener();\n      this.dragStartListener = null;\n    }\n    if (this.dragEndListener) {\n      this.dragEndListener();\n      this.dragEndListener = null;\n    }\n    if (this.dragOverListener) {\n      this.dragOverListener();\n      this.dragOverListener = null;\n    }\n    if (this.dragLeaveListener) {\n      this.dragLeaveListener();\n      this.dragLeaveListener = null;\n    }\n  }\n  onMouseDown(event) {\n    const targetElement = event.target;\n    const isHandleClicked = this.isHandleElement(targetElement);\n    this.el.nativeElement.draggable = isHandleClicked;\n  }\n  isHandleElement(element) {\n    if (element?.classList.contains('p-datatable-reorderable-row-handle')) {\n      return true;\n    }\n    if (element?.parentElement && !['TD', 'TR'].includes(element?.parentElement?.tagName)) {\n      return this.isHandleElement(element?.parentElement);\n    }\n    return false;\n  }\n  onDragStart(event) {\n    this.dt.onRowDragStart(event, this.index);\n  }\n  onDragEnd(event) {\n    this.dt.onRowDragEnd(event);\n    this.el.nativeElement.draggable = false;\n  }\n  onDragOver(event) {\n    this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\n    event.preventDefault();\n  }\n  onDragLeave(event) {\n    this.dt.onRowDragLeave(event, this.el.nativeElement);\n  }\n  isEnabled() {\n    return this.pReorderableRowDisabled !== true;\n  }\n  onDrop(event) {\n    if (this.isEnabled() && this.dt.rowDragging) {\n      this.dt.onRowDrop(event, this.el.nativeElement);\n    }\n    event.preventDefault();\n  }\n  ngOnDestroy() {\n    this.unbindEvents();\n  }\n  static ɵfac = function ReorderableRow_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ReorderableRow)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: ReorderableRow,\n    selectors: [[\"\", \"pReorderableRow\", \"\"]],\n    hostBindings: function ReorderableRow_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"drop\", function ReorderableRow_drop_HostBindingHandler($event) {\n          return ctx.onDrop($event);\n        });\n      }\n    },\n    inputs: {\n      index: [0, \"pReorderableRow\", \"index\"],\n      pReorderableRowDisabled: [2, \"pReorderableRowDisabled\", \"pReorderableRowDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ReorderableRow, [{\n    type: Directive,\n    args: [{\n      selector: '[pReorderableRow]'\n    }]\n  }], () => [{\n    type: i0.Renderer2\n  }, {\n    type: Table\n  }, {\n    type: i0.ElementRef\n  }, {\n    type: i0.NgZone\n  }], {\n    index: [{\n      type: Input,\n      args: ['pReorderableRow']\n    }],\n    pReorderableRowDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    onDrop: [{\n      type: HostListener,\n      args: ['drop', ['$event']]\n    }]\n  });\n})();\nclass ColumnFilter extends BaseComponent {\n  /**\n   * Property represented by the column.\n   * @group Props\n   */\n  field;\n  /**\n   * Type of the input.\n   * @group Props\n   */\n  type = 'text';\n  /**\n   * Filter display.\n   * @group Props\n   */\n  display = 'row';\n  /**\n   * Decides whether to display filter menu popup.\n   * @group Props\n   */\n  showMenu = true;\n  /**\n   * Filter match mode.\n   * @group Props\n   */\n  matchMode;\n  /**\n   * Filter operator.\n   * @defaultValue 'AND'\n   * @group Props\n   */\n  operator = FilterOperator.AND;\n  /**\n   * Decides whether to display filter operator.\n   * @group Props\n   */\n  showOperator = true;\n  /**\n   * Decides whether to display clear filter button.\n   * @group Props\n   */\n  showClearButton = true;\n  /**\n   * Decides whether to display apply filter button.\n   * @group Props\n   */\n  showApplyButton = true;\n  /**\n   * Decides whether to display filter match modes.\n   * @group Props\n   */\n  showMatchModes = true;\n  /**\n   * Decides whether to display add filter button.\n   * @group Props\n   */\n  showAddButton = true;\n  /**\n   * Decides whether to close popup on clear button click.\n   * @group Props\n   */\n  hideOnClear = false;\n  /**\n   * Filter placeholder.\n   * @group Props\n   */\n  placeholder;\n  /**\n   * Filter match mode options.\n   * @group Props\n   */\n  matchModeOptions;\n  /**\n   * Defines maximum amount of constraints.\n   * @group Props\n   */\n  maxConstraints = 2;\n  /**\n   * Defines minimum fraction of digits.\n   * @group Props\n   */\n  minFractionDigits;\n  /**\n   * Defines maximum fraction of digits.\n   * @group Props\n   */\n  maxFractionDigits;\n  /**\n   * Defines prefix of the filter.\n   * @group Props\n   */\n  prefix;\n  /**\n   * Defines suffix of the filter.\n   * @group Props\n   */\n  suffix;\n  /**\n   * Defines filter locale.\n   * @group Props\n   */\n  locale;\n  /**\n   * Defines filter locale matcher.\n   * @group Props\n   */\n  localeMatcher;\n  /**\n   * Enables currency input.\n   * @group Props\n   */\n  currency;\n  /**\n   * Defines the display of the currency input.\n   * @group Props\n   */\n  currencyDisplay;\n  /**\n   * Defines if filter grouping will be enabled.\n   * @group Props\n   */\n  useGrouping = true;\n  /**\n   * Defines the visibility of buttons.\n   * @group Props\n   */\n  showButtons = true;\n  /**\n   * Defines the aria-label of the form element.\n   * @group Props\n   */\n  ariaLabel;\n  /**\n   * Used to pass all filter button property object\n   * @defaultValue {\n   filter: { severity: 'secondary', text: true, rounded: true },\n   inline: {\n   clear: { severity: 'secondary', text: true, rounded: true }\n   },\n   popover: {\n   addRule: { severity: 'info', text: true, size: 'small' },\n   removeRule: { severity: 'danger', text: true, size: 'small' },\n   apply: { size: 'small' },\n   clear: { outlined: true, size: 'small' }\n   }\n   }\n   */\n  filterButtonProps = {\n    filter: {\n      severity: 'secondary',\n      text: true,\n      rounded: true\n    },\n    inline: {\n      clear: {\n        severity: 'secondary',\n        text: true,\n        rounded: true\n      }\n    },\n    popover: {\n      addRule: {\n        severity: 'info',\n        text: true,\n        size: 'small'\n      },\n      removeRule: {\n        severity: 'danger',\n        text: true,\n        size: 'small'\n      },\n      apply: {\n        size: 'small'\n      },\n      clear: {\n        outlined: true,\n        size: 'small'\n      }\n    }\n  };\n  /**\n   * Callback to invoke on overlay is shown.\n   * @param {AnimationEvent} originalEvent - animation event.\n   * @group Emits\n   */\n  onShow = new EventEmitter();\n  /**\n   * Callback to invoke on overlay is hidden.\n   * @param {AnimationEvent} originalEvent - animation event.\n   * @group Emits\n   */\n  onHide = new EventEmitter();\n  icon;\n  clearButtonViewChild;\n  _templates;\n  overlaySubscription;\n  _headerTemplate;\n  headerTemplate;\n  _filterTemplate;\n  filterTemplate;\n  _footerTemplate;\n  footerTemplate;\n  _filterIconTemplate;\n  filterIconTemplate;\n  _removeRuleIconTemplate;\n  removeRuleIconTemplate;\n  _addRuleIconTemplate;\n  addRuleIconTemplate;\n  _clearFilterIconTemplate;\n  clearFilterIconTemplate;\n  operatorOptions;\n  overlayVisible;\n  overlay;\n  scrollHandler;\n  documentClickListener;\n  documentResizeListener;\n  matchModes;\n  translationSubscription;\n  resetSubscription;\n  selfClick;\n  overlayEventListener;\n  overlayId;\n  get fieldConstraints() {\n    return this.dt.filters ? this.dt.filters[this.field] : null;\n  }\n  get showRemoveIcon() {\n    return this.fieldConstraints ? this.fieldConstraints.length > 1 : false;\n  }\n  get showMenuButton() {\n    return this.showMenu && (this.display === 'row' ? this.type !== 'boolean' : true);\n  }\n  get isShowOperator() {\n    return this.showOperator && this.type !== 'boolean';\n  }\n  get isShowAddConstraint() {\n    return this.showAddButton && this.type !== 'boolean' && this.fieldConstraints && this.fieldConstraints.length < this.maxConstraints;\n  }\n  get showMenuButtonLabel() {\n    return this.config.getTranslation(TranslationKeys.SHOW_FILTER_MENU);\n  }\n  get applyButtonLabel() {\n    return this.config.getTranslation(TranslationKeys.APPLY);\n  }\n  get clearButtonLabel() {\n    return this.config.getTranslation(TranslationKeys.CLEAR);\n  }\n  get addRuleButtonLabel() {\n    return this.config.getTranslation(TranslationKeys.ADD_RULE);\n  }\n  get removeRuleButtonLabel() {\n    return this.config.getTranslation(TranslationKeys.REMOVE_RULE);\n  }\n  get noFilterLabel() {\n    return this.config.getTranslation(TranslationKeys.NO_FILTER);\n  }\n  get filterMenuButtonAriaLabel() {\n    return this.config.translation ? this.overlayVisible ? this.config.translation.aria.hideFilterMenu : this.config.translation.aria.showFilterMenu : undefined;\n  }\n  get removeRuleButtonAriaLabel() {\n    return this.config.translation ? this.config.translation.removeRule : undefined;\n  }\n  get filterOperatorAriaLabel() {\n    return this.config.translation ? this.config.translation.aria.filterOperator : undefined;\n  }\n  get filterConstraintAriaLabel() {\n    return this.config.translation ? this.config.translation.aria.filterConstraint : undefined;\n  }\n  dt = inject(Table);\n  overlayService = inject(OverlayService);\n  hostName = 'Table';\n  parentInstance = inject(forwardRef(() => Table));\n  ngOnInit() {\n    super.ngOnInit();\n    this.overlayId = UniqueComponentId();\n    if (!this.dt.filters[this.field]) {\n      this.initFieldFilterConstraint();\n    }\n    this.translationSubscription = this.config.translationObserver.subscribe(() => {\n      this.generateMatchModeOptions();\n      this.generateOperatorOptions();\n    });\n    this.generateMatchModeOptions();\n    this.generateOperatorOptions();\n  }\n  generateMatchModeOptions() {\n    this.matchModes = this.matchModeOptions || this.config.filterMatchModeOptions[this.type]?.map(key => {\n      return {\n        label: this.config.getTranslation(key),\n        value: key\n      };\n    });\n  }\n  generateOperatorOptions() {\n    this.operatorOptions = [{\n      label: this.config.getTranslation(TranslationKeys.MATCH_ALL),\n      value: FilterOperator.AND\n    }, {\n      label: this.config.getTranslation(TranslationKeys.MATCH_ANY),\n      value: FilterOperator.OR\n    }];\n  }\n  ngAfterContentInit() {\n    this._templates.forEach(item => {\n      switch (item.getType()) {\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n        case 'filter':\n          this.filterTemplate = item.template;\n          break;\n        case 'footer':\n          this.footerTemplate = item.template;\n          break;\n        case 'filtericon':\n          this.filterIconTemplate = item.template;\n          break;\n        case 'clearfiltericon':\n          this.clearFilterIconTemplate = item.template;\n          break;\n        case 'removeruleicon':\n          this.removeRuleIconTemplate = item.template;\n          break;\n        case 'addruleicon':\n          this.addRuleIconTemplate = item.template;\n          break;\n        default:\n          this.filterTemplate = item.template;\n          break;\n      }\n    });\n  }\n  initFieldFilterConstraint() {\n    let defaultMatchMode = this.getDefaultMatchMode();\n    this.dt.filters[this.field] = this.display == 'row' ? {\n      value: null,\n      matchMode: defaultMatchMode\n    } : [{\n      value: null,\n      matchMode: defaultMatchMode,\n      operator: this.operator\n    }];\n  }\n  onMenuMatchModeChange(value, filterMeta) {\n    filterMeta.matchMode = value;\n    if (!this.showApplyButton) {\n      this.dt._filter();\n    }\n  }\n  onRowMatchModeChange(matchMode) {\n    const fieldFilter = this.dt.filters[this.field];\n    fieldFilter.matchMode = matchMode;\n    if (fieldFilter.value) {\n      this.dt._filter();\n    }\n    this.hide();\n  }\n  onRowMatchModeKeyDown(event) {\n    let item = event.target;\n    switch (event.key) {\n      case 'ArrowDown':\n        var nextItem = this.findNextItem(item);\n        if (nextItem) {\n          item.removeAttribute('tabindex');\n          nextItem.tabIndex = '0';\n          nextItem.focus();\n        }\n        event.preventDefault();\n        break;\n      case 'ArrowUp':\n        var prevItem = this.findPrevItem(item);\n        if (prevItem) {\n          item.removeAttribute('tabindex');\n          prevItem.tabIndex = '0';\n          prevItem.focus();\n        }\n        event.preventDefault();\n        break;\n    }\n  }\n  onRowClearItemClick() {\n    this.clearFilter();\n    this.hide();\n  }\n  isRowMatchModeSelected(matchMode) {\n    return this.dt.filters[this.field].matchMode === matchMode;\n  }\n  addConstraint() {\n    this.dt.filters[this.field].push({\n      value: null,\n      matchMode: this.getDefaultMatchMode(),\n      operator: this.getDefaultOperator()\n    });\n    DomHandler.focus(this.clearButtonViewChild.nativeElement);\n  }\n  removeConstraint(filterMeta) {\n    this.dt.filters[this.field] = this.dt.filters[this.field].filter(meta => meta !== filterMeta);\n    if (!this.showApplyButton) {\n      this.dt._filter();\n    }\n    DomHandler.focus(this.clearButtonViewChild.nativeElement);\n  }\n  onOperatorChange(value) {\n    this.dt.filters[this.field].forEach(filterMeta => {\n      filterMeta.operator = value;\n      this.operator = value;\n    });\n    if (!this.showApplyButton) {\n      this.dt._filter();\n    }\n  }\n  toggleMenu(event) {\n    this.overlayVisible = !this.overlayVisible;\n    event.stopPropagation();\n  }\n  onToggleButtonKeyDown(event) {\n    switch (event.key) {\n      case 'Escape':\n      case 'Tab':\n        this.overlayVisible = false;\n        break;\n      case 'ArrowDown':\n        if (this.overlayVisible) {\n          let focusable = DomHandler.getFocusableElements(this.overlay);\n          if (focusable) {\n            focusable[0].focus();\n          }\n          event.preventDefault();\n        } else if (event.altKey) {\n          this.overlayVisible = true;\n          event.preventDefault();\n        }\n        break;\n      case 'Enter':\n        this.toggleMenu(event);\n        event.preventDefault();\n        break;\n    }\n  }\n  onEscape() {\n    this.overlayVisible = false;\n    this.icon?.nativeElement.focus();\n  }\n  findNextItem(item) {\n    let nextItem = item.nextElementSibling;\n    if (nextItem) return DomHandler.hasClass(nextItem, 'p-datatable-filter-constraint-separator') ? this.findNextItem(nextItem) : nextItem;else return item.parentElement?.firstElementChild;\n  }\n  findPrevItem(item) {\n    let prevItem = item.previousElementSibling;\n    if (prevItem) return DomHandler.hasClass(prevItem, 'p-datatable-filter-constraint-separator') ? this.findPrevItem(prevItem) : prevItem;else return item.parentElement?.lastElementChild;\n  }\n  onContentClick() {\n    this.selfClick = true;\n  }\n  onOverlayAnimationStart(event) {\n    switch (event.toState) {\n      case 'visible':\n        this.overlay = event.element;\n        this.renderer.appendChild(this.document.body, this.overlay);\n        ZIndexUtils.set('overlay', this.overlay, this.config.zIndex.overlay);\n        DomHandler.absolutePosition(this.overlay, this.icon?.nativeElement);\n        this.bindDocumentClickListener();\n        this.bindDocumentResizeListener();\n        this.bindScrollListener();\n        this.overlayEventListener = e => {\n          if (this.overlay && this.overlay.contains(e.target)) {\n            this.selfClick = true;\n          }\n        };\n        this.overlaySubscription = this.overlayService.clickObservable.subscribe(this.overlayEventListener);\n        this.onShow.emit({\n          originalEvent: event\n        });\n        break;\n      case 'void':\n        this.onOverlayHide();\n        if (this.overlaySubscription) {\n          this.overlaySubscription.unsubscribe();\n        }\n        break;\n    }\n  }\n  onOverlayAnimationEnd(event) {\n    switch (event.toState) {\n      case 'visible':\n        this.focusOnFirstElement();\n        break;\n      case 'void':\n        ZIndexUtils.clear(event.element);\n        this.onHide.emit({\n          originalEvent: event\n        });\n        break;\n    }\n  }\n  focusOnFirstElement() {\n    if (this.overlay) {\n      DomHandler.focus(DomHandler.getFirstFocusableElement(this.overlay, ''));\n    }\n  }\n  getDefaultMatchMode() {\n    if (this.matchMode) {\n      return this.matchMode;\n    } else {\n      if (this.type === 'text') return FilterMatchMode.STARTS_WITH;else if (this.type === 'numeric') return FilterMatchMode.EQUALS;else if (this.type === 'date') return FilterMatchMode.DATE_IS;else return FilterMatchMode.CONTAINS;\n    }\n  }\n  getDefaultOperator() {\n    return this.dt.filters ? this.dt.filters[this.field][0].operator : this.operator;\n  }\n  hasRowFilter() {\n    return this.dt.filters[this.field] && !this.dt.isFilterBlank(this.dt.filters[this.field].value);\n  }\n  get hasFilter() {\n    let fieldFilter = this.dt.filters[this.field];\n    if (fieldFilter) {\n      if (Array.isArray(fieldFilter)) return !this.dt.isFilterBlank(fieldFilter[0].value);else return !this.dt.isFilterBlank(fieldFilter.value);\n    }\n    return false;\n  }\n  isOutsideClicked(event) {\n    return !(DomHandler.hasClass(this.overlay?.nextElementSibling, 'p-overlay') || DomHandler.hasClass(this.overlay?.nextElementSibling, 'p-popover') || this.overlay?.isSameNode(event.target) || this.overlay?.contains(event.target) || this.icon?.nativeElement.isSameNode(event.target) || this.icon?.nativeElement.contains(event.target) || DomHandler.hasClass(event.target, 'p-datatable-filter-add-rule-button') || DomHandler.hasClass(event.target.parentElement, 'p-datatable-filter-add-rule-button') || DomHandler.hasClass(event.target, 'p-datatable-filter-remove-rule-button') || DomHandler.hasClass(event.target.parentElement, 'p-datatable-filter-remove-rule-button'));\n  }\n  bindDocumentClickListener() {\n    if (!this.documentClickListener) {\n      const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n      this.documentClickListener = this.renderer.listen(documentTarget, 'mousedown', event => {\n        const dialogElements = document.querySelectorAll('[role=\"dialog\"]');\n        const targetIsColumnFilterMenuButton = event.target.closest('.p-datatable-column-filter-button');\n        if (this.overlayVisible && this.isOutsideClicked(event) && (targetIsColumnFilterMenuButton || dialogElements?.length <= 1)) {\n          this.hide();\n        }\n        this.selfClick = false;\n      });\n    }\n  }\n  unbindDocumentClickListener() {\n    if (this.documentClickListener) {\n      this.documentClickListener();\n      this.documentClickListener = null;\n      this.selfClick = false;\n    }\n  }\n  bindDocumentResizeListener() {\n    if (!this.documentResizeListener) {\n      this.documentResizeListener = this.renderer.listen(this.document.defaultView, 'resize', event => {\n        if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n          this.hide();\n        }\n      });\n    }\n  }\n  unbindDocumentResizeListener() {\n    if (this.documentResizeListener) {\n      this.documentResizeListener();\n      this.documentResizeListener = null;\n    }\n  }\n  bindScrollListener() {\n    if (!this.scrollHandler) {\n      this.scrollHandler = new ConnectedOverlayScrollHandler(this.icon?.nativeElement, () => {\n        if (this.overlayVisible) {\n          this.hide();\n        }\n      });\n    }\n    this.scrollHandler.bindScrollListener();\n  }\n  unbindScrollListener() {\n    if (this.scrollHandler) {\n      this.scrollHandler.unbindScrollListener();\n    }\n  }\n  hide() {\n    this.overlayVisible = false;\n    this.cd.markForCheck();\n  }\n  onOverlayHide() {\n    this.unbindDocumentClickListener();\n    this.unbindDocumentResizeListener();\n    this.unbindScrollListener();\n    this.overlay = null;\n  }\n  clearFilter() {\n    this.initFieldFilterConstraint();\n    this.dt._filter();\n    if (this.hideOnClear) this.hide();\n  }\n  applyFilter() {\n    this.dt._filter();\n    this.hide();\n  }\n  ngOnDestroy() {\n    if (this.overlay) {\n      this.renderer.appendChild(this.el.nativeElement, this.overlay);\n      ZIndexUtils.clear(this.overlay);\n      this.onOverlayHide();\n    }\n    if (this.translationSubscription) {\n      this.translationSubscription.unsubscribe();\n    }\n    if (this.resetSubscription) {\n      this.resetSubscription.unsubscribe();\n    }\n    if (this.overlaySubscription) {\n      this.overlaySubscription.unsubscribe();\n    }\n    super.ngOnDestroy();\n  }\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵColumnFilter_BaseFactory;\n    return function ColumnFilter_Factory(__ngFactoryType__) {\n      return (ɵColumnFilter_BaseFactory || (ɵColumnFilter_BaseFactory = i0.ɵɵgetInheritedFactory(ColumnFilter)))(__ngFactoryType__ || ColumnFilter);\n    };\n  })();\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ColumnFilter,\n    selectors: [[\"p-columnFilter\"]],\n    contentQueries: function ColumnFilter_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c54, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c5, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c55, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c56, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c57, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c58, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._filterTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._footerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._filterIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._removeRuleIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._addRuleIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._clearFilterIconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._templates = _t);\n      }\n    },\n    viewQuery: function ColumnFilter_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(Button, 5, ElementRef);\n        i0.ɵɵviewQuery(_c59, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.icon = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearButtonViewChild = _t.first);\n      }\n    },\n    inputs: {\n      field: \"field\",\n      type: \"type\",\n      display: \"display\",\n      showMenu: [2, \"showMenu\", \"showMenu\", booleanAttribute],\n      matchMode: \"matchMode\",\n      operator: \"operator\",\n      showOperator: [2, \"showOperator\", \"showOperator\", booleanAttribute],\n      showClearButton: [2, \"showClearButton\", \"showClearButton\", booleanAttribute],\n      showApplyButton: [2, \"showApplyButton\", \"showApplyButton\", booleanAttribute],\n      showMatchModes: [2, \"showMatchModes\", \"showMatchModes\", booleanAttribute],\n      showAddButton: [2, \"showAddButton\", \"showAddButton\", booleanAttribute],\n      hideOnClear: [2, \"hideOnClear\", \"hideOnClear\", booleanAttribute],\n      placeholder: \"placeholder\",\n      matchModeOptions: \"matchModeOptions\",\n      maxConstraints: [2, \"maxConstraints\", \"maxConstraints\", numberAttribute],\n      minFractionDigits: [2, \"minFractionDigits\", \"minFractionDigits\", value => numberAttribute(value, null)],\n      maxFractionDigits: [2, \"maxFractionDigits\", \"maxFractionDigits\", value => numberAttribute(value, null)],\n      prefix: \"prefix\",\n      suffix: \"suffix\",\n      locale: \"locale\",\n      localeMatcher: \"localeMatcher\",\n      currency: \"currency\",\n      currencyDisplay: \"currencyDisplay\",\n      useGrouping: [2, \"useGrouping\", \"useGrouping\", booleanAttribute],\n      showButtons: [2, \"showButtons\", \"showButtons\", booleanAttribute],\n      ariaLabel: \"ariaLabel\",\n      filterButtonProps: \"filterButtonProps\"\n    },\n    outputs: {\n      onShow: \"onShow\",\n      onHide: \"onHide\"\n    },\n    features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 5,\n    consts: [[\"icon\", \"\"], [\"menu\", \"\"], [\"clearBtn\", \"\"], [3, \"ngClass\"], [\"class\", \"p-fluid\", 3, \"type\", \"field\", \"ariaLabel\", \"filterConstraint\", \"filterTemplate\", \"placeholder\", \"minFractionDigits\", \"maxFractionDigits\", \"prefix\", \"suffix\", \"locale\", \"localeMatcher\", \"currency\", \"currencyDisplay\", \"useGrouping\", \"showButtons\", 4, \"ngIf\"], [3, \"styleClass\", \"ariaLabel\", \"buttonProps\", \"click\", \"keydown\", 4, \"ngIf\"], [3, \"styleClass\", \"ariaLabel\", \"buttonProps\", \"onClick\", 4, \"ngIf\"], [\"role\", \"dialog\", 3, \"ngClass\", \"id\", \"click\", \"keydown.escape\", 4, \"ngIf\"], [1, \"p-fluid\", 3, \"type\", \"field\", \"ariaLabel\", \"filterConstraint\", \"filterTemplate\", \"placeholder\", \"minFractionDigits\", \"maxFractionDigits\", \"prefix\", \"suffix\", \"locale\", \"localeMatcher\", \"currency\", \"currencyDisplay\", \"useGrouping\", \"showButtons\"], [3, \"click\", \"keydown\", \"styleClass\", \"ariaLabel\", \"buttonProps\"], [4, \"ngIf\"], [\"class\", \"pi-filter-icon\", 4, \"ngIf\"], [1, \"pi-filter-icon\"], [4, \"ngTemplateOutlet\"], [3, \"onClick\", \"styleClass\", \"ariaLabel\", \"buttonProps\"], [\"role\", \"dialog\", 3, \"click\", \"keydown.escape\", \"ngClass\", \"id\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\", 4, \"ngIf\", \"ngIfElse\"], [3, \"ngClass\", \"p-datatable-filter-constraint-selected\", \"click\", \"keydown\", \"keydown.enter\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\", \"keydown\", \"keydown.enter\", \"ngClass\"], [3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"outlined\", \"label\", \"buttonProps\", \"onClick\", 4, \"ngIf\"], [\"size\", \"small\", 3, \"label\", \"buttonProps\", \"onClick\", 4, \"ngIf\"], [3, \"ngModelChange\", \"options\", \"ngModel\", \"styleClass\"], [3, \"options\", \"ngModel\", \"styleClass\", \"ngModelChange\", 4, \"ngIf\"], [3, \"type\", \"field\", \"filterConstraint\", \"filterTemplate\", \"placeholder\", \"minFractionDigits\", \"maxFractionDigits\", \"prefix\", \"suffix\", \"locale\", \"localeMatcher\", \"currency\", \"currencyDisplay\", \"useGrouping\"], [\"severity\", \"danger\", \"size\", \"small\", 3, \"styleClass\", \"text\", \"ariaLabel\", \"label\", \"buttonProps\", \"onClick\", 4, \"ngIf\"], [\"severity\", \"danger\", \"size\", \"small\", 3, \"onClick\", \"styleClass\", \"text\", \"ariaLabel\", \"label\", \"buttonProps\"], [\"type\", \"button\", \"size\", \"small\", 3, \"onClick\", \"label\", \"styleClass\", \"text\", \"buttonProps\"], [3, \"onClick\", \"outlined\", \"label\", \"buttonProps\"], [\"size\", \"small\", 3, \"onClick\", \"label\", \"buttonProps\"]],\n    template: function ColumnFilter_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 3);\n        i0.ɵɵtemplate(1, ColumnFilter_p_columnFilterFormElement_1_Template, 1, 16, \"p-columnFilterFormElement\", 4)(2, ColumnFilter_p_button_2_Template, 3, 6, \"p-button\", 5)(3, ColumnFilter_p_button_3_Template, 3, 3, \"p-button\", 6)(4, ColumnFilter_div_4_Template, 6, 14, \"div\", 7);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.cx(\"filter\"));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.display === \"row\");\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.showMenuButton);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.showClearButton && ctx.display === \"row\" && ctx.hasFilter);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngIf\", ctx.showMenu && ctx.overlayVisible);\n      }\n    },\n    dependencies: () => [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i8.Select, i5.NgControlStatus, i5.NgModel, i9.Button, FilterIcon, FilterSlashIcon, PlusIcon, TrashIcon, ColumnFilterFormElement],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('.12s cubic-bezier(0, 0, 0.2, 1)')]), transition(':leave', [animate('.1s linear', style({\n        opacity: 0\n      }))])])]\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ColumnFilter, [{\n    type: Component,\n    args: [{\n      selector: 'p-columnFilter',\n      template: `\n        <div [ngClass]=\"cx('filter')\">\n            <p-columnFilterFormElement\n                *ngIf=\"display === 'row'\"\n                class=\"p-fluid\"\n                [type]=\"type\"\n                [field]=\"field\"\n                [ariaLabel]=\"ariaLabel\"\n                [filterConstraint]=\"dt.filters[field]\"\n                [filterTemplate]=\"filterTemplate\"\n                [placeholder]=\"placeholder\"\n                [minFractionDigits]=\"minFractionDigits\"\n                [maxFractionDigits]=\"maxFractionDigits\"\n                [prefix]=\"prefix\"\n                [suffix]=\"suffix\"\n                [locale]=\"locale\"\n                [localeMatcher]=\"localeMatcher\"\n                [currency]=\"currency\"\n                [currencyDisplay]=\"currencyDisplay\"\n                [useGrouping]=\"useGrouping\"\n                [showButtons]=\"showButtons\"\n            ></p-columnFilterFormElement>\n            <p-button\n                *ngIf=\"showMenuButton\"\n                [styleClass]=\"cx('pcColumnFilterButton')\"\n                [attr.aria-haspopup]=\"true\"\n                [ariaLabel]=\"filterMenuButtonAriaLabel\"\n                [attr.aria-controls]=\"overlayVisible ? overlayId : null\"\n                [attr.aria-expanded]=\"overlayVisible ?? false\"\n                (click)=\"toggleMenu($event)\"\n                (keydown)=\"onToggleButtonKeyDown($event)\"\n                [buttonProps]=\"filterButtonProps?.filter\"\n            >\n                <ng-template #icon>\n                    <FilterIcon *ngIf=\"!filterIconTemplate && !_filterIconTemplate\" />\n                    <span class=\"pi-filter-icon\" *ngIf=\"filterIconTemplate || _filterIconTemplate\">\n                        <ng-template *ngTemplateOutlet=\"filterIconTemplate || _filterIconTemplate\"></ng-template>\n                    </span>\n                </ng-template>\n            </p-button>\n            <p-button *ngIf=\"showClearButton && display === 'row' && hasFilter\" [styleClass]=\"cx('pcColumnfilterClearButton')\" (onClick)=\"clearFilter()\" [ariaLabel]=\"clearButtonLabel\" [buttonProps]=\"filterButtonProps?.inline?.clear\">\n                <ng-template #icon>\n                    <FilterSlashIcon *ngIf=\"!clearFilterIconTemplate && !_clearFilterIconTemplate\" />\n                    <ng-template *ngTemplateOutlet=\"clearFilterIconTemplate || _clearFilterIconTemplate\"></ng-template>\n                </ng-template>\n            </p-button>\n            <div\n                *ngIf=\"showMenu && overlayVisible\"\n                [ngClass]=\"cx('filterOverlay')\"\n                [id]=\"overlayId\"\n                [attr.aria-modal]=\"true\"\n                role=\"dialog\"\n                (click)=\"onContentClick()\"\n                [@overlayAnimation]=\"'visible'\"\n                (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\"\n                (@overlayAnimation.done)=\"onOverlayAnimationEnd($event)\"\n                (keydown.escape)=\"onEscape()\"\n            >\n                <ng-container *ngTemplateOutlet=\"headerTemplate || _headerTemplate; context: { $implicit: field }\"></ng-container>\n                <ul *ngIf=\"display === 'row'; else menu\" [ngClass]=\"cx('filterConstraintList')\">\n                    <li\n                        *ngFor=\"let matchMode of matchModes; let i = index\"\n                        (click)=\"onRowMatchModeChange(matchMode.value)\"\n                        (keydown)=\"onRowMatchModeKeyDown($event)\"\n                        (keydown.enter)=\"onRowMatchModeChange(matchMode.value)\"\n                        [ngClass]=\"cx('filterConstraint')\"\n                        [class.p-datatable-filter-constraint-selected]=\"isRowMatchModeSelected(matchMode.value)\"\n                        [attr.tabindex]=\"i === 0 ? '0' : null\"\n                    >\n                        {{ matchMode.label }}\n                    </li>\n                    <li [ngClass]=\"cx('filterConstraintSeparator')\"></li>\n                    <li [ngClass]=\"cx('filterConstraint')\" (click)=\"onRowClearItemClick()\" (keydown)=\"onRowMatchModeKeyDown($event)\" (keydown.enter)=\"onRowClearItemClick()\">\n                        {{ noFilterLabel }}\n                    </li>\n                </ul>\n                <ng-template #menu>\n                    <div [ngClass]=\"cx('filterOperator')\" *ngIf=\"isShowOperator\">\n                        <p-select [options]=\"operatorOptions\" [ngModel]=\"operator\" (ngModelChange)=\"onOperatorChange($event)\" [styleClass]=\"cx('pcFilterOperatorDropdown')\"></p-select>\n                    </div>\n                    <div [ngClass]=\"cx('filterRuleList')\">\n                        <div *ngFor=\"let fieldConstraint of fieldConstraints; let i = index\" [ngClass]=\"cx('filterRule')\">\n                            <p-select\n                                *ngIf=\"showMatchModes && matchModes\"\n                                [options]=\"matchModes\"\n                                [ngModel]=\"fieldConstraint.matchMode\"\n                                (ngModelChange)=\"onMenuMatchModeChange($event, fieldConstraint)\"\n                                [styleClass]=\"cx('pcFilterConstraintDropdown')\"\n                            ></p-select>\n                            <p-columnFilterFormElement\n                                [type]=\"type\"\n                                [field]=\"field\"\n                                [filterConstraint]=\"fieldConstraint\"\n                                [filterTemplate]=\"filterTemplate || _filterTemplate\"\n                                [placeholder]=\"placeholder\"\n                                [minFractionDigits]=\"minFractionDigits\"\n                                [maxFractionDigits]=\"maxFractionDigits\"\n                                [prefix]=\"prefix\"\n                                [suffix]=\"suffix\"\n                                [locale]=\"locale\"\n                                [localeMatcher]=\"localeMatcher\"\n                                [currency]=\"currency\"\n                                [currencyDisplay]=\"currencyDisplay\"\n                                [useGrouping]=\"useGrouping\"\n                            ></p-columnFilterFormElement>\n                            <div>\n                                <p-button\n                                    *ngIf=\"showRemoveIcon\"\n                                    [styleClass]=\"cx('pcFilterRemoveRuleButton')\"\n                                    [text]=\"true\"\n                                    severity=\"danger\"\n                                    size=\"small\"\n                                    (onClick)=\"removeConstraint(fieldConstraint)\"\n                                    [ariaLabel]=\"removeRuleButtonLabel\"\n                                    [label]=\"removeRuleButtonLabel\"\n                                    [buttonProps]=\"filterButtonProps?.popover?.removeRule\"\n                                >\n                                    <TrashIcon *ngIf=\"!removeRuleIconTemplate && !_removeRuleIconTemplate\" />\n                                    <ng-template *ngTemplateOutlet=\"removeRuleIconTemplate || _removeRuleIconTemplate\"></ng-template>\n                                </p-button>\n                            </div>\n                        </div>\n                    </div>\n                    <div *ngIf=\"isShowAddConstraint\">\n                        <p-button\n                            type=\"button\"\n                            [label]=\"addRuleButtonLabel\"\n                            [attr.aria-label]=\"addRuleButtonLabel\"\n                            [styleClass]=\"cx('pcFilterAddRuleButton')\"\n                            [text]=\"true\"\n                            size=\"small\"\n                            (onClick)=\"addConstraint()\"\n                            [buttonProps]=\"filterButtonProps?.popover?.addRule\"\n                        >\n                            <PlusIcon *ngIf=\"!addRuleIconTemplate && !_addRuleIconTemplate\" />\n                            <ng-template *ngTemplateOutlet=\"addRuleIconTemplate || _addRuleIconTemplate\"></ng-template>\n                        </p-button>\n                    </div>\n                    <div [ngClass]=\"cx('filterButtonbar')\">\n                        <p-button #clearBtn *ngIf=\"showClearButton\" [outlined]=\"true\" (onClick)=\"clearFilter()\" [attr.aria-label]=\"clearButtonLabel\" [label]=\"clearButtonLabel\" [buttonProps]=\"filterButtonProps?.popover?.clear\" />\n                        <p-button *ngIf=\"showApplyButton\" (onClick)=\"applyFilter()\" size=\"small\" [label]=\"applyButtonLabel\" [attr.aria-label]=\"applyButtonLabel\" [buttonProps]=\"filterButtonProps?.popover?.apply\" />\n                    </div>\n                </ng-template>\n                <ng-container *ngTemplateOutlet=\"footerTemplate || _footerTemplate; context: { $implicit: field }\"></ng-container>\n            </div>\n        </div>\n    `,\n      animations: [trigger('overlayAnimation', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scaleY(0.8)'\n      }), animate('.12s cubic-bezier(0, 0, 0.2, 1)')]), transition(':leave', [animate('.1s linear', style({\n        opacity: 0\n      }))])])],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], null, {\n    field: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    display: [{\n      type: Input\n    }],\n    showMenu: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    matchMode: [{\n      type: Input\n    }],\n    operator: [{\n      type: Input\n    }],\n    showOperator: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showClearButton: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showApplyButton: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showMatchModes: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showAddButton: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    hideOnClear: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    matchModeOptions: [{\n      type: Input\n    }],\n    maxConstraints: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    minFractionDigits: [{\n      type: Input,\n      args: [{\n        transform: value => numberAttribute(value, null)\n      }]\n    }],\n    maxFractionDigits: [{\n      type: Input,\n      args: [{\n        transform: value => numberAttribute(value, null)\n      }]\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }],\n    localeMatcher: [{\n      type: Input\n    }],\n    currency: [{\n      type: Input\n    }],\n    currencyDisplay: [{\n      type: Input\n    }],\n    useGrouping: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    showButtons: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    filterButtonProps: [{\n      type: Input\n    }],\n    onShow: [{\n      type: Output\n    }],\n    onHide: [{\n      type: Output\n    }],\n    icon: [{\n      type: ViewChild,\n      args: [Button, {\n        static: false,\n        read: ElementRef\n      }]\n    }],\n    clearButtonViewChild: [{\n      type: ViewChild,\n      args: ['clearBtn']\n    }],\n    _templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }],\n    _headerTemplate: [{\n      type: ContentChild,\n      args: ['header', {\n        descendants: false\n      }]\n    }],\n    _filterTemplate: [{\n      type: ContentChild,\n      args: ['filter', {\n        descendants: false\n      }]\n    }],\n    _footerTemplate: [{\n      type: ContentChild,\n      args: ['footer', {\n        descendants: false\n      }]\n    }],\n    _filterIconTemplate: [{\n      type: ContentChild,\n      args: ['filtericon', {\n        descendants: false\n      }]\n    }],\n    _removeRuleIconTemplate: [{\n      type: ContentChild,\n      args: ['removeruleicon', {\n        descendants: false\n      }]\n    }],\n    _addRuleIconTemplate: [{\n      type: ContentChild,\n      args: ['addruleicon', {\n        descendants: false\n      }]\n    }],\n    _clearFilterIconTemplate: [{\n      type: ContentChild,\n      args: ['clearfiltericon', {\n        descendants: false\n      }]\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(ColumnFilter, {\n    className: \"ColumnFilter\"\n  });\n})();\nclass ColumnFilterFormElement {\n  dt;\n  colFilter;\n  field;\n  type;\n  filterConstraint;\n  filterTemplate;\n  placeholder;\n  minFractionDigits;\n  maxFractionDigits;\n  prefix;\n  suffix;\n  locale;\n  localeMatcher;\n  currency;\n  currencyDisplay;\n  useGrouping = true;\n  ariaLabel;\n  get showButtons() {\n    return this.colFilter.showButtons;\n  }\n  filterCallback;\n  constructor(dt, colFilter) {\n    this.dt = dt;\n    this.colFilter = colFilter;\n  }\n  ngOnInit() {\n    this.filterCallback = value => {\n      this.filterConstraint.value = value;\n      this.dt._filter();\n    };\n  }\n  onModelChange(value) {\n    this.filterConstraint.value = value;\n    if (this.type === 'date' || this.type === 'boolean' || value === '') {\n      this.dt._filter();\n    }\n  }\n  onTextInputEnterKeyDown(event) {\n    this.dt._filter();\n    event.preventDefault();\n  }\n  onNumericInputKeyDown(event) {\n    if (event.key === 'Enter') {\n      this.dt._filter();\n      event.preventDefault();\n    }\n  }\n  static ɵfac = function ColumnFilterFormElement_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ColumnFilterFormElement)(i0.ɵɵdirectiveInject(Table), i0.ɵɵdirectiveInject(ColumnFilter));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ColumnFilterFormElement,\n    selectors: [[\"p-columnFilterFormElement\"]],\n    inputs: {\n      field: \"field\",\n      type: \"type\",\n      filterConstraint: \"filterConstraint\",\n      filterTemplate: \"filterTemplate\",\n      placeholder: \"placeholder\",\n      minFractionDigits: [2, \"minFractionDigits\", \"minFractionDigits\", value => numberAttribute(value, null)],\n      maxFractionDigits: [2, \"maxFractionDigits\", \"maxFractionDigits\", value => numberAttribute(value, null)],\n      prefix: \"prefix\",\n      suffix: \"suffix\",\n      locale: \"locale\",\n      localeMatcher: \"localeMatcher\",\n      currency: \"currency\",\n      currencyDisplay: \"currencyDisplay\",\n      useGrouping: [2, \"useGrouping\", \"useGrouping\", booleanAttribute],\n      ariaLabel: \"ariaLabel\"\n    },\n    features: [i0.ɵɵInputTransformsFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[\"builtInElement\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngSwitch\"], [\"type\", \"text\", \"pInputText\", \"\", 3, \"ariaLabel\", \"value\", \"input\", \"keydown.enter\", 4, \"ngSwitchCase\"], [3, \"ngModel\", \"showButtons\", \"minFractionDigits\", \"maxFractionDigits\", \"ariaLabel\", \"prefix\", \"suffix\", \"placeholder\", \"mode\", \"locale\", \"localeMatcher\", \"currency\", \"currencyDisplay\", \"useGrouping\", \"ngModelChange\", \"onKeyDown\", 4, \"ngSwitchCase\"], [3, \"indeterminate\", \"binary\", \"ngModel\", \"ngModelChange\", 4, \"ngSwitchCase\"], [\"appendTo\", \"body\", 3, \"ariaLabel\", \"placeholder\", \"ngModel\", \"ngModelChange\", 4, \"ngSwitchCase\"], [\"type\", \"text\", \"pInputText\", \"\", 3, \"input\", \"keydown.enter\", \"ariaLabel\", \"value\"], [3, \"ngModelChange\", \"onKeyDown\", \"ngModel\", \"showButtons\", \"minFractionDigits\", \"maxFractionDigits\", \"ariaLabel\", \"prefix\", \"suffix\", \"placeholder\", \"mode\", \"locale\", \"localeMatcher\", \"currency\", \"currencyDisplay\", \"useGrouping\"], [3, \"ngModelChange\", \"indeterminate\", \"binary\", \"ngModel\"], [\"appendTo\", \"body\", 3, \"ngModelChange\", \"ariaLabel\", \"placeholder\", \"ngModel\"]],\n    template: function ColumnFilterFormElement_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ColumnFilterFormElement_ng_container_0_Template, 2, 19, \"ng-container\", 1)(1, ColumnFilterFormElement_ng_template_1_Template, 5, 5, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const builtInElement_r6 = i0.ɵɵreference(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.filterTemplate)(\"ngIfElse\", builtInElement_r6);\n      }\n    },\n    dependencies: [i1.NgIf, i1.NgTemplateOutlet, i1.NgSwitch, i1.NgSwitchCase, i10.InputText, i5.NgControlStatus, i5.NgModel, i11.DatePicker, i12.InputNumber, i7.Checkbox],\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ColumnFilterFormElement, [{\n    type: Component,\n    args: [{\n      selector: 'p-columnFilterFormElement',\n      template: `\n        <ng-container *ngIf=\"filterTemplate; else builtInElement\">\n            <ng-container\n                *ngTemplateOutlet=\"\n                    filterTemplate;\n                    context: {\n                        $implicit: filterConstraint.value,\n                        filterCallback: filterCallback,\n                        type: type,\n                        field: field,\n                        filterConstraint: filterConstraint,\n                        placeholder: placeholder,\n                        minFractionDigits: minFractionDigits,\n                        maxFractionDigits: maxFractionDigits,\n                        prefix: prefix,\n                        suffix: suffix,\n                        locale: locale,\n                        localeMatcher: localeMatcher,\n                        currency: currency,\n                        currencyDisplay: currencyDisplay,\n                        useGrouping: useGrouping,\n                        showButtons: showButtons\n                    }\n                \"\n            ></ng-container>\n        </ng-container>\n        <ng-template #builtInElement>\n            <ng-container [ngSwitch]=\"type\">\n                <input\n                    *ngSwitchCase=\"'text'\"\n                    type=\"text\"\n                    [ariaLabel]=\"ariaLabel\"\n                    pInputText\n                    [value]=\"filterConstraint?.value\"\n                    (input)=\"onModelChange($event.target.value)\"\n                    (keydown.enter)=\"onTextInputEnterKeyDown($event)\"\n                    [attr.placeholder]=\"placeholder\"\n                />\n                <p-inputNumber\n                    *ngSwitchCase=\"'numeric'\"\n                    [ngModel]=\"filterConstraint?.value\"\n                    (ngModelChange)=\"onModelChange($event)\"\n                    (onKeyDown)=\"onNumericInputKeyDown($event)\"\n                    [showButtons]=\"showButtons\"\n                    [minFractionDigits]=\"minFractionDigits\"\n                    [maxFractionDigits]=\"maxFractionDigits\"\n                    [ariaLabel]=\"ariaLabel\"\n                    [prefix]=\"prefix\"\n                    [suffix]=\"suffix\"\n                    [placeholder]=\"placeholder\"\n                    [mode]=\"currency ? 'currency' : 'decimal'\"\n                    [locale]=\"locale\"\n                    [localeMatcher]=\"localeMatcher\"\n                    [currency]=\"currency\"\n                    [currencyDisplay]=\"currencyDisplay\"\n                    [useGrouping]=\"useGrouping\"\n                ></p-inputNumber>\n                <p-checkbox [indeterminate]=\"true\" [binary]=\"true\" *ngSwitchCase=\"'boolean'\" [ngModel]=\"filterConstraint?.value\" (ngModelChange)=\"onModelChange($event)\" />\n\n                <p-datepicker [ariaLabel]=\"ariaLabel\" *ngSwitchCase=\"'date'\" [placeholder]=\"placeholder\" [ngModel]=\"filterConstraint?.value\" (ngModelChange)=\"onModelChange($event)\" appendTo=\"body\"></p-datepicker>\n            </ng-container>\n        </ng-template>\n    `,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], () => [{\n    type: Table\n  }, {\n    type: ColumnFilter\n  }], {\n    field: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    filterConstraint: [{\n      type: Input\n    }],\n    filterTemplate: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    minFractionDigits: [{\n      type: Input,\n      args: [{\n        transform: value => numberAttribute(value, null)\n      }]\n    }],\n    maxFractionDigits: [{\n      type: Input,\n      args: [{\n        transform: value => numberAttribute(value, null)\n      }]\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    locale: [{\n      type: Input\n    }],\n    localeMatcher: [{\n      type: Input\n    }],\n    currency: [{\n      type: Input\n    }],\n    currencyDisplay: [{\n      type: Input\n    }],\n    useGrouping: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    ariaLabel: [{\n      type: Input\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(ColumnFilterFormElement, {\n    className: \"ColumnFilterFormElement\"\n  });\n})();\nclass TableModule {\n  static ɵfac = function TableModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || TableModule)();\n  };\n  static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: TableModule\n  });\n  static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [TableStyle],\n    imports: [CommonModule, PaginatorModule, InputTextModule, SelectModule, FormsModule, ButtonModule, SelectButtonModule, DatePickerModule, InputNumberModule, CheckboxModule, ScrollerModule, ArrowDownIcon, ArrowUpIcon, SpinnerIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, FilterIcon, FilterSlashIcon, PlusIcon, TrashIcon, RadioButtonModule, SharedModule, ScrollerModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, PaginatorModule, InputTextModule, SelectModule, FormsModule, ButtonModule, SelectButtonModule, DatePickerModule, InputNumberModule, CheckboxModule, ScrollerModule, ArrowDownIcon, ArrowUpIcon, SpinnerIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, FilterIcon, FilterSlashIcon, PlusIcon, TrashIcon, RadioButtonModule],\n      exports: [Table, SharedModule, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement, ScrollerModule],\n      declarations: [Table, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, TableBody, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement],\n      providers: [TableStyle]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TableModule, {\n    declarations: [Table, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, TableBody, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement],\n    imports: [CommonModule, PaginatorModule, InputTextModule, SelectModule, FormsModule, ButtonModule, SelectButtonModule, DatePickerModule, InputNumberModule, CheckboxModule, ScrollerModule, ArrowDownIcon, ArrowUpIcon, SpinnerIcon, SortAltIcon, SortAmountUpAltIcon, SortAmountDownIcon, CheckIcon, FilterIcon, FilterSlashIcon, PlusIcon, TrashIcon, RadioButtonModule],\n    exports: [Table, SharedModule, SortableColumn, FrozenColumn, RowGroupHeader, SelectableRow, RowToggler, ContextMenuRow, ResizableColumn, ReorderableColumn, EditableColumn, CellEditor, SortIcon, TableRadioButton, TableCheckbox, TableHeaderCheckbox, ReorderableRowHandle, ReorderableRow, SelectableRowDblClick, EditableRow, InitEditableRow, SaveEditableRow, CancelEditableRow, ColumnFilter, ColumnFilterFormElement, ScrollerModule]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CancelEditableRow, CellEditor, ColumnFilter, ColumnFilterFormElement, ContextMenuRow, EditableColumn, EditableRow, FrozenColumn, InitEditableRow, ReorderableColumn, ReorderableRow, ReorderableRowHandle, ResizableColumn, RowGroupHeader, RowToggler, SaveEditableRow, SelectableRow, SelectableRowDblClick, SortIcon, SortableColumn, Table, TableBody, TableCheckbox, TableClasses, TableHeaderCheckbox, TableModule, TableRadioButton, TableService, TableStyle };\n//# sourceMappingURL=primeng-table.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}