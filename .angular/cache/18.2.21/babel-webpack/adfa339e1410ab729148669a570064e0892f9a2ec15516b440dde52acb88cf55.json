{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, Directive, Input, input, booleanAttribute, computed, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { isNotEmpty, isEmpty, uuid, hasClass, removeClass, addClass } from '@primeuix/utils';\nimport { SharedModule } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { BaseStyle } from 'primeng/base';\nconst theme = ({\n  dt\n}) => `\n.p-badge {\n    display: inline-flex;\n    border-radius: ${dt('badge.border.radius')};\n    justify-content: center;\n    padding: ${dt('badge.padding')};\n    background: ${dt('badge.primary.background')};\n    color: ${dt('badge.primary.color')};\n    font-size: ${dt('badge.font.size')};\n    font-weight: ${dt('badge.font.weight')};\n    min-width: ${dt('badge.min.width')};\n    height: ${dt('badge.height')};\n    line-height: ${dt('badge.height')};\n}\n\n.p-badge-dot {\n    width: ${dt('badge.dot.size')};\n    min-width: ${dt('badge.dot.size')};\n    height: ${dt('badge.dot.size')};\n    border-radius: 50%;\n    padding: 0;\n}\n\n.p-badge-circle {\n    padding: 0;\n    border-radius: 50%;\n}\n\n.p-badge-secondary {\n    background: ${dt('badge.secondary.background')};\n    color: ${dt('badge.secondary.color')};\n}\n\n.p-badge-success {\n    background: ${dt('badge.success.background')};\n    color: ${dt('badge.success.color')};\n}\n\n.p-badge-info {\n    background: ${dt('badge.info.background')};\n    color: ${dt('badge.info.color')};\n}\n\n.p-badge-warn {\n    background: ${dt('badge.warn.background')};\n    color: ${dt('badge.warn.color')};\n}\n\n.p-badge-danger {\n    background: ${dt('badge.danger.background')};\n    color: ${dt('badge.danger.color')};\n}\n\n.p-badge-contrast {\n    background: ${dt('badge.contrast.background')};\n    color: ${dt('badge.contrast.color')};\n}\n\n.p-badge-sm {\n    font-size: ${dt('badge.sm.font.size')};\n    min-width: ${dt('badge.sm.min.width')};\n    height: ${dt('badge.sm.height')};\n    line-height: ${dt('badge.sm.height')};\n}\n\n.p-badge-lg {\n    font-size: ${dt('badge.lg.font.size')};\n    min-width: ${dt('badge.lg.min.width')};\n    height: ${dt('badge.lg.height')};\n    line-height: ${dt('badge.lg.height')};\n}\n\n.p-badge-xl {\n    font-size: ${dt('badge.xl.font.size')};\n    min-width: ${dt('badge.xl.min.width')};\n    height: ${dt('badge.xl.height')};\n    line-height: ${dt('badge.xl.height')};\n}\n\n/* For PrimeNG (directive)*/\n\n.p-overlay-badge {\n    position: relative;\n}\n\n.p-overlay-badge > .p-badge {\n    position: absolute;\n    top: 0;\n    inset-inline-end: 0;\n    transform: translate(50%, -50%);\n    transform-origin: 100% 0;\n    margin: 0;\n}\n`;\nconst classes = {\n  root: ({\n    props,\n    instance\n  }) => ['p-badge p-component', {\n    'p-badge-circle': isNotEmpty(props.value) && String(props.value).length === 1,\n    'p-badge-dot': isEmpty(props.value) && !instance.$slots.default,\n    'p-badge-sm': props.size === 'small',\n    'p-badge-lg': props.size === 'large',\n    'p-badge-xl': props.size === 'xlarge',\n    'p-badge-info': props.severity === 'info',\n    'p-badge-success': props.severity === 'success',\n    'p-badge-warn': props.severity === 'warn',\n    'p-badge-danger': props.severity === 'danger',\n    'p-badge-secondary': props.severity === 'secondary',\n    'p-badge-contrast': props.severity === 'contrast'\n  }]\n};\nclass BadgeStyle extends BaseStyle {\n  name = 'badge';\n  theme = theme;\n  classes = classes;\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵBadgeStyle_BaseFactory;\n    return function BadgeStyle_Factory(__ngFactoryType__) {\n      return (ɵBadgeStyle_BaseFactory || (ɵBadgeStyle_BaseFactory = i0.ɵɵgetInheritedFactory(BadgeStyle)))(__ngFactoryType__ || BadgeStyle);\n    };\n  })();\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BadgeStyle,\n    factory: BadgeStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BadgeStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Badge represents people using icons, labels and images.\n *\n * [Live Demo](https://www.primeng.org/badge)\n *\n * @module badgestyle\n *\n */\nvar BadgeClasses;\n(function (BadgeClasses) {\n  /**\n   * Class name of the root element\n   */\n  BadgeClasses[\"root\"] = \"p-badge\";\n})(BadgeClasses || (BadgeClasses = {}));\n\n/**\n * Badge Directive is directive usage of badge component.\n * @group Components\n */\nclass BadgeDirective extends BaseComponent {\n  /**\n   * When specified, disables the component.\n   * @group Props\n   */\n  disabled;\n  /**\n   * Size of the badge, valid options are \"large\" and \"xlarge\".\n   * @group Props\n   */\n  badgeSize;\n  /**\n   * Size of the badge, valid options are \"large\" and \"xlarge\".\n   * @group Props\n   * @deprecated use badgeSize instead.\n   */\n  set size(value) {\n    this._size = value;\n    console.log('size property is deprecated and will removed in v18, use badgeSize instead.');\n  }\n  get size() {\n    return this._size;\n  }\n  _size;\n  /**\n   * Severity type of the badge.\n   * @group Props\n   */\n  severity;\n  /**\n   * Value to display inside the badge.\n   * @group Props\n   */\n  value;\n  /**\n   * Inline style of the element.\n   * @group Props\n   */\n  badgeStyle;\n  /**\n   * Class of the element.\n   * @group Props\n   */\n  badgeStyleClass;\n  id;\n  badgeEl;\n  _componentStyle = inject(BadgeStyle);\n  get activeElement() {\n    return this.el.nativeElement.nodeName.indexOf('-') != -1 ? this.el.nativeElement.firstChild : this.el.nativeElement;\n  }\n  get canUpdateBadge() {\n    return this.id && !this.disabled;\n  }\n  constructor() {\n    super();\n  }\n  ngOnChanges({\n    value,\n    size,\n    severity,\n    disabled,\n    badgeStyle,\n    badgeStyleClass\n  }) {\n    super.ngOnChanges({\n      value,\n      size,\n      severity,\n      disabled\n    });\n    if (disabled) {\n      this.toggleDisableState();\n    }\n    if (!this.canUpdateBadge) {\n      return;\n    }\n    if (severity) {\n      this.setSeverity(severity.previousValue);\n    }\n    if (size) {\n      this.setSizeClasses();\n    }\n    if (value) {\n      this.setValue();\n    }\n    if (badgeStyle || badgeStyleClass) {\n      this.applyStyles();\n    }\n  }\n  ngAfterViewInit() {\n    this.id = uuid('pn_id_') + '_badge';\n    this.renderBadgeContent();\n  }\n  setValue(element) {\n    const badge = element ?? this.document.getElementById(this.id);\n    if (!badge) {\n      return;\n    }\n    if (this.value != null) {\n      if (hasClass(badge, 'p-badge-dot')) {\n        removeClass(badge, 'p-badge-dot');\n      }\n      if (this.value && String(this.value).length === 1) {\n        addClass(badge, 'p-badge-circle');\n      } else {\n        removeClass(badge, 'p-badge-circle');\n      }\n    } else {\n      if (!hasClass(badge, 'p-badge-dot')) {\n        addClass(badge, 'p-badge-dot');\n      }\n      removeClass(badge, 'p-badge-circle');\n    }\n    badge.innerHTML = '';\n    const badgeValue = this.value != null ? String(this.value) : '';\n    this.renderer.appendChild(badge, this.document.createTextNode(badgeValue));\n  }\n  setSizeClasses(element) {\n    const badge = element ?? this.document.getElementById(this.id);\n    if (!badge) {\n      return;\n    }\n    if (this.badgeSize) {\n      if (this.badgeSize === 'large') {\n        addClass(badge, 'p-badge-lg');\n        removeClass(badge, 'p-badge-xl');\n      }\n      if (this.badgeSize === 'xlarge') {\n        addClass(badge, 'p-badge-xl');\n        removeClass(badge, 'p-badge-lg');\n      }\n    } else if (this.size && !this.badgeSize) {\n      if (this.size === 'large') {\n        addClass(badge, 'p-badge-lg');\n        removeClass(badge, 'p-badge-xl');\n      }\n      if (this.size === 'xlarge') {\n        addClass(badge, 'p-badge-xl');\n        removeClass(badge, 'p-badge-lg');\n      }\n    } else {\n      removeClass(badge, 'p-badge-lg');\n      removeClass(badge, 'p-badge-xl');\n    }\n  }\n  renderBadgeContent() {\n    if (this.disabled) {\n      return null;\n    }\n    const el = this.activeElement;\n    const badge = this.document.createElement('span');\n    badge.id = this.id;\n    badge.className = 'p-badge p-component';\n    this.setSeverity(null, badge);\n    this.setSizeClasses(badge);\n    this.setValue(badge);\n    addClass(el, 'p-overlay-badge');\n    this.renderer.appendChild(el, badge);\n    this.badgeEl = badge;\n    this.applyStyles();\n  }\n  applyStyles() {\n    if (this.badgeEl && this.badgeStyle && typeof this.badgeStyle === 'object') {\n      for (const [key, value] of Object.entries(this.badgeStyle)) {\n        this.renderer.setStyle(this.badgeEl, key, value);\n      }\n    }\n    if (this.badgeEl && this.badgeStyleClass) {\n      this.badgeEl.classList.add(...this.badgeStyleClass.split(' '));\n    }\n  }\n  setSeverity(oldSeverity, element) {\n    const badge = element ?? this.document.getElementById(this.id);\n    if (!badge) {\n      return;\n    }\n    if (this.severity) {\n      addClass(badge, `p-badge-${this.severity}`);\n    }\n    if (oldSeverity) {\n      removeClass(badge, `p-badge-${oldSeverity}`);\n    }\n  }\n  toggleDisableState() {\n    if (!this.id) {\n      return;\n    }\n    if (this.disabled) {\n      const badge = this.activeElement?.querySelector(`#${this.id}`);\n      if (badge) {\n        this.renderer.removeChild(this.activeElement, badge);\n      }\n    } else {\n      this.renderBadgeContent();\n    }\n  }\n  static ɵfac = function BadgeDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BadgeDirective)();\n  };\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: BadgeDirective,\n    selectors: [[\"\", \"pBadge\", \"\"]],\n    inputs: {\n      disabled: [0, \"badgeDisabled\", \"disabled\"],\n      badgeSize: \"badgeSize\",\n      size: \"size\",\n      severity: \"severity\",\n      value: \"value\",\n      badgeStyle: \"badgeStyle\",\n      badgeStyleClass: \"badgeStyleClass\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([BadgeStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BadgeDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[pBadge]',\n      providers: [BadgeStyle],\n      standalone: true\n    }]\n  }], () => [], {\n    disabled: [{\n      type: Input,\n      args: ['badgeDisabled']\n    }],\n    badgeSize: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    severity: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    badgeStyle: [{\n      type: Input\n    }],\n    badgeStyleClass: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Badge is a small status indicator for another element.\n * @group Components\n */\nclass Badge extends BaseComponent {\n  /**\n   * Class of the element.\n   * @group Props\n   */\n  styleClass = input();\n  /**\n   * Inline style of the element.\n   * @group Props\n   */\n  style = input();\n  /**\n   * Size of the badge, valid options are \"large\" and \"xlarge\".\n   * @group Props\n   */\n  badgeSize = input();\n  /**\n   * Size of the badge, valid options are \"large\" and \"xlarge\".\n   * @group Props\n   */\n  size = input();\n  /**\n   * Severity type of the badge.\n   * @group Props\n   */\n  severity = input();\n  /**\n   * Value to display inside the badge.\n   * @group Props\n   */\n  value = input();\n  /**\n   * When specified, disables the component.\n   * @group Props\n   */\n  badgeDisabled = input(false, {\n    transform: booleanAttribute\n  });\n  _componentStyle = inject(BadgeStyle);\n  /**\n   * Computes the container class for the badge element based on its properties.\n   * @returns An object representing the CSS classes to be applied to the badge container.\n   */\n  containerClass = computed(() => {\n    let classes = 'p-badge p-component';\n    if (isNotEmpty(this.value()) && String(this.value()).length === 1) {\n      classes += ' p-badge-circle';\n    }\n    if (this.badgeSize() === 'large') {\n      classes += ' p-badge-lg';\n    } else if (this.badgeSize() === 'xlarge') {\n      classes += ' p-badge-xl';\n    } else if (this.badgeSize() === 'small') {\n      classes += ' p-badge-sm';\n    }\n    if (isEmpty(this.value())) {\n      classes += ' p-badge-dot';\n    }\n    if (this.styleClass()) {\n      classes += ` ${this.styleClass()}`;\n    }\n    if (this.severity()) {\n      classes += ` p-badge-${this.severity()}`;\n    }\n    return classes;\n  });\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵBadge_BaseFactory;\n    return function Badge_Factory(__ngFactoryType__) {\n      return (ɵBadge_BaseFactory || (ɵBadge_BaseFactory = i0.ɵɵgetInheritedFactory(Badge)))(__ngFactoryType__ || Badge);\n    };\n  })();\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Badge,\n    selectors: [[\"p-badge\"]],\n    hostVars: 6,\n    hostBindings: function Badge_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleMap(ctx.style());\n        i0.ɵɵclassMap(ctx.containerClass());\n        i0.ɵɵstyleProp(\"display\", ctx.badgeDisabled() && \"none\");\n      }\n    },\n    inputs: {\n      styleClass: [1, \"styleClass\"],\n      style: [1, \"style\"],\n      badgeSize: [1, \"badgeSize\"],\n      size: [1, \"size\"],\n      severity: [1, \"severity\"],\n      value: [1, \"value\"],\n      badgeDisabled: [1, \"badgeDisabled\"]\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([BadgeStyle]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 1,\n    template: function Badge_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtext(0);\n      }\n      if (rf & 2) {\n        i0.ɵɵtextInterpolate(ctx.value());\n      }\n    },\n    dependencies: [CommonModule, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Badge, [{\n    type: Component,\n    args: [{\n      selector: 'p-badge',\n      template: `{{ value() }}`,\n      standalone: true,\n      imports: [CommonModule, SharedModule],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [BadgeStyle],\n      host: {\n        '[class]': 'containerClass()',\n        '[style.display]': 'badgeDisabled() && \"none\"',\n        '[style]': 'style()'\n      }\n    }]\n  }], null, null);\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(Badge, {\n    className: \"Badge\"\n  });\n})();\nclass BadgeModule {\n  static ɵfac = function BadgeModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BadgeModule)();\n  };\n  static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: BadgeModule\n  });\n  static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [Badge, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Badge, BadgeDirective, SharedModule],\n      exports: [Badge, BadgeDirective, SharedModule]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(BadgeModule, {\n    imports: [Badge, BadgeDirective, SharedModule],\n    exports: [Badge, BadgeDirective, SharedModule]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Badge, BadgeClasses, BadgeDirective, BadgeModule, BadgeStyle };\n//# sourceMappingURL=primeng-badge.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}