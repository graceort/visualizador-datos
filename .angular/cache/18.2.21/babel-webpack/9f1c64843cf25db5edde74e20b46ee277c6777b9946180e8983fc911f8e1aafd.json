{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, forwardRef, EventEmitter, inject, booleanAttribute, numberAttribute, Component, ChangeDetectionStrategy, Input, HostBinding, Output, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { Ripple } from 'primeng/ripple';\nimport { BaseStyle } from 'primeng/base';\nconst theme = ({\n  dt\n}) => `\n.p-togglebutton {\n    display: inline-flex;\n    cursor: pointer;\n    user-select: none;\n    align-items: center;\n    justify-content: center;\n    overflow: hidden;\n    position: relative;\n    color: ${dt('togglebutton.color')};\n    background: ${dt('togglebutton.background')};\n    border: 1px solid ${dt('togglebutton.border.color')};\n    padding: ${dt('togglebutton.padding')};\n    font-size: 1rem;\n    font-family: inherit;\n    font-feature-settings: inherit;\n    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},\n        outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};\n    border-radius: ${dt('togglebutton.border.radius')};\n    outline-color: transparent;\n    font-weight: ${dt('togglebutton.font.weight')};\n}\n\n.p-togglebutton-content {\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: ${dt('togglebutton.gap')};\n}\n\n.p-togglebutton-label,\n.p-togglebutton-icon {\n    position: relative;\n    transition: none;\n}\n\n.p-togglebutton::before {\n    content: \"\";\n    background: transparent;\n    transition: background ${dt('togglebutton.transition.duration')}, color ${dt('togglebutton.transition.duration')}, border-color ${dt('togglebutton.transition.duration')},\n            outline-color ${dt('togglebutton.transition.duration')}, box-shadow ${dt('togglebutton.transition.duration')};\n    position: absolute;\n    inset-inline-start: ${dt('togglebutton.content.left')};\n    top: ${dt('togglebutton.content.top')};\n    width: calc(100% - calc(2 *  ${dt('togglebutton.content.left')}));\n    height: calc(100% - calc(2 *  ${dt('togglebutton.content.top')}));\n    border-radius: ${dt('togglebutton.border.radius')};\n}\n\n.p-togglebutton.p-togglebutton-checked::before {\n    background: ${dt('togglebutton.content.checked.background')};\n    box-shadow: ${dt('togglebutton.content.checked.shadow')};\n}\n\n.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover {\n    background: ${dt('togglebutton.hover.background')};\n    color: ${dt('togglebutton.hover.color')};\n}\n\n.p-togglebutton.p-togglebutton-checked {\n    background: ${dt('togglebutton.checked.background')};\n    border-color: ${dt('togglebutton.checked.border.color')};\n    color: ${dt('togglebutton.checked.color')};\n}\n\n.p-togglebutton:focus-visible {\n    box-shadow: ${dt('togglebutton.focus.ring.shadow')};\n    outline: ${dt('togglebutton.focus.ring.width')} ${dt('togglebutton.focus.ring.style')} ${dt('togglebutton.focus.ring.color')};\n    outline-offset: ${dt('togglebutton.focus.ring.offset')};\n}\n\n.p-togglebutton.p-invalid {\n    border-color: ${dt('togglebutton.invalid.border.color')};\n}\n\n.p-togglebutton:disabled {\n    opacity: 1;\n    cursor: default;\n    background: ${dt('togglebutton.disabled.background')};\n    border-color: ${dt('togglebutton.disabled.border.color')};\n    color: ${dt('togglebutton.disabled.color')};\n}\n\n.p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.color')};\n}\n\n.p-togglebutton:not(:disabled):not(.p-togglebutton-checked):hover .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.hover.color')};\n}\n\n.p-togglebutton.p-togglebutton-checked .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.checked.color')};\n}\n\n.p-togglebutton:disabled .p-togglebutton-icon {\n    color: ${dt('togglebutton.icon.disabled.color')};\n}\n\n.p-togglebutton-sm {\n    padding: ${dt('togglebutton.sm.padding')};\n    font-size: ${dt('togglebutton.sm.font.size')};\n}\n\n.p-togglebutton-lg {\n    padding: ${dt('togglebutton.lg.padding')};\n    font-size: ${dt('togglebutton.lg.font.size')};\n}\n\n/* For PrimeNG (iconPos) */\n\n.p-togglebutton-icon-right {\n    order: 1;\n}\n\np-togglebutton.ng-invalid.ng-dirty > .p-togglebutton {\n    border-color: ${dt('togglebutton.invalid.border.color')};\n}\n`;\nconst classes = {\n  root: ({\n    instance\n  }) => ({\n    'p-togglebutton p-component': true,\n    'p-togglebutton-checked': instance.checked,\n    'p-disabled': instance.disabled,\n    'p-togglebutton-sm p-inputfield-sm': instance.size === 'small',\n    'p-togglebutton-lg p-inputfield-lg': instance.size === 'large'\n  }),\n  content: 'p-togglebutton-content',\n  icon: 'p-togglebutton-icon',\n  label: 'p-togglebutton-label'\n};\nclass ToggleButtonStyle extends BaseStyle {\n  name = 'togglebutton';\n  theme = theme;\n  classes = classes;\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵToggleButtonStyle_BaseFactory;\n    return function ToggleButtonStyle_Factory(__ngFactoryType__) {\n      return (ɵToggleButtonStyle_BaseFactory || (ɵToggleButtonStyle_BaseFactory = i0.ɵɵgetInheritedFactory(ToggleButtonStyle)))(__ngFactoryType__ || ToggleButtonStyle);\n    };\n  })();\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ToggleButtonStyle,\n    factory: ToggleButtonStyle.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToggleButtonStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * ToggleButton is used to select a boolean value using a button.\n *\n * [Live Demo](https://www.primeng.org/togglebutton/)\n *\n * @module togglebuttonstyle\n *\n */\nvar ToggleButtonClasses;\n(function (ToggleButtonClasses) {\n  /**\n   * Class name of the root element\n   */\n  ToggleButtonClasses[\"root\"] = \"p-togglebutton\";\n  /**\n   * Class name of the icon element\n   */\n  ToggleButtonClasses[\"icon\"] = \"p-togglebutton-icon\";\n  /**\n   * Class name of the label element\n   */\n  ToggleButtonClasses[\"label\"] = \"p-togglebutton-label\";\n})(ToggleButtonClasses || (ToggleButtonClasses = {}));\nconst _c0 = [\"icon\"];\nconst _c1 = [\"content\"];\nconst _c2 = a0 => ({\n  $implicit: a0\n});\nconst _c3 = (a0, a1) => ({\n  \"p-togglebutton-icon\": true,\n  \"p-togglebutton-icon-left\": a0,\n  \"p-togglebutton-icon-right\": a1\n});\nfunction ToggleButton_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ToggleButton_Conditional_3_Conditional_0_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(3);\n    i0.ɵɵclassMap(ctx_r0.checked ? ctx_r0.onIcon : ctx_r0.offIcon);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(4, _c3, ctx_r0.iconPos === \"left\", ctx_r0.iconPos === \"right\"));\n    i0.ɵɵattribute(\"data-pc-section\", \"icon\");\n  }\n}\nfunction ToggleButton_Conditional_3_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ToggleButton_Conditional_3_Conditional_0_Conditional_0_Template, 1, 7, \"span\", 3);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵconditional(ctx_r0.onIcon || ctx_r0.offIcon ? 0 : -1);\n  }\n}\nfunction ToggleButton_Conditional_3_Conditional_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction ToggleButton_Conditional_3_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ToggleButton_Conditional_3_Conditional_1_ng_container_0_Template, 1, 0, \"ng-container\", 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.iconTemplate || ctx_r0._iconTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c2, ctx_r0.checked));\n  }\n}\nfunction ToggleButton_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ToggleButton_Conditional_3_Conditional_0_Template, 1, 1)(1, ToggleButton_Conditional_3_Conditional_1_Template, 1, 4, \"ng-container\");\n    i0.ɵɵelementStart(2, \"span\", 1);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵconditional(!ctx_r0.iconTemplate ? 0 : 1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.cx(\"label\"));\n    i0.ɵɵattribute(\"data-pc-section\", \"label\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.checked ? ctx_r0.hasOnLabel ? ctx_r0.onLabel : \"\\u00A0\" : ctx_r0.hasOffLabel ? ctx_r0.offLabel : \"\\u00A0\");\n  }\n}\nconst TOGGLEBUTTON_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ToggleButton),\n  multi: true\n};\n/**\n * ToggleButton is used to select a boolean value using a button.\n * @group Components\n */\nclass ToggleButton extends BaseComponent {\n  /**\n   * Label for the on state.\n   * @group Props\n   */\n  onLabel = 'Yes';\n  /**\n   * Label for the off state.\n   * @group Props\n   */\n  offLabel = 'No';\n  /**\n   * Icon for the on state.\n   * @group Props\n   */\n  onIcon;\n  /**\n   * Icon for the off state.\n   * @group Props\n   */\n  offIcon;\n  /**\n   * Defines a string that labels the input for accessibility.\n   * @group Props\n   */\n  ariaLabel;\n  /**\n   * Establishes relationships between the component and label(s) where its value should be one or more element IDs.\n   * @group Props\n   */\n  ariaLabelledBy;\n  /**\n   * When present, it specifies that the element should be disabled.\n   * @group Props\n   */\n  disabled;\n  /**\n   * Inline style of the element.\n   * @group Props\n   */\n  style;\n  /**\n   * Style class of the element.\n   * @group Props\n   */\n  styleClass;\n  get hostClass() {\n    return this.styleClass || '';\n  }\n  /**\n   * Identifier of the focus input to match a label defined for the component.\n   * @group Props\n   */\n  inputId;\n  /**\n   * Index of the element in tabbing order.\n   * @group Props\n   */\n  tabindex = 0;\n  /**\n   * Defines the size of the component.\n   * @group Props\n   */\n  size;\n  /**\n   * Position of the icon.\n   * @group Props\n   */\n  iconPos = 'left';\n  /**\n   * When present, it specifies that the component should automatically get focus on load.\n   * @group Props\n   */\n  autofocus;\n  /**\n   * Whether selection can not be cleared.\n   * @group Props\n   */\n  allowEmpty;\n  /**\n   * Callback to invoke on value change.\n   * @param {ToggleButtonChangeEvent} event - Custom change event.\n   * @group Emits\n   */\n  onChange = new EventEmitter();\n  /**\n   * Custom icon template.\n   * @group Templates\n   */\n  iconTemplate;\n  /**\n   * Custom content template.\n   * @group Templates\n   */\n  contentTemplate;\n  templates;\n  checked = false;\n  onModelChange = () => {};\n  onModelTouched = () => {};\n  _componentStyle = inject(ToggleButtonStyle);\n  toggle(event) {\n    if (!this.disabled && !(this.allowEmpty === false && this.checked)) {\n      this.checked = !this.checked;\n      this.onModelChange(this.checked);\n      this.onModelTouched();\n      this.onChange.emit({\n        originalEvent: event,\n        checked: this.checked\n      });\n      this.cd.markForCheck();\n    }\n  }\n  onKeyDown(event) {\n    switch (event.code) {\n      case 'Enter':\n        this.toggle(event);\n        event.preventDefault();\n        break;\n      case 'Space':\n        this.toggle(event);\n        event.preventDefault();\n        break;\n    }\n  }\n  onBlur() {\n    this.onModelTouched();\n  }\n  writeValue(value) {\n    this.checked = value;\n    this.cd.markForCheck();\n  }\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n  setDisabledState(val) {\n    this.disabled = val;\n    this.cd.markForCheck();\n  }\n  get hasOnLabel() {\n    return this.onLabel && this.onLabel.length > 0;\n  }\n  get hasOffLabel() {\n    return this.onLabel && this.onLabel.length > 0;\n  }\n  get active() {\n    return this.checked === true;\n  }\n  _iconTemplate;\n  _contentTemplate;\n  ngAfterContentInit() {\n    this.templates.forEach(item => {\n      switch (item.getType()) {\n        case 'icon':\n          this._iconTemplate = item.template;\n          break;\n        case 'content':\n          this._contentTemplate = item.template;\n          break;\n        default:\n          this._contentTemplate = item.template;\n          break;\n      }\n    });\n  }\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵToggleButton_BaseFactory;\n    return function ToggleButton_Factory(__ngFactoryType__) {\n      return (ɵToggleButton_BaseFactory || (ɵToggleButton_BaseFactory = i0.ɵɵgetInheritedFactory(ToggleButton)))(__ngFactoryType__ || ToggleButton);\n    };\n  })();\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ToggleButton,\n    selectors: [[\"p-toggleButton\"], [\"p-togglebutton\"], [\"p-toggle-button\"]],\n    contentQueries: function ToggleButton_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c1, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ToggleButton_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.hostClass);\n      }\n    },\n    inputs: {\n      onLabel: \"onLabel\",\n      offLabel: \"offLabel\",\n      onIcon: \"onIcon\",\n      offIcon: \"offIcon\",\n      ariaLabel: \"ariaLabel\",\n      ariaLabelledBy: \"ariaLabelledBy\",\n      disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n      style: \"style\",\n      styleClass: \"styleClass\",\n      inputId: \"inputId\",\n      tabindex: [2, \"tabindex\", \"tabindex\", numberAttribute],\n      size: \"size\",\n      iconPos: \"iconPos\",\n      autofocus: [2, \"autofocus\", \"autofocus\", booleanAttribute],\n      allowEmpty: \"allowEmpty\"\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    standalone: true,\n    features: [i0.ɵɵProvidersFeature([TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButtonStyle]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 4,\n    vars: 15,\n    consts: [[\"pRipple\", \"\", \"type\", \"button\", 3, \"click\", \"ngClass\", \"tabindex\", \"disabled\"], [3, \"ngClass\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"class\", \"ngClass\"]],\n    template: function ToggleButton_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function ToggleButton_Template_button_click_0_listener($event) {\n          return ctx.toggle($event);\n        });\n        i0.ɵɵelementStart(1, \"span\", 1);\n        i0.ɵɵtemplate(2, ToggleButton_ng_container_2_Template, 1, 0, \"ng-container\", 2)(3, ToggleButton_Conditional_3_Template, 4, 4, \"span\", 1);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.styleClass);\n        i0.ɵɵproperty(\"ngClass\", ctx.cx(\"root\"))(\"tabindex\", ctx.tabindex)(\"disabled\", ctx.disabled);\n        i0.ɵɵattribute(\"aria-labelledby\", ctx.ariaLabelledBy)(\"aria-pressed\", ctx.checked)(\"data-p-checked\", ctx.active)(\"data-p-disabled\", ctx.disabled);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngClass\", ctx.cx(\"content\"));\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate || ctx._contentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(13, _c2, ctx.checked));\n        i0.ɵɵadvance();\n        i0.ɵɵconditional(!ctx.contentTemplate ? 3 : -1);\n      }\n    },\n    dependencies: [Ripple, CommonModule, i1.NgClass, i1.NgTemplateOutlet, SharedModule],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToggleButton, [{\n    type: Component,\n    args: [{\n      selector: 'p-toggleButton, p-togglebutton, p-toggle-button',\n      standalone: true,\n      imports: [Ripple, CommonModule, SharedModule],\n      template: `\n        <button\n            pRipple\n            type=\"button\"\n            [ngClass]=\"cx('root')\"\n            [class]=\"styleClass\"\n            [tabindex]=\"tabindex\"\n            [disabled]=\"disabled\"\n            (click)=\"toggle($event)\"\n            [attr.aria-labelledby]=\"ariaLabelledBy\"\n            [attr.aria-pressed]=\"checked\"\n            [attr.data-p-checked]=\"active\"\n            [attr.data-p-disabled]=\"disabled\"\n        >\n            <span [ngClass]=\"cx('content')\">\n                <ng-container *ngTemplateOutlet=\"contentTemplate || _contentTemplate; context: { $implicit: checked }\"></ng-container>\n                @if (!contentTemplate) {\n                    @if (!iconTemplate) {\n                        @if (onIcon || offIcon) {\n                            <span\n                                [class]=\"checked ? this.onIcon : this.offIcon\"\n                                [ngClass]=\"{\n                                    'p-togglebutton-icon': true,\n                                    'p-togglebutton-icon-left': iconPos === 'left',\n                                    'p-togglebutton-icon-right': iconPos === 'right'\n                                }\"\n                                [attr.data-pc-section]=\"'icon'\"\n                            ></span>\n                        }\n                    } @else {\n                        <ng-container *ngTemplateOutlet=\"iconTemplate || _iconTemplate; context: { $implicit: checked }\"></ng-container>\n                    }\n                    <span [ngClass]=\"cx('label')\" [attr.data-pc-section]=\"'label'\">{{ checked ? (hasOnLabel ? onLabel : ' ') : hasOffLabel ? offLabel : ' ' }}</span>\n                }\n            </span>\n        </button>\n    `,\n      providers: [TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButtonStyle],\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    onLabel: [{\n      type: Input\n    }],\n    offLabel: [{\n      type: Input\n    }],\n    onIcon: [{\n      type: Input\n    }],\n    offIcon: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    hostClass: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    inputId: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    size: [{\n      type: Input\n    }],\n    iconPos: [{\n      type: Input\n    }],\n    autofocus: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    allowEmpty: [{\n      type: Input\n    }],\n    onChange: [{\n      type: Output\n    }],\n    iconTemplate: [{\n      type: ContentChild,\n      args: ['icon', {\n        descendants: false\n      }]\n    }],\n    contentTemplate: [{\n      type: ContentChild,\n      args: ['content', {\n        descendants: false\n      }]\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(ToggleButton, {\n    className: \"ToggleButton\"\n  });\n})();\nclass ToggleButtonModule {\n  static ɵfac = function ToggleButtonModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ToggleButtonModule)();\n  };\n  static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: ToggleButtonModule\n  });\n  static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [ToggleButton, SharedModule, SharedModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToggleButtonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ToggleButton, SharedModule],\n      exports: [ToggleButton, SharedModule]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(ToggleButtonModule, {\n    imports: [ToggleButton, SharedModule],\n    exports: [ToggleButton, SharedModule]\n  });\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TOGGLEBUTTON_VALUE_ACCESSOR, ToggleButton, ToggleButtonClasses, ToggleButtonModule, ToggleButtonStyle };\n//# sourceMappingURL=primeng-togglebutton.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}