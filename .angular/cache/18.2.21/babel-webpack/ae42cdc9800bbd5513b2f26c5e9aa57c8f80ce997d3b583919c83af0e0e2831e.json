{"ast":null,"code":"import { BehaviorSubject, interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class AlertsStoreService {\n  rowsSubject = new BehaviorSubject([{\n    id: 1,\n    estado: 'Estado A',\n    valor: 120,\n    updatedAt: Date.now()\n  }, {\n    id: 2,\n    estado: 'Estado B',\n    valor: 95,\n    updatedAt: Date.now()\n  }, {\n    id: 3,\n    estado: 'Estado C',\n    valor: 60,\n    updatedAt: Date.now()\n  }, {\n    id: 4,\n    estado: 'Estado D',\n    valor: 150,\n    updatedAt: Date.now()\n  }]);\n  rows$ = this.rowsSubject.asObservable();\n  constructor() {\n    // Simula cambios cada 3s en una fila aleatoria (no toca BD real)\n    interval(3000).subscribe(() => {\n      const current = [...this.rowsSubject.value];\n      const idx = Math.floor(Math.random() * current.length);\n      const row = {\n        ...current[idx]\n      };\n      row.prev = row.valor;\n      const delta = Math.floor(Math.random() * 21) - 10; // -10..+10\n      row.valor = Math.max(0, row.valor + delta);\n      row.updatedAt = Date.now();\n      current[idx] = row;\n      this.rowsSubject.next(current);\n    });\n  }\n  static ɵfac = function AlertsStoreService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || AlertsStoreService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AlertsStoreService,\n    factory: AlertsStoreService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}